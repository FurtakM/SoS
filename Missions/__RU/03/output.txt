// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 3975 0 0
// PrepareRussian ;
  12: CALL 330 0 0
// PrepareAmerican ;
  16: CALL 2515 0 0
// gameStart := true ;
  20: LD_ADDR_EXP 7
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := true ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// if debug then
  40: LD_EXP 1
  44: IFFALSE 54
// Difficulty := 4 ;
  46: LD_ADDR_OWVAR 67
  50: PUSH
  51: LD_INT 4
  53: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  54: LD_ADDR_EXP 2
  58: PUSH
  59: LD_STRING 02_
  61: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  62: LD_ADDR_EXP 3
  66: PUSH
  67: LD_STRING 03_
  69: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 02_belkovSaved
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: LD_STRING 02_Selfish
  93: PPUSH
  94: LD_INT 0
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
 102: LD_ADDR_EXP 15
 106: PUSH
 107: LD_STRING 02_DickensKilled
 109: PPUSH
 110: LD_INT 0
 112: PPUSH
 113: CALL_OW 30
 117: ST_TO_ADDR
// hasProblem := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// gameStart := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// arabAttackActive := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// allianceAttacked := false ;
 142: LD_ADDR_EXP 9
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 150: LD_ADDR_EXP 17
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// foundOil := false ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// hasScholtze := false ;
 166: LD_ADDR_EXP 11
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// hasKagan := false ;
 174: LD_ADDR_EXP 12
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 190: LD_ADDR_EXP 22
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasOilTower := false ;
 198: LD_ADDR_EXP 14
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// hasFactory := false ;
 206: LD_ADDR_EXP 19
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// canSearchForScholtze := false ;
 214: LD_ADDR_EXP 16
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// retreat := false ;
 222: LD_ADDR_EXP 18
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// kurinWaitForVehiclesTime := 0 0$20 ;
 230: LD_ADDR_EXP 20
 234: PUSH
 235: LD_INT 700
 237: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 238: LD_ADDR_EXP 21
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: LD_INT 3
 248: PUSH
 249: LD_INT 4
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: PUSH
 261: LD_OWVAR 67
 265: ARRAY
 266: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 267: LD_ADDR_EXP 23
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 275: LD_ADDR_EXP 24
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 283: LD_ADDR_EXP 25
 287: PUSH
 288: LD_INT 4
 290: PUSH
 291: LD_INT 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 6
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: PUSH
 306: LD_OWVAR 67
 310: ARRAY
 311: ST_TO_ADDR
// if debug then
 312: LD_EXP 1
 316: IFFALSE 325
// FogOff ( 3 ) ;
 318: LD_INT 3
 320: PPUSH
 321: CALL_OW 344
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 330: LD_INT 0
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
 336: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 337: LD_EXP 42
 341: PPUSH
 342: CALL_OW 274
 346: PPUSH
 347: LD_INT 1
 349: PPUSH
 350: LD_INT 3000
 352: PPUSH
 353: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 357: LD_EXP 42
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 600
 372: PPUSH
 373: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 377: LD_EXP 43
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 1
 389: PPUSH
 390: LD_INT 350
 392: PUSH
 393: LD_INT 280
 395: PUSH
 396: LD_INT 210
 398: PUSH
 399: LD_INT 150
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: PUSH
 408: LD_OWVAR 67
 412: ARRAY
 413: PPUSH
 414: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 418: LD_EXP 43
 422: PPUSH
 423: CALL_OW 274
 427: PPUSH
 428: LD_INT 2
 430: PPUSH
 431: LD_INT 60
 433: PUSH
 434: LD_INT 40
 436: PUSH
 437: LD_INT 20
 439: PUSH
 440: LD_INT 0
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: CALL_OW 277
// uc_side := 3 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// uc_nation := 3 ;
 467: LD_ADDR_OWVAR 21
 471: PUSH
 472: LD_INT 3
 474: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 475: LD_ADDR_EXP 26
 479: PUSH
 480: LD_STRING Burlak
 482: PPUSH
 483: LD_EXP 1
 487: NOT
 488: PPUSH
 489: LD_EXP 2
 493: PPUSH
 494: CALL 15698 0 3
 498: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 499: LD_ADDR_EXP 36
 503: PUSH
 504: EMPTY
 505: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 506: LD_ADDR_EXP 35
 510: PUSH
 511: EMPTY
 512: ST_TO_ADDR
// popovTeam := [ ] ;
 513: LD_ADDR_EXP 41
 517: PUSH
 518: EMPTY
 519: ST_TO_ADDR
// grishkoTeam := [ ] ;
 520: LD_ADDR_EXP 37
 524: PUSH
 525: EMPTY
 526: ST_TO_ADDR
// uc_side := 5 ;
 527: LD_ADDR_OWVAR 20
 531: PUSH
 532: LD_INT 5
 534: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 535: LD_ADDR_EXP 33
 539: PUSH
 540: LD_STRING Scholtze
 542: PPUSH
 543: CALL_OW 25
 547: ST_TO_ADDR
// uc_side := 6 ;
 548: LD_ADDR_OWVAR 20
 552: PUSH
 553: LD_INT 6
 555: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 556: LD_ADDR_EXP 27
 560: PUSH
 561: LD_STRING Gnyevko
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 2
 574: PPUSH
 575: CALL 15698 0 3
 579: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 580: LD_ADDR_EXP 29
 584: PUSH
 585: LD_STRING Kirilenkova
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 2
 598: PPUSH
 599: CALL 15698 0 3
 603: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 604: LD_ADDR_EXP 31
 608: PUSH
 609: LD_STRING Kovalyuk
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: LD_EXP 2
 622: PPUSH
 623: CALL 15698 0 3
 627: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 628: LD_ADDR_EXP 28
 632: PUSH
 633: LD_STRING Belkov
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_EXP 2
 646: PPUSH
 647: CALL 15698 0 3
 651: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 652: LD_ADDR_EXP 30
 656: PUSH
 657: LD_STRING Kurin
 659: PPUSH
 660: CALL_OW 25
 664: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 665: LD_ADDR_EXP 32
 669: PUSH
 670: LD_STRING Popov
 672: PPUSH
 673: CALL_OW 25
 677: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 678: LD_ADDR_EXP 34
 682: PUSH
 683: LD_STRING Grishko
 685: PPUSH
 686: CALL_OW 25
 690: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 691: LD_ADDR_EXP 38
 695: PUSH
 696: LD_EXP 2
 700: PUSH
 701: LD_STRING burlakTeam
 703: STR
 704: PPUSH
 705: CALL_OW 31
 709: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 710: LD_ADDR_EXP 39
 714: PUSH
 715: LD_EXP 2
 719: PUSH
 720: LD_STRING kirovTeam
 722: STR
 723: PPUSH
 724: CALL_OW 31
 728: ST_TO_ADDR
// if kirovTeam < 15 then
 729: LD_EXP 39
 733: PUSH
 734: LD_INT 15
 736: LESS
 737: IFFALSE 809
// for i := Count ( kirovTeam ) to 15 do
 739: LD_ADDR_VAR 0 2
 743: PUSH
 744: DOUBLE
 745: LD_EXP 39
 749: PPUSH
 750: CALL 17922 0 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_INT 15
 758: PUSH
 759: FOR_TO
 760: IFFALSE 807
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 762: LD_INT 0
 764: PPUSH
 765: LD_VAR 0 2
 769: PUSH
 770: LD_INT 4
 772: MOD
 773: PUSH
 774: LD_INT 1
 776: PLUS
 777: PPUSH
 778: LD_INT 2
 780: PPUSH
 781: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 785: LD_ADDR_EXP 39
 789: PUSH
 790: LD_EXP 39
 794: PPUSH
 795: CALL_OW 44
 799: PPUSH
 800: CALL 53898 0 2
 804: ST_TO_ADDR
// end ;
 805: GO 759
 807: POP
 808: POP
// for i in kirovTeam union burlakTeam do
 809: LD_ADDR_VAR 0 2
 813: PUSH
 814: LD_EXP 39
 818: PUSH
 819: LD_EXP 38
 823: UNION
 824: PUSH
 825: FOR_IN
 826: IFFALSE 1071
// begin case GetClass ( i ) of class_soldier , class_engineer :
 828: LD_VAR 0 2
 832: PPUSH
 833: CALL_OW 257
 837: PUSH
 838: LD_INT 1
 840: DOUBLE
 841: EQUAL
 842: IFTRUE 852
 844: LD_INT 2
 846: DOUBLE
 847: EQUAL
 848: IFTRUE 852
 850: GO 903
 852: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 853: LD_ADDR_VAR 0 5
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: LD_INT 62
 873: PUSH
 874: EMPTY
 875: LIST
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 4
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 69
 900: ST_TO_ADDR
 901: GO 1022
 903: LD_INT 4
 905: DOUBLE
 906: EQUAL
 907: IFTRUE 911
 909: GO 962
 911: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 912: LD_ADDR_VAR 0 5
 916: PUSH
 917: LD_INT 22
 919: PUSH
 920: LD_INT 6
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: LD_INT 62
 932: PUSH
 933: EMPTY
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: PUSH
 940: LD_INT 30
 942: PUSH
 943: LD_INT 6
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: ST_TO_ADDR
 960: GO 1022
 962: LD_INT 3
 964: DOUBLE
 965: EQUAL
 966: IFTRUE 970
 968: GO 1021
 970: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
 971: LD_ADDR_VAR 0 5
 975: PUSH
 976: LD_INT 22
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 3
 988: PUSH
 989: LD_INT 62
 991: PUSH
 992: EMPTY
 993: LIST
 994: PUSH
 995: EMPTY
 996: LIST
 997: LIST
 998: PUSH
 999: LD_INT 30
1001: PUSH
1002: LD_INT 2
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PPUSH
1014: CALL_OW 69
1018: ST_TO_ADDR
1019: GO 1022
1021: POP
// if tmp then
1022: LD_VAR 0 5
1026: IFFALSE 1048
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1028: LD_VAR 0 2
1032: PPUSH
1033: LD_VAR 0 5
1037: PUSH
1038: LD_INT 1
1040: ARRAY
1041: PPUSH
1042: CALL_OW 52
1046: GO 1069
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1048: LD_VAR 0 2
1052: PPUSH
1053: LD_INT 158
1055: PPUSH
1056: LD_INT 106
1058: PPUSH
1059: LD_INT 3
1061: PPUSH
1062: LD_INT 0
1064: PPUSH
1065: CALL_OW 50
// end ;
1069: GO 825
1071: POP
1072: POP
// for i := 1 to 2 do
1073: LD_ADDR_VAR 0 2
1077: PUSH
1078: DOUBLE
1079: LD_INT 1
1081: DEC
1082: ST_TO_ADDR
1083: LD_INT 2
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1121
// begin PrepareSoldier ( sex_male , 2 ) ;
1089: LD_INT 1
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 37
1108: PPUSH
1109: CALL_OW 44
1113: PPUSH
1114: CALL 53898 0 2
1118: ST_TO_ADDR
// end ;
1119: GO 1086
1121: POP
1122: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1123: LD_ADDR_EXP 37
1127: PUSH
1128: LD_EXP 37
1132: PPUSH
1133: LD_EXP 34
1137: PPUSH
1138: CALL 53898 0 2
1142: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: LD_STRING 02_VehiclesCount
1150: PPUSH
1151: LD_INT 2
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// if vehiclesAmount > 4 then
1159: LD_VAR 0 3
1163: PUSH
1164: LD_INT 4
1166: GREATER
1167: IFFALSE 1177
// vehiclesAmount := 4 ;
1169: LD_ADDR_VAR 0 3
1173: PUSH
1174: LD_INT 4
1176: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1177: LD_OWVAR 67
1181: PUSH
1182: LD_INT 2
1184: GREATER
1185: IFFALSE 1197
1187: PUSH
1188: LD_VAR 0 3
1192: PUSH
1193: LD_INT 2
1195: GREATER
1196: AND
1197: IFFALSE 1207
// vehiclesAmount := 2 ;
1199: LD_ADDR_VAR 0 3
1203: PUSH
1204: LD_INT 2
1206: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: DOUBLE
1213: LD_INT 1
1215: DEC
1216: ST_TO_ADDR
1217: LD_VAR 0 3
1221: PUSH
1222: FOR_TO
1223: IFFALSE 1305
// begin uc_side := 3 ;
1225: LD_ADDR_OWVAR 20
1229: PUSH
1230: LD_INT 3
1232: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1233: LD_INT 21
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 1
1241: PPUSH
1242: LD_INT 42
1244: PPUSH
1245: LD_INT 80
1247: PPUSH
1248: CALL 20718 0 5
// veh := CreateVehicle ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: CALL_OW 45
1261: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1262: LD_VAR 0 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 12
1277: PPUSH
1278: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1282: LD_VAR 0 4
1286: PPUSH
1287: LD_INT 112
1289: PPUSH
1290: LD_INT 98
1292: PPUSH
1293: LD_INT 12
1295: PPUSH
1296: LD_INT 0
1298: PPUSH
1299: CALL_OW 50
// end ;
1303: GO 1222
1305: POP
1306: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1307: LD_ADDR_VAR 0 3
1311: PUSH
1312: LD_STRING 02_KirovVehiclesCount
1314: PPUSH
1315: LD_INT 1
1317: PPUSH
1318: CALL_OW 30
1322: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1323: LD_ADDR_VAR 0 2
1327: PUSH
1328: DOUBLE
1329: LD_INT 1
1331: DEC
1332: ST_TO_ADDR
1333: LD_VAR 0 3
1337: PUSH
1338: FOR_TO
1339: IFFALSE 1421
// begin uc_side := 6 ;
1341: LD_ADDR_OWVAR 20
1345: PUSH
1346: LD_INT 6
1348: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1349: LD_INT 21
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 1
1357: PPUSH
1358: LD_INT 42
1360: PPUSH
1361: LD_INT 80
1363: PPUSH
1364: CALL 20718 0 5
// veh := CreateVehicle ;
1368: LD_ADDR_VAR 0 4
1372: PUSH
1373: CALL_OW 45
1377: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1378: LD_VAR 0 4
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: LD_INT 5
1388: PPUSH
1389: CALL_OW 12
1393: PPUSH
1394: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1398: LD_VAR 0 4
1402: PPUSH
1403: LD_INT 157
1405: PPUSH
1406: LD_INT 106
1408: PPUSH
1409: LD_INT 12
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 50
// end ;
1419: GO 1338
1421: POP
1422: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1423: LD_ADDR_EXP 45
1427: PUSH
1428: LD_EXP 26
1432: PUSH
1433: LD_EXP 31
1437: PUSH
1438: LD_EXP 27
1442: PUSH
1443: LD_EXP 28
1447: PUSH
1448: LD_EXP 33
1452: PUSH
1453: LD_EXP 29
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1466: LD_ADDR_EXP 46
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 6
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 21
1483: PUSH
1484: LD_INT 2
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1500: LD_ADDR_EXP 47
1504: PUSH
1505: EMPTY
1506: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1507: LD_ADDR_EXP 48
1511: PUSH
1512: LD_INT 6
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: LD_INT 1
1520: PPUSH
1521: CALL 15845 0 3
1525: ST_TO_ADDR
// kirovConstructList := [ ] ;
1526: LD_ADDR_EXP 50
1530: PUSH
1531: EMPTY
1532: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] ] ;
1533: LD_ADDR_EXP 49
1537: PUSH
1538: LD_INT 3
1540: PUSH
1541: LD_INT 159
1543: PUSH
1544: LD_INT 113
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: LD_INT 153
1561: PUSH
1562: LD_INT 99
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 10
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_INT 32
1580: PUSH
1581: LD_INT 144
1583: PUSH
1584: LD_INT 98
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 26
1598: PUSH
1599: LD_INT 155
1601: PUSH
1602: LD_INT 94
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 26
1616: PUSH
1617: LD_INT 158
1619: PUSH
1620: LD_INT 96
1622: PUSH
1623: LD_INT 2
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 17
1634: PUSH
1635: LD_INT 162
1637: PUSH
1638: LD_INT 116
1640: PUSH
1641: LD_INT 5
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 32
1652: PUSH
1653: LD_INT 169
1655: PUSH
1656: LD_INT 101
1658: PUSH
1659: LD_INT 3
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 32
1670: PUSH
1671: LD_INT 171
1673: PUSH
1674: LD_INT 119
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 32
1688: PUSH
1689: LD_INT 144
1691: PUSH
1692: LD_INT 106
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$1 trigger gameStart do
1720: LD_EXP 7
1724: IFFALSE 1804
1726: GO 1728
1728: DISABLE
// begin enable ;
1729: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1730: LD_INT 6
1732: PPUSH
1733: LD_INT 10
1735: PPUSH
1736: LD_INT 13
1738: PPUSH
1739: LD_INT 12
1741: PPUSH
1742: LD_INT 11
1744: PPUSH
1745: LD_EXP 35
1749: PPUSH
1750: LD_EXP 46
1754: PPUSH
1755: LD_EXP 48
1759: PPUSH
1760: LD_EXP 50
1764: PPUSH
1765: LD_EXP 49
1769: PPUSH
1770: LD_INT 153
1772: PUSH
1773: LD_INT 103
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PPUSH
1780: LD_INT 144
1782: PUSH
1783: LD_INT 102
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: LD_INT 122
1792: PUSH
1793: LD_INT 49
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PPUSH
1800: CALL 4711 0 13
// end ;
1804: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
1805: LD_EXP 7
1809: IFFALSE 2040
1811: GO 1813
1813: DISABLE
1814: LD_INT 0
1816: PPUSH
// begin for i in grishkoTeam do
1817: LD_ADDR_VAR 0 1
1821: PUSH
1822: LD_EXP 37
1826: PUSH
1827: FOR_IN
1828: IFFALSE 1941
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
1830: LD_VAR 0 1
1834: PPUSH
1835: LD_INT 15
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
1845: LD_VAR 0 1
1849: PPUSH
1850: LD_INT 142
1852: PPUSH
1853: LD_INT 135
1855: PPUSH
1856: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
1860: LD_VAR 0 1
1864: PPUSH
1865: LD_INT 420
1867: PUSH
1868: LD_VAR 0 1
1872: PUSH
1873: LD_INT 70
1875: MUL
1876: MINUS
1877: PPUSH
1878: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
1882: LD_VAR 0 1
1886: PPUSH
1887: LD_INT 176
1889: PPUSH
1890: LD_INT 131
1892: PPUSH
1893: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_INT 210
1904: PPUSH
1905: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
1909: LD_VAR 0 1
1913: PPUSH
1914: LD_INT 199
1916: PPUSH
1917: LD_INT 105
1919: PPUSH
1920: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
1924: LD_INT 35
1926: PPUSH
1927: LD_INT 105
1929: PPUSH
1930: CALL_OW 12
1934: PPUSH
1935: CALL_OW 67
// end ;
1939: GO 1827
1941: POP
1942: POP
// repeat wait ( 0 0$1 ) ;
1943: LD_INT 35
1945: PPUSH
1946: CALL_OW 67
// for i in grishkoTeam do
1950: LD_ADDR_VAR 0 1
1954: PUSH
1955: LD_EXP 37
1959: PUSH
1960: FOR_IN
1961: IFFALSE 2020
// if IsAt ( i , 199 , 105 ) then
1963: LD_VAR 0 1
1967: PPUSH
1968: LD_INT 199
1970: PPUSH
1971: LD_INT 105
1973: PPUSH
1974: CALL_OW 307
1978: IFFALSE 1991
// RemoveUnit ( i ) else
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 64
1989: GO 2018
// if not HasTask ( i ) then
1991: LD_VAR 0 1
1995: PPUSH
1996: CALL_OW 314
2000: NOT
2001: IFFALSE 2018
// ComMoveXY ( i , 199 , 105 ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 199
2010: PPUSH
2011: LD_INT 105
2013: PPUSH
2014: CALL_OW 111
2018: GO 1960
2020: POP
2021: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2022: LD_EXP 37
2026: PPUSH
2027: LD_INT 50
2029: PUSH
2030: EMPTY
2031: LIST
2032: PPUSH
2033: CALL_OW 72
2037: NOT
2038: IFFALSE 1943
// end ;
2040: PPOPN 1
2042: END
// export function SendCargoWithOil ; var i , tmp , un , veh ; begin
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
2049: PPUSH
// ruCargos := [ ] ;
2050: LD_ADDR_EXP 51
2054: PUSH
2055: EMPTY
2056: ST_TO_ADDR
// ruGuards := [ ] ;
2057: LD_ADDR_EXP 52
2061: PUSH
2062: EMPTY
2063: ST_TO_ADDR
// for i := 1 to 3 do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: DOUBLE
2070: LD_INT 1
2072: DEC
2073: ST_TO_ADDR
2074: LD_INT 3
2076: PUSH
2077: FOR_TO
2078: IFFALSE 2094
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_INT 17
2087: PPUSH
2088: CALL_OW 286
2092: GO 2077
2094: POP
2095: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2096: LD_ADDR_VAR 0 3
2100: PUSH
2101: LD_INT 92
2103: PUSH
2104: LD_INT 207
2106: PUSH
2107: LD_INT 162
2109: PUSH
2110: LD_INT 6
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: ST_TO_ADDR
// if tmp then
2124: LD_VAR 0 3
2128: IFFALSE 2207
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2130: LD_VAR 0 3
2134: PPUSH
2135: LD_INT 21
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PPUSH
2145: CALL_OW 72
2149: IFFALSE 2192
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2151: LD_ADDR_VAR 0 2
2155: PUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 21
2163: PUSH
2164: LD_INT 3
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 72
2175: PUSH
2176: FOR_IN
2177: IFFALSE 2190
// RemoveUnit ( i ) ;
2179: LD_VAR 0 2
2183: PPUSH
2184: CALL_OW 64
2188: GO 2176
2190: POP
2191: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2192: LD_VAR 0 3
2196: PPUSH
2197: LD_INT 200
2199: PPUSH
2200: LD_INT 147
2202: PPUSH
2203: CALL_OW 111
// end ; tmp := [ ] ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: EMPTY
2213: ST_TO_ADDR
// for i := 1 to 3 do
2214: LD_ADDR_VAR 0 2
2218: PUSH
2219: DOUBLE
2220: LD_INT 1
2222: DEC
2223: ST_TO_ADDR
2224: LD_INT 3
2226: PUSH
2227: FOR_TO
2228: IFFALSE 2420
// begin uc_side := 6 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 6
2237: ST_TO_ADDR
// uc_nation := nation_russian ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 3
2245: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2246: LD_INT 21
2248: PPUSH
2249: LD_INT 1
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 51
2257: PPUSH
2258: LD_INT 90
2260: PPUSH
2261: CALL 20718 0 5
// veh := CreateVehicle ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: CALL_OW 45
2274: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2275: LD_ADDR_EXP 51
2279: PUSH
2280: LD_EXP 51
2284: PPUSH
2285: LD_VAR 0 5
2289: PPUSH
2290: CALL 53898 0 2
2294: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2295: LD_VAR 0 5
2299: PPUSH
2300: LD_INT 2
2302: PPUSH
2303: LD_INT 100
2305: PPUSH
2306: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2310: LD_INT 35
2312: PPUSH
2313: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2317: LD_VAR 0 5
2321: PPUSH
2322: LD_INT 14
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: CALL_OW 49
2332: IFFALSE 2310
// PrepareSoldier ( false , 2 ) ;
2334: LD_INT 0
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 381
// un := CreateHuman ;
2344: LD_ADDR_VAR 0 4
2348: PUSH
2349: CALL_OW 44
2353: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2354: LD_ADDR_EXP 52
2358: PUSH
2359: LD_EXP 52
2363: PPUSH
2364: LD_VAR 0 4
2368: PPUSH
2369: CALL 53898 0 2
2373: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2374: LD_VAR 0 4
2378: PPUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2388: LD_VAR 0 5
2392: PPUSH
2393: LD_INT 105
2395: PPUSH
2396: LD_INT 47
2398: PPUSH
2399: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2403: LD_VAR 0 5
2407: PPUSH
2408: LD_INT 71
2410: PPUSH
2411: LD_INT 29
2413: PPUSH
2414: CALL_OW 171
// end ;
2418: GO 2227
2420: POP
2421: POP
// repeat wait ( 0 0$3 ) ;
2422: LD_INT 105
2424: PPUSH
2425: CALL_OW 67
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 6 ] ) >= 2 ;
2429: LD_EXP 51
2433: PPUSH
2434: LD_INT 92
2436: PUSH
2437: LD_INT 71
2439: PUSH
2440: LD_INT 29
2442: PUSH
2443: LD_INT 6
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PPUSH
2452: CALL_OW 72
2456: PUSH
2457: LD_INT 2
2459: GREATEREQUAL
2460: IFFALSE 2422
// for i in ruGuards do
2462: LD_ADDR_VAR 0 2
2466: PUSH
2467: LD_EXP 52
2471: PUSH
2472: FOR_IN
2473: IFFALSE 2508
// begin ComExitVehicle ( i ) ;
2475: LD_VAR 0 2
2479: PPUSH
2480: CALL_OW 121
// wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2491: LD_VAR 0 2
2495: PPUSH
2496: LD_INT 63
2498: PPUSH
2499: LD_INT 47
2501: PPUSH
2502: CALL_OW 114
// end ;
2506: GO 2472
2508: POP
2509: POP
// end ; end_of_file
2510: LD_VAR 0 1
2514: RET
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
2515: LD_INT 0
2517: PPUSH
2518: PPUSH
2519: PPUSH
2520: PPUSH
// uc_side := omicronSide ;
2521: LD_ADDR_OWVAR 20
2525: PUSH
2526: LD_INT 1
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
2537: LD_ADDR_EXP 55
2541: PUSH
2542: EMPTY
2543: ST_TO_ADDR
// omicronTroops := [ ] ;
2544: LD_ADDR_EXP 54
2548: PUSH
2549: EMPTY
2550: ST_TO_ADDR
// omicronVehicles := [ ] ;
2551: LD_ADDR_EXP 56
2555: PUSH
2556: EMPTY
2557: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
2558: LD_ADDR_EXP 57
2562: PUSH
2563: LD_INT 1
2565: PPUSH
2566: LD_INT 1
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 15845 0 3
2576: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
2577: LD_ADDR_EXP 59
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// omicronConstructList := [ ] ;
2584: LD_ADDR_EXP 58
2588: PUSH
2589: EMPTY
2590: ST_TO_ADDR
// SetBName ( usDep , omikron ) ;
2591: LD_INT 290
2593: PPUSH
2594: LD_STRING omikron
2596: PPUSH
2597: CALL_OW 500
// limit := [ 8 , 9 , 9 , 10 ] [ Difficulty ] ;
2601: LD_ADDR_VAR 0 4
2605: PUSH
2606: LD_INT 8
2608: PUSH
2609: LD_INT 9
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: LD_INT 10
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: PUSH
2624: LD_OWVAR 67
2628: ARRAY
2629: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
2630: LD_ADDR_EXP 53
2634: PUSH
2635: LD_STRING Sikorski
2637: PPUSH
2638: CALL_OW 25
2642: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
2643: LD_EXP 53
2647: PPUSH
2648: LD_INT 290
2650: PPUSH
2651: CALL_OW 52
// for i := 1 to limit - 5 do
2655: LD_ADDR_VAR 0 2
2659: PUSH
2660: DOUBLE
2661: LD_INT 1
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 4
2669: PUSH
2670: LD_INT 5
2672: MINUS
2673: PUSH
2674: FOR_TO
2675: IFFALSE 2761
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
2677: LD_INT 0
2679: PPUSH
2680: LD_INT 2
2682: PUSH
2683: LD_INT 2
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 4
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_OWVAR 67
2702: ARRAY
2703: PPUSH
2704: CALL_OW 381
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 3
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2718: LD_ADDR_EXP 54
2722: PUSH
2723: LD_EXP 54
2727: PPUSH
2728: LD_VAR 0 3
2732: PPUSH
2733: CALL 53898 0 2
2737: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2738: LD_VAR 0 3
2742: PPUSH
2743: LD_INT 27
2745: PPUSH
2746: LD_INT 36
2748: PPUSH
2749: LD_INT 5
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 50
// end ;
2759: GO 2674
2761: POP
2762: POP
// limit := limit - 5 ;
2763: LD_ADDR_VAR 0 4
2767: PUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 5
2775: MINUS
2776: ST_TO_ADDR
// for i := 1 to limit do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_VAR 0 4
2791: PUSH
2792: FOR_TO
2793: IFFALSE 2871
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
2795: LD_INT 0
2797: PPUSH
2798: LD_VAR 0 2
2802: PUSH
2803: LD_INT 3
2805: MOD
2806: PUSH
2807: LD_INT 2
2809: PLUS
2810: PPUSH
2811: LD_INT 3
2813: PPUSH
2814: CALL_OW 380
// un := CreateHuman ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 44
2827: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
2828: LD_ADDR_EXP 54
2832: PUSH
2833: LD_EXP 54
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: CALL 53898 0 2
2847: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_INT 27
2855: PPUSH
2856: LD_INT 36
2858: PPUSH
2859: LD_INT 5
2861: PPUSH
2862: LD_INT 0
2864: PPUSH
2865: CALL_OW 50
// end ;
2869: GO 2792
2871: POP
2872: POP
// if debug then
2873: LD_EXP 1
2877: IFFALSE 2948
// begin uc_side := reinforcementsSide ;
2879: LD_ADDR_OWVAR 20
2883: PUSH
2884: LD_INT 4
2886: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 381
// un := CreateHuman ;
2897: LD_ADDR_VAR 0 3
2901: PUSH
2902: CALL_OW 44
2906: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
2907: LD_ADDR_EXP 55
2911: PUSH
2912: LD_EXP 55
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: CALL 53898 0 2
2926: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
2927: LD_VAR 0 3
2931: PPUSH
2932: LD_INT 71
2934: PPUSH
2935: LD_INT 102
2937: PPUSH
2938: LD_INT 3
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 50
// end ; end ;
2948: LD_VAR 0 1
2952: RET
// every 0 0$1 trigger gameStart do
2953: LD_EXP 7
2957: IFFALSE 3029
2959: GO 2961
2961: DISABLE
// begin enable ;
2962: ENABLE
// BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 18
2968: PPUSH
2969: LD_INT 18
2971: PPUSH
2972: LD_INT 19
2974: PPUSH
2975: LD_INT 20
2977: PPUSH
2978: LD_EXP 54
2982: PPUSH
2983: LD_EXP 56
2987: PPUSH
2988: LD_EXP 57
2992: PPUSH
2993: LD_EXP 58
2997: PPUSH
2998: LD_EXP 59
3002: PPUSH
3003: LD_INT 27
3005: PUSH
3006: LD_INT 32
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PPUSH
3013: LD_INT 19
3015: PUSH
3016: LD_INT 14
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: EMPTY
3024: PPUSH
3025: CALL 4711 0 13
// end ;
3029: END
// every 0 0$1 trigger gameStart do var i , time ;
3030: LD_EXP 7
3034: IFFALSE 3111
3036: GO 3038
3038: DISABLE
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
// begin time := [ 4 4$00 , 3 3$30 , 3 3$20 , 3 3$00 ] [ Difficulty ] ;
3043: LD_ADDR_VAR 0 2
3047: PUSH
3048: LD_INT 8400
3050: PUSH
3051: LD_INT 7350
3053: PUSH
3054: LD_INT 7000
3056: PUSH
3057: LD_INT 6300
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_OWVAR 67
3070: ARRAY
3071: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$20 ) ) ;
3072: LD_VAR 0 2
3076: PUSH
3077: LD_INT 700
3079: NEG
3080: PPUSH
3081: LD_INT 700
3083: PPUSH
3084: CALL_OW 12
3088: PLUS
3089: PPUSH
3090: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
3094: LD_INT 2
3096: PPUSH
3097: CALL_OW 427
// until convoysCounter = 0 ;
3101: LD_EXP 25
3105: PUSH
3106: LD_INT 0
3108: EQUAL
3109: IFFALSE 3072
// end ;
3111: PPOPN 2
3113: END
// export function SendConvoy ; var i , tmp , path ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// path := rand ( 1 , 2 ) ;
3120: LD_ADDR_VAR 0 4
3124: PUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: CALL_OW 12
3135: ST_TO_ADDR
// end ; end_of_file end_of_file
3136: LD_VAR 0 1
3140: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3141: LD_VAR 0 1
3145: PPUSH
3146: CALL 75338 0 1
// if un in kirovVehicles then
3150: LD_VAR 0 1
3154: PUSH
3155: LD_EXP 46
3159: IN
3160: IFFALSE 3178
// kirovVehicles := kirovVehicles diff un ;
3162: LD_ADDR_EXP 46
3166: PUSH
3167: LD_EXP 46
3171: PUSH
3172: LD_VAR 0 1
3176: DIFF
3177: ST_TO_ADDR
// if un = Burlak then
3178: LD_VAR 0 1
3182: PUSH
3183: LD_EXP 26
3187: EQUAL
3188: IFFALSE 3197
// YouLost ( Burlak ) ;
3190: LD_STRING Burlak
3192: PPUSH
3193: CALL_OW 104
// if un = Popov then
3197: LD_VAR 0 1
3201: PUSH
3202: LD_EXP 32
3206: EQUAL
3207: IFFALSE 3216
// YouLost ( Popov ) ;
3209: LD_STRING Popov
3211: PPUSH
3212: CALL_OW 104
// if un = Kurin and not arabAttackActive then
3216: LD_VAR 0 1
3220: PUSH
3221: LD_EXP 30
3225: EQUAL
3226: IFFALSE 3235
3228: PUSH
3229: LD_EXP 8
3233: NOT
3234: AND
3235: IFFALSE 3244
// YouLost ( Kurin ) ;
3237: LD_STRING Kurin
3239: PPUSH
3240: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
3244: LD_VAR 0 1
3248: PUSH
3249: LD_EXP 43
3253: EQUAL
3254: IFFALSE 3263
3256: PUSH
3257: LD_EXP 8
3261: NOT
3262: AND
3263: IFFALSE 3272
// YouLost ( Beria ) ;
3265: LD_STRING Beria
3267: PPUSH
3268: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
3272: LD_VAR 0 1
3276: PUSH
3277: LD_EXP 44
3281: EQUAL
3282: IFFALSE 3291
3284: PUSH
3285: LD_EXP 8
3289: NOT
3290: AND
3291: IFFALSE 3300
// YouLost ( Kagan ) ;
3293: LD_STRING Kagan
3295: PPUSH
3296: CALL_OW 104
// end ;
3300: PPOPN 1
3302: END
// on VehicleConstructed ( vehicle , factory ) do var side ;
3303: LD_INT 0
3305: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 2
3315: PPUSH
3316: CALL 75396 0 2
// side := GetSide ( vehicle ) ;
3320: LD_ADDR_VAR 0 3
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 255
3334: ST_TO_ADDR
// if side = 6 then
3335: LD_VAR 0 3
3339: PUSH
3340: LD_INT 6
3342: EQUAL
3343: IFFALSE 3382
// begin kirovVehicles := Join ( kirovVehicles , vehicle ) ;
3345: LD_ADDR_EXP 46
3349: PUSH
3350: LD_EXP 46
3354: PPUSH
3355: LD_VAR 0 1
3359: PPUSH
3360: CALL 53898 0 2
3364: ST_TO_ADDR
// SetTag ( IsDrivenBy ( vehicle ) , tMech ) ;
3365: LD_VAR 0 1
3369: PPUSH
3370: CALL_OW 311
3374: PPUSH
3375: LD_INT 7
3377: PPUSH
3378: CALL_OW 109
// end ; end ;
3382: PPOPN 3
3384: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 110
3394: PUSH
3395: LD_INT 7
3397: EQUAL
3398: IFFALSE 3412
// SetTag ( driver , 0 ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 109
// end ;
3412: PPOPN 4
3414: END
// on UpgradeComplete ( b ) do var side , btype ;
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
// begin side := GetSide ( b ) ;
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_VAR 0 1
3428: PPUSH
3429: CALL_OW 255
3433: ST_TO_ADDR
// btype := GetBType ( b ) ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: LD_VAR 0 1
3443: PPUSH
3444: CALL_OW 266
3448: ST_TO_ADDR
// if side = 6 then
3449: LD_VAR 0 2
3453: PUSH
3454: LD_INT 6
3456: EQUAL
3457: IFFALSE 3477
// begin kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3459: LD_ADDR_EXP 49
3463: PUSH
3464: LD_EXP 49
3468: PPUSH
3469: LD_INT 1
3471: PPUSH
3472: CALL_OW 3
3476: ST_TO_ADDR
// end ; end ;
3477: PPOPN 3
3479: END
// on ResearchComplete ( tech , lab ) do var side ;
3480: LD_INT 0
3482: PPUSH
// begin side := GetSide ( lab ) ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 2
3492: PPUSH
3493: CALL_OW 255
3497: ST_TO_ADDR
// if side = 6 then
3498: LD_VAR 0 3
3502: PUSH
3503: LD_INT 6
3505: EQUAL
3506: IFFALSE 3524
// kirovTechs := kirovTechs diff tech ;
3508: LD_ADDR_EXP 48
3512: PUSH
3513: LD_EXP 48
3517: PUSH
3518: LD_VAR 0 1
3522: DIFF
3523: ST_TO_ADDR
// end ;
3524: PPOPN 3
3526: END
// on BuildingComplete ( b ) do var side , btype ;
3527: LD_INT 0
3529: PPUSH
3530: PPUSH
// begin side := GetSide ( b ) ;
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_VAR 0 1
3540: PPUSH
3541: CALL_OW 255
3545: ST_TO_ADDR
// btype := GetBType ( b ) ;
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: LD_VAR 0 1
3555: PPUSH
3556: CALL_OW 266
3560: ST_TO_ADDR
// if side = 3 then
3561: LD_VAR 0 2
3565: PUSH
3566: LD_INT 3
3568: EQUAL
3569: IFFALSE 3659
// begin if btype = b_oil_mine then
3571: LD_VAR 0 3
3575: PUSH
3576: LD_INT 29
3578: EQUAL
3579: IFFALSE 3589
// hasOilTower := true ;
3581: LD_ADDR_EXP 14
3585: PUSH
3586: LD_INT 1
3588: ST_TO_ADDR
// if btype = b_depot then
3589: LD_VAR 0 3
3593: PUSH
3594: LD_INT 0
3596: EQUAL
3597: IFFALSE 3659
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
3599: LD_VAR 0 1
3603: PPUSH
3604: LD_INT 78
3606: PPUSH
3607: LD_INT 112
3609: PPUSH
3610: CALL_OW 297
3614: PUSH
3615: LD_INT 28
3617: LESS
3618: IFFALSE 3627
3620: PUSH
3621: LD_EXP 12
3625: NOT
3626: AND
3627: IFFALSE 3659
// begin hasKagan := true ;
3629: LD_ADDR_EXP 12
3633: PUSH
3634: LD_INT 1
3636: ST_TO_ADDR
// kaganDepot := b ;
3637: LD_ADDR_EXP 44
3641: PUSH
3642: LD_VAR 0 1
3646: ST_TO_ADDR
// SetBName ( b , kagan ) ;
3647: LD_VAR 0 1
3651: PPUSH
3652: LD_STRING kagan
3654: PPUSH
3655: CALL_OW 500
// end ; end ; if side = 6 then
3659: LD_VAR 0 2
3663: PUSH
3664: LD_INT 6
3666: EQUAL
3667: IFFALSE 3687
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
3669: LD_ADDR_EXP 49
3673: PUSH
3674: LD_EXP 49
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: CALL_OW 3
3686: ST_TO_ADDR
// end ;
3687: PPOPN 3
3689: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
3690: LD_VAR 0 1
3694: PUSH
3695: LD_INT 3
3697: EQUAL
3698: IFFALSE 3710
3700: PUSH
3701: LD_VAR 0 2
3705: PUSH
3706: LD_INT 6
3708: EQUAL
3709: AND
3710: IFFALSE 3720
// allianceAttacked := true ;
3712: LD_ADDR_EXP 9
3716: PUSH
3717: LD_INT 1
3719: ST_TO_ADDR
// end ;
3720: PPOPN 2
3722: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 255
3732: PUSH
3733: LD_INT 6
3735: EQUAL
3736: IFFALSE 3753
3738: PUSH
3739: LD_VAR 0 1
3743: PPUSH
3744: CALL_OW 255
3748: PUSH
3749: LD_INT 3
3751: EQUAL
3752: AND
3753: IFFALSE 3770
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
3755: LD_ADDR_EXP 17
3759: PUSH
3760: LD_EXP 17
3764: PPUSH
3765: CALL 55271 0 1
3769: ST_TO_ADDR
// end ;
3770: PPOPN 2
3772: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
3773: LD_EXP 22
3777: IFFALSE 3781
// exit ;
3779: GO 3898
// if oldSide = 6 then
3781: LD_VAR 0 3
3785: PUSH
3786: LD_INT 6
3788: EQUAL
3789: IFFALSE 3898
// begin ComExit ( driver ) ;
3791: LD_VAR 0 4
3795: PPUSH
3796: CALL 54296 0 1
// SetSide ( newId , 6 ) ;
3800: LD_VAR 0 1
3804: PPUSH
3805: LD_INT 6
3807: PPUSH
3808: CALL_OW 235
// if oldId in kirovVehicles then
3812: LD_VAR 0 2
3816: PUSH
3817: LD_EXP 46
3821: IN
3822: IFFALSE 3862
// begin kirovVehicles := kirovVehicles diff oldId ;
3824: LD_ADDR_EXP 46
3828: PUSH
3829: LD_EXP 46
3833: PUSH
3834: LD_VAR 0 2
3838: DIFF
3839: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
3840: LD_ADDR_EXP 46
3844: PUSH
3845: LD_EXP 46
3849: PPUSH
3850: LD_VAR 0 1
3854: PPUSH
3855: CALL 53898 0 2
3859: ST_TO_ADDR
// end else
3860: GO 3898
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
3862: LD_ADDR_EXP 47
3866: PUSH
3867: LD_EXP 47
3871: PUSH
3872: LD_VAR 0 2
3876: DIFF
3877: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
3878: LD_ADDR_EXP 47
3882: PUSH
3883: LD_EXP 47
3887: PPUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: CALL 53898 0 2
3897: ST_TO_ADDR
// end ; end ; end ;
3898: PPOPN 4
3900: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
3901: LD_INT 0
3903: PPUSH
// begin tag := GetTag ( un ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 110
3918: ST_TO_ADDR
// if tag = tWannaBeMech then
3919: LD_VAR 0 4
3923: PUSH
3924: LD_INT 14
3926: EQUAL
3927: IFFALSE 3941
// SetTag ( un , 0 ) ;
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 109
// end ;
3941: PPOPN 4
3943: END
// on SailEvent ( event ) do begin if event = eventCargo then
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 1
3951: EQUAL
3952: IFFALSE 3958
// SendCargoWithOil ;
3954: CALL 2043 0 0
// if event = eventConvoy then
3958: LD_VAR 0 1
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 3972
// SendConvoy ;
3968: CALL 3114 0 0
// end ; end_of_file
3972: PPOPN 1
3974: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
3975: LD_INT 0
3977: PPUSH
3978: PPUSH
3979: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] ] ) ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_STRING 02_Beria
3987: PPUSH
3988: LD_INT 31
3990: PUSH
3991: LD_INT 3
3993: PUSH
3994: LD_INT 3
3996: PUSH
3997: LD_INT 63
3999: PUSH
4000: LD_INT 86
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 31
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 3
4022: PUSH
4023: LD_INT 74
4025: PUSH
4026: LD_INT 94
4028: PUSH
4029: LD_INT 4
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 31
4042: PUSH
4043: LD_INT 3
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 77
4051: PUSH
4052: LD_INT 103
4054: PUSH
4055: LD_INT 4
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 3
4074: PUSH
4075: LD_INT 66
4077: PUSH
4078: LD_INT 104
4080: PUSH
4081: LD_INT 0
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 0
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: LD_INT 103
4103: PUSH
4104: LD_INT 67
4106: PUSH
4107: LD_INT 4
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 30
4129: ST_TO_ADDR
// uc_side := 3 ;
4130: LD_ADDR_OWVAR 20
4134: PUSH
4135: LD_INT 3
4137: ST_TO_ADDR
// for i in tmp do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: LD_VAR 0 3
4147: PUSH
4148: FOR_IN
4149: IFFALSE 4246
// begin uc_nation := i [ 2 ] ;
4151: LD_ADDR_OWVAR 21
4155: PUSH
4156: LD_VAR 0 2
4160: PUSH
4161: LD_INT 2
4163: ARRAY
4164: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4165: LD_ADDR_OWVAR 42
4169: PUSH
4170: LD_VAR 0 2
4174: PUSH
4175: LD_INT 1
4177: ARRAY
4178: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4179: LD_ADDR_OWVAR 43
4183: PUSH
4184: LD_VAR 0 2
4188: PUSH
4189: LD_INT 3
4191: ARRAY
4192: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4193: LD_ADDR_OWVAR 44
4197: PUSH
4198: LD_INT 9
4200: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4201: LD_ADDR_OWVAR 45
4205: PUSH
4206: LD_INT 9
4208: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 4
4216: ARRAY
4217: PUSH
4218: LD_INT 46
4220: PLUS
4221: PPUSH
4222: LD_VAR 0 2
4226: PUSH
4227: LD_INT 5
4229: ARRAY
4230: PPUSH
4231: LD_VAR 0 2
4235: PUSH
4236: LD_INT 6
4238: ARRAY
4239: PPUSH
4240: CALL_OW 47
// end ;
4244: GO 4148
4246: POP
4247: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
4248: LD_ADDR_VAR 0 3
4252: PUSH
4253: LD_STRING 02_Kirov
4255: PPUSH
4256: LD_INT 31
4258: PUSH
4259: LD_INT 3
4261: PUSH
4262: LD_INT 3
4264: PUSH
4265: LD_INT 98
4267: PUSH
4268: LD_INT 98
4270: PUSH
4271: LD_INT 1
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 6
4284: PUSH
4285: LD_INT 3
4287: PUSH
4288: LD_INT 3
4290: PUSH
4291: LD_INT 107
4293: PUSH
4294: LD_INT 99
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 3
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 117
4319: PUSH
4320: LD_INT 104
4322: PUSH
4323: LD_INT 3
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: LD_INT 3
4339: PUSH
4340: LD_INT 3
4342: PUSH
4343: LD_INT 105
4345: PUSH
4346: LD_INT 108
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: LD_INT 120
4371: PUSH
4372: LD_INT 116
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 3
4394: PUSH
4395: LD_INT 113
4397: PUSH
4398: LD_INT 113
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 26
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 3
4420: PUSH
4421: LD_INT 116
4423: PUSH
4424: LD_INT 98
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PPUSH
4447: CALL_OW 30
4451: ST_TO_ADDR
// uc_side := 6 ;
4452: LD_ADDR_OWVAR 20
4456: PUSH
4457: LD_INT 6
4459: ST_TO_ADDR
// for i in tmp do
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_IN
4471: IFFALSE 4568
// begin uc_nation := i [ 2 ] ;
4473: LD_ADDR_OWVAR 21
4477: PUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 2
4485: ARRAY
4486: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4487: LD_ADDR_OWVAR 42
4491: PUSH
4492: LD_VAR 0 2
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: ST_TO_ADDR
// bc_level := i [ 3 ] ;
4501: LD_ADDR_OWVAR 43
4505: PUSH
4506: LD_VAR 0 2
4510: PUSH
4511: LD_INT 3
4513: ARRAY
4514: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
4515: LD_ADDR_OWVAR 44
4519: PUSH
4520: LD_INT 9
4522: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
4523: LD_ADDR_OWVAR 45
4527: PUSH
4528: LD_INT 9
4530: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
4531: LD_VAR 0 2
4535: PUSH
4536: LD_INT 4
4538: ARRAY
4539: PUSH
4540: LD_INT 46
4542: PLUS
4543: PPUSH
4544: LD_VAR 0 2
4548: PUSH
4549: LD_INT 5
4551: ARRAY
4552: PPUSH
4553: LD_VAR 0 2
4557: PUSH
4558: LD_INT 6
4560: ARRAY
4561: PPUSH
4562: CALL_OW 47
// end ;
4566: GO 4470
4568: POP
4569: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 95
4587: PUSH
4588: LD_INT 3
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PPUSH
4610: CALL_OW 69
4614: ST_TO_ADDR
// if tmp then
4615: LD_VAR 0 3
4619: IFFALSE 4650
// for i in tmp do
4621: LD_ADDR_VAR 0 2
4625: PUSH
4626: LD_VAR 0 3
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4648
// SetSide ( i , 6 ) ;
4634: LD_VAR 0 2
4638: PPUSH
4639: LD_INT 6
4641: PPUSH
4642: CALL_OW 235
4646: GO 4631
4648: POP
4649: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
4650: LD_ADDR_EXP 42
4654: PUSH
4655: LD_INT 163
4657: PPUSH
4658: LD_INT 104
4660: PPUSH
4661: CALL_OW 428
4665: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
4666: LD_ADDR_EXP 43
4670: PUSH
4671: LD_INT 112
4673: PPUSH
4674: LD_INT 104
4676: PPUSH
4677: CALL_OW 428
4681: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
4682: LD_EXP 43
4686: PPUSH
4687: LD_STRING beria
4689: PPUSH
4690: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
4694: LD_EXP 42
4698: PPUSH
4699: LD_STRING kirov
4701: PPUSH
4702: CALL_OW 500
// end ;
4706: LD_VAR 0 1
4710: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
4711: LD_INT 0
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
4721: PPUSH
4722: PPUSH
4723: PPUSH
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
4728: PPUSH
4729: PPUSH
4730: PPUSH
4731: PPUSH
4732: PPUSH
4733: PPUSH
4734: PPUSH
4735: PPUSH
// enable ;
4736: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
4737: LD_ADDR_VAR 0 16
4741: PUSH
4742: LD_INT 81
4744: PUSH
4745: LD_VAR 0 1
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PPUSH
4754: CALL_OW 69
4758: ST_TO_ADDR
// if tmp then
4759: LD_VAR 0 16
4763: IFFALSE 4784
// enemySide := GetSide ( tmp [ 1 ] ) ;
4765: LD_ADDR_VAR 0 36
4769: PUSH
4770: LD_VAR 0 16
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: PPUSH
4779: CALL_OW 255
4783: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
4784: LD_ADDR_VAR 0 29
4788: PUSH
4789: LD_VAR 0 4
4793: PPUSH
4794: LD_INT 81
4796: PUSH
4797: LD_VAR 0 1
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
4811: LD_ADDR_VAR 0 30
4815: PUSH
4816: LD_VAR 0 5
4820: PPUSH
4821: LD_INT 81
4823: PUSH
4824: LD_VAR 0 1
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 70
4837: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4838: LD_ADDR_VAR 0 35
4842: PUSH
4843: LD_VAR 0 2
4847: PPUSH
4848: LD_INT 22
4850: PUSH
4851: LD_VAR 0 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: LD_INT 2
4862: PUSH
4863: LD_INT 30
4865: PUSH
4866: LD_INT 0
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: LD_INT 30
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PPUSH
4892: CALL_OW 70
4896: ST_TO_ADDR
// if depot then
4897: LD_VAR 0 35
4901: IFFALSE 4917
// depot := depot [ 1 ] ;
4903: LD_ADDR_VAR 0 35
4907: PUSH
4908: LD_VAR 0 35
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
4917: LD_ADDR_VAR 0 32
4921: PUSH
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 22
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 3
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 50
4951: PUSH
4952: EMPTY
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 70
4964: ST_TO_ADDR
// if Count ( techs ) then
4965: LD_VAR 0 8
4969: PPUSH
4970: CALL 17922 0 1
4974: IFFALSE 5135
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4976: LD_ADDR_VAR 0 18
4980: PUSH
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_INT 22
4988: PUSH
4989: LD_VAR 0 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 50
5000: PUSH
5001: EMPTY
5002: LIST
5003: PUSH
5004: LD_INT 2
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: LD_INT 7
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 30
5029: PUSH
5030: LD_INT 8
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 70
5052: ST_TO_ADDR
// if lab then
5053: LD_VAR 0 18
5057: IFFALSE 5133
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5059: LD_VAR 0 18
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PPUSH
5068: CALL_OW 461
5072: PUSH
5073: LD_INT 2
5075: EQUAL
5076: IFFALSE 5133
// begin for i in techs do
5078: LD_ADDR_VAR 0 15
5082: PUSH
5083: LD_VAR 0 8
5087: PUSH
5088: FOR_IN
5089: IFFALSE 5131
// if CanBeResearched ( lab [ 1 ] , i ) then
5091: LD_VAR 0 18
5095: PUSH
5096: LD_INT 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 15
5104: PPUSH
5105: CALL_OW 430
5109: IFFALSE 5129
// begin AddComResearch ( lab [ 1 ] , i ) ;
5111: LD_VAR 0 18
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_VAR 0 15
5124: PPUSH
5125: CALL_OW 184
// end ;
5129: GO 5088
5131: POP
5132: POP
// end ; end ; end else
5133: GO 5438
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
5135: LD_VAR 0 32
5139: PPUSH
5140: LD_INT 3
5142: PUSH
5143: LD_INT 62
5145: PUSH
5146: EMPTY
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 72
5157: IFFALSE 5224
5159: PUSH
5160: LD_VAR 0 6
5164: PPUSH
5165: LD_INT 3
5167: PUSH
5168: LD_INT 60
5170: PUSH
5171: EMPTY
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 3
5180: PUSH
5181: LD_INT 120
5183: PUSH
5184: LD_INT 14
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 25
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 72
5214: PPUSH
5215: CALL 17922 0 1
5219: PUSH
5220: LD_INT 2
5222: GREATER
5223: AND
5224: IFFALSE 5438
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
5226: LD_ADDR_VAR 0 16
5230: PUSH
5231: LD_VAR 0 6
5235: PPUSH
5236: LD_INT 3
5238: PUSH
5239: LD_INT 60
5241: PUSH
5242: EMPTY
5243: LIST
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 120
5254: PUSH
5255: LD_INT 14
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 25
5268: PUSH
5269: LD_INT 4
5271: PUSH
5272: EMPTY
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 72
5285: ST_TO_ADDR
// for i := tmp downto 2 do
5286: LD_ADDR_VAR 0 15
5290: PUSH
5291: DOUBLE
5292: LD_VAR 0 16
5296: INC
5297: ST_TO_ADDR
5298: LD_INT 2
5300: PUSH
5301: FOR_DOWNTO
5302: IFFALSE 5436
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
5304: LD_VAR 0 32
5308: PUSH
5309: LD_INT 1
5311: ARRAY
5312: PPUSH
5313: CALL_OW 313
5317: PPUSH
5318: CALL 17922 0 1
5322: PUSH
5323: LD_VAR 0 6
5327: PPUSH
5328: LD_INT 120
5330: PUSH
5331: LD_INT 14
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PPUSH
5338: CALL_OW 72
5342: PPUSH
5343: CALL 17922 0 1
5347: PLUS
5348: PUSH
5349: LD_INT 6
5351: EQUAL
5352: IFFALSE 5356
// break ;
5354: GO 5436
// sci := tmp [ i ] ;
5356: LD_ADDR_VAR 0 24
5360: PUSH
5361: LD_VAR 0 16
5365: PUSH
5366: LD_VAR 0 15
5370: ARRAY
5371: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
5372: LD_VAR 0 24
5376: PPUSH
5377: LD_INT 14
5379: PPUSH
5380: CALL_OW 109
// if IsInUnit ( sci ) then
5384: LD_VAR 0 24
5388: PPUSH
5389: CALL_OW 310
5393: IFFALSE 5404
// ComExitBuilding ( sci ) ;
5395: LD_VAR 0 24
5399: PPUSH
5400: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
5404: LD_VAR 0 24
5408: PPUSH
5409: LD_VAR 0 32
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
5422: LD_VAR 0 24
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 183
// end ;
5434: GO 5301
5436: POP
5437: POP
// end ; if fac then
5438: LD_VAR 0 32
5442: IFFALSE 5757
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
5444: LD_VAR 0 32
5448: PUSH
5449: LD_INT 1
5451: ARRAY
5452: PPUSH
5453: CALL_OW 461
5457: PUSH
5458: LD_INT 2
5460: EQUAL
5461: IFFALSE 5757
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
5463: LD_ADDR_VAR 0 33
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 2
5475: PUSH
5476: LD_INT 30
5478: PUSH
5479: LD_INT 32
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 30
5488: PUSH
5489: LD_INT 33
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 35
5503: PUSH
5504: LD_INT 0
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 70
5519: ST_TO_ADDR
// if emptyTowers then
5520: LD_VAR 0 33
5524: IFFALSE 5574
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
5526: LD_ADDR_VAR 0 34
5530: PUSH
5531: LD_VAR 0 33
5535: PUSH
5536: LD_INT 1
5538: ARRAY
5539: PPUSH
5540: LD_VAR 0 2
5544: PPUSH
5545: CALL 26247 0 2
5549: ST_TO_ADDR
// if weapon then
5550: LD_VAR 0 34
5554: IFFALSE 5574
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
5556: LD_VAR 0 33
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PPUSH
5565: LD_VAR 0 34
5569: PPUSH
5570: CALL_OW 148
// end ; if constructList then
5574: LD_VAR 0 9
5578: IFFALSE 5757
// for i := 1 to Count ( constructList ) do
5580: LD_ADDR_VAR 0 15
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 9
5594: PPUSH
5595: CALL 17922 0 1
5599: PUSH
5600: FOR_TO
5601: IFFALSE 5755
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
5603: LD_VAR 0 32
5607: PUSH
5608: LD_INT 1
5610: ARRAY
5611: PPUSH
5612: LD_VAR 0 9
5616: PUSH
5617: LD_VAR 0 15
5621: ARRAY
5622: PUSH
5623: LD_INT 1
5625: ARRAY
5626: PPUSH
5627: LD_VAR 0 9
5631: PUSH
5632: LD_VAR 0 15
5636: ARRAY
5637: PUSH
5638: LD_INT 2
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 9
5646: PUSH
5647: LD_VAR 0 15
5651: ARRAY
5652: PUSH
5653: LD_INT 3
5655: ARRAY
5656: PPUSH
5657: LD_VAR 0 9
5661: PUSH
5662: LD_VAR 0 15
5666: ARRAY
5667: PUSH
5668: LD_INT 4
5670: ARRAY
5671: PPUSH
5672: CALL_OW 448
5676: IFFALSE 5753
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
5678: LD_VAR 0 32
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: LD_VAR 0 9
5691: PUSH
5692: LD_VAR 0 15
5696: ARRAY
5697: PUSH
5698: LD_INT 1
5700: ARRAY
5701: PPUSH
5702: LD_VAR 0 9
5706: PUSH
5707: LD_VAR 0 15
5711: ARRAY
5712: PUSH
5713: LD_INT 2
5715: ARRAY
5716: PPUSH
5717: LD_VAR 0 9
5721: PUSH
5722: LD_VAR 0 15
5726: ARRAY
5727: PUSH
5728: LD_INT 3
5730: ARRAY
5731: PPUSH
5732: LD_VAR 0 9
5736: PUSH
5737: LD_VAR 0 15
5741: ARRAY
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PPUSH
5747: CALL_OW 125
// break ;
5751: GO 5755
// end ; end ;
5753: GO 5600
5755: POP
5756: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5757: LD_ADDR_VAR 0 16
5761: PUSH
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_INT 22
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 21
5781: PUSH
5782: LD_INT 3
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 3
5791: PUSH
5792: LD_INT 57
5794: PUSH
5795: EMPTY
5796: LIST
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_INT 24
5807: PUSH
5808: LD_INT 1000
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
5830: LD_ADDR_VAR 0 23
5834: PUSH
5835: LD_VAR 0 2
5839: PPUSH
5840: CALL_OW 435
5844: ST_TO_ADDR
// if cratesArea then
5845: LD_VAR 0 3
5849: IFFALSE 5872
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
5851: LD_ADDR_VAR 0 23
5855: PUSH
5856: LD_VAR 0 23
5860: PUSH
5861: LD_VAR 0 3
5865: PPUSH
5866: CALL_OW 435
5870: UNION
5871: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
5872: LD_ADDR_VAR 0 20
5876: PUSH
5877: LD_VAR 0 6
5881: PPUSH
5882: LD_INT 25
5884: PUSH
5885: LD_INT 3
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 50
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PPUSH
5902: CALL_OW 72
5906: ST_TO_ADDR
// if fac then
5907: LD_VAR 0 32
5911: IFFALSE 6032
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
5913: LD_VAR 0 20
5917: PPUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 120
5923: PUSH
5924: LD_INT 7
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: LD_INT 54
5940: PUSH
5941: EMPTY
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 72
5956: IFFALSE 5973
5958: PUSH
5959: LD_VAR 0 32
5963: PUSH
5964: LD_INT 1
5966: ARRAY
5967: PPUSH
5968: CALL_OW 302
5972: AND
5973: IFFALSE 6032
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
5975: LD_VAR 0 20
5979: PPUSH
5980: LD_INT 3
5982: PUSH
5983: LD_INT 120
5985: PUSH
5986: LD_INT 7
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 3
5999: PUSH
6000: LD_INT 54
6002: PUSH
6003: EMPTY
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PPUSH
6014: CALL_OW 72
6018: PPUSH
6019: LD_VAR 0 32
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
6032: LD_ADDR_VAR 0 24
6036: PUSH
6037: LD_VAR 0 6
6041: PPUSH
6042: LD_INT 25
6044: PUSH
6045: LD_INT 4
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 120
6057: PUSH
6058: LD_INT 14
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 50
6071: PUSH
6072: EMPTY
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: PPUSH
6080: CALL_OW 72
6084: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
6085: LD_ADDR_VAR 0 18
6089: PUSH
6090: LD_VAR 0 2
6094: PPUSH
6095: LD_INT 2
6097: PUSH
6098: LD_INT 30
6100: PUSH
6101: LD_INT 6
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 30
6110: PUSH
6111: LD_INT 7
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 30
6120: PUSH
6121: LD_INT 8
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PPUSH
6134: CALL_OW 70
6138: ST_TO_ADDR
// if sci then
6139: LD_VAR 0 24
6143: IFFALSE 6304
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
6145: LD_ADDR_VAR 0 27
6149: PUSH
6150: LD_VAR 0 6
6154: PPUSH
6155: LD_INT 95
6157: PUSH
6158: LD_VAR 0 2
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 120
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 72
6185: ST_TO_ADDR
// if hurtUnits then
6186: LD_VAR 0 27
6190: IFFALSE 6251
// begin for i in sci do
6192: LD_ADDR_VAR 0 15
6196: PUSH
6197: LD_VAR 0 24
6201: PUSH
6202: FOR_IN
6203: IFFALSE 6247
// if IsInUnit ( i ) then
6205: LD_VAR 0 15
6209: PPUSH
6210: CALL_OW 310
6214: IFFALSE 6227
// ComExitBuilding ( i ) else
6216: LD_VAR 0 15
6220: PPUSH
6221: CALL_OW 122
6225: GO 6245
// ComHeal ( i , hurtUnits [ 1 ] ) ;
6227: LD_VAR 0 15
6231: PPUSH
6232: LD_VAR 0 27
6236: PUSH
6237: LD_INT 1
6239: ARRAY
6240: PPUSH
6241: CALL_OW 128
6245: GO 6202
6247: POP
6248: POP
// end else
6249: GO 6304
// if lab then
6251: LD_VAR 0 18
6255: IFFALSE 6304
// begin for i in sci do
6257: LD_ADDR_VAR 0 15
6261: PUSH
6262: LD_VAR 0 24
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6302
// if not IsInUnit ( i ) then
6270: LD_VAR 0 15
6274: PPUSH
6275: CALL_OW 310
6279: NOT
6280: IFFALSE 6300
// ComEnterUnit ( i , lab [ 1 ] ) ;
6282: LD_VAR 0 15
6286: PPUSH
6287: LD_VAR 0 18
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: CALL_OW 120
6300: GO 6267
6302: POP
6303: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
6304: LD_ADDR_VAR 0 19
6308: PUSH
6309: LD_VAR 0 6
6313: PPUSH
6314: LD_INT 25
6316: PUSH
6317: LD_INT 2
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 72
6328: ST_TO_ADDR
// if eng then
6329: LD_VAR 0 19
6333: IFFALSE 7552
// begin for i in eng do
6335: LD_ADDR_VAR 0 15
6339: PUSH
6340: LD_VAR 0 19
6344: PUSH
6345: FOR_IN
6346: IFFALSE 7550
// begin tag := GetTag ( i ) ;
6348: LD_ADDR_VAR 0 21
6352: PUSH
6353: LD_VAR 0 15
6357: PPUSH
6358: CALL_OW 110
6362: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
6363: LD_VAR 0 15
6367: PPUSH
6368: LD_VAR 0 5
6372: PPUSH
6373: CALL_OW 308
6377: IFFALSE 6384
6379: PUSH
6380: LD_INT 2
6382: NOT
6383: AND
6384: IFFALSE 6415
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
6386: LD_VAR 0 15
6390: PPUSH
6391: LD_VAR 0 12
6395: PUSH
6396: LD_INT 1
6398: ARRAY
6399: PPUSH
6400: LD_VAR 0 12
6404: PUSH
6405: LD_INT 2
6407: ARRAY
6408: PPUSH
6409: CALL_OW 111
// continue ;
6413: GO 6345
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
6415: LD_VAR 0 15
6419: PPUSH
6420: CALL_OW 256
6424: PUSH
6425: LD_INT 800
6427: LESS
6428: IFFALSE 6440
6430: PUSH
6431: LD_VAR 0 21
6435: PUSH
6436: LD_INT 1
6438: NONEQUAL
6439: AND
6440: IFFALSE 6490
// begin SetTag ( i , tHeal ) ;
6442: LD_VAR 0 15
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
6454: LD_VAR 0 15
6458: PPUSH
6459: LD_VAR 0 11
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PPUSH
6468: LD_VAR 0 11
6472: PUSH
6473: LD_INT 2
6475: ARRAY
6476: PPUSH
6477: CALL_OW 111
// AddComHold ( i ) ;
6481: LD_VAR 0 15
6485: PPUSH
6486: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
6490: LD_VAR 0 21
6494: PUSH
6495: LD_INT 1
6497: EQUAL
6498: IFFALSE 6515
6500: PUSH
6501: LD_VAR 0 15
6505: PPUSH
6506: CALL_OW 256
6510: PUSH
6511: LD_INT 1000
6513: EQUAL
6514: AND
6515: IFFALSE 6529
// SetTag ( i , 0 ) ;
6517: LD_VAR 0 15
6521: PPUSH
6522: LD_INT 0
6524: PPUSH
6525: CALL_OW 109
// if not tag then
6529: LD_VAR 0 21
6533: NOT
6534: IFFALSE 6705
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
6536: LD_ADDR_VAR 0 17
6540: PUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_INT 57
6548: PUSH
6549: EMPTY
6550: LIST
6551: PPUSH
6552: CALL_OW 70
6556: ST_TO_ADDR
// if undone then
6557: LD_VAR 0 17
6561: IFFALSE 6583
// begin ComComplete ( i , undone [ 1 ] ) ;
6563: LD_VAR 0 15
6567: PPUSH
6568: LD_VAR 0 17
6572: PUSH
6573: LD_INT 1
6575: ARRAY
6576: PPUSH
6577: CALL 24092 0 2
// continue ;
6581: GO 6345
// end ; if cr or tmp or buildingsToBuild then
6583: LD_VAR 0 23
6587: IFTRUE 6595
6589: PUSH
6590: LD_VAR 0 16
6594: OR
6595: IFTRUE 6603
6597: PUSH
6598: LD_VAR 0 10
6602: OR
6603: IFFALSE 6679
// begin if IsInUnit ( i ) then
6605: LD_VAR 0 15
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6625
// ComExitBuilding ( i ) ;
6616: LD_VAR 0 15
6620: PPUSH
6621: CALL_OW 122
// if tmp then
6625: LD_VAR 0 16
6629: IFFALSE 6645
// SetTag ( i , tRepair ) else
6631: LD_VAR 0 15
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 109
6643: GO 6677
// if cr then
6645: LD_VAR 0 23
6649: IFFALSE 6665
// SetTag ( i , tCrates ) else
6651: LD_VAR 0 15
6655: PPUSH
6656: LD_INT 2
6658: PPUSH
6659: CALL_OW 109
6663: GO 6677
// SetTag ( i , tBuild ) ;
6665: LD_VAR 0 15
6669: PPUSH
6670: LD_INT 5
6672: PPUSH
6673: CALL_OW 109
// end else
6677: GO 6705
// if not IsInUnit ( i ) then
6679: LD_VAR 0 15
6683: PPUSH
6684: CALL_OW 310
6688: NOT
6689: IFFALSE 6705
// ComEnterUnit ( i , depot ) ;
6691: LD_VAR 0 15
6695: PPUSH
6696: LD_VAR 0 35
6700: PPUSH
6701: CALL_OW 120
// end ; if tag = tRepair then
6705: LD_VAR 0 21
6709: PUSH
6710: LD_INT 3
6712: EQUAL
6713: IFFALSE 6819
// begin if IsInUnit ( i ) then
6715: LD_VAR 0 15
6719: PPUSH
6720: CALL_OW 310
6724: IFFALSE 6737
// begin ComExitBuilding ( i ) ;
6726: LD_VAR 0 15
6730: PPUSH
6731: CALL_OW 122
// continue ;
6735: GO 6345
// end ; if not tmp then
6737: LD_VAR 0 16
6741: NOT
6742: IFFALSE 6758
// begin SetTag ( i , 0 ) ;
6744: LD_VAR 0 15
6748: PPUSH
6749: LD_INT 0
6751: PPUSH
6752: CALL_OW 109
// continue ;
6756: GO 6345
// end ; if not HasTask ( i ) then
6758: LD_VAR 0 15
6762: PPUSH
6763: CALL_OW 314
6767: NOT
6768: IFFALSE 6788
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
6770: LD_VAR 0 15
6774: PPUSH
6775: LD_VAR 0 16
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: CALL_OW 130
// if not IsInarea ( i , area ) then
6788: LD_VAR 0 15
6792: PPUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: CALL_OW 308
6802: NOT
6803: IFFALSE 6819
// ComMoveToArea ( i , area ) ;
6805: LD_VAR 0 15
6809: PPUSH
6810: LD_VAR 0 2
6814: PPUSH
6815: CALL_OW 113
// end ; if tag = tBuild then
6819: LD_VAR 0 21
6823: PUSH
6824: LD_INT 5
6826: EQUAL
6827: IFFALSE 7401
// begin if IsInUnit ( i ) then
6829: LD_VAR 0 15
6833: PPUSH
6834: CALL_OW 310
6838: IFFALSE 6851
// begin ComExitBuilding ( i ) ;
6840: LD_VAR 0 15
6844: PPUSH
6845: CALL_OW 122
// continue ;
6849: GO 6345
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
6851: LD_VAR 0 10
6855: NOT
6856: IFTRUE 6864
6858: PUSH
6859: LD_VAR 0 29
6863: OR
6864: IFTRUE 6872
6866: PUSH
6867: LD_VAR 0 30
6871: OR
6872: IFFALSE 6890
// begin SetTag ( i , 0 ) ;
6874: LD_VAR 0 15
6878: PPUSH
6879: LD_INT 0
6881: PPUSH
6882: CALL_OW 109
// continue ;
6886: GO 6345
// end else
6888: GO 6929
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
6890: LD_VAR 0 35
6894: PPUSH
6895: LD_VAR 0 10
6899: PUSH
6900: LD_INT 1
6902: ARRAY
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: PPUSH
6908: CALL 57993 0 2
6912: NOT
6913: IFFALSE 6929
// begin SetTag ( i , 0 ) ;
6915: LD_VAR 0 15
6919: PPUSH
6920: LD_INT 0
6922: PPUSH
6923: CALL_OW 109
// continue ;
6927: GO 6345
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
6929: LD_ADDR_VAR 0 17
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: LD_INT 57
6941: PUSH
6942: EMPTY
6943: LIST
6944: PPUSH
6945: CALL_OW 70
6949: ST_TO_ADDR
// if undone then
6950: LD_VAR 0 17
6954: IFFALSE 6976
// begin ComComplete ( i , undone [ 1 ] ) ;
6956: LD_VAR 0 15
6960: PPUSH
6961: LD_VAR 0 17
6965: PUSH
6966: LD_INT 1
6968: ARRAY
6969: PPUSH
6970: CALL 24092 0 2
// continue ;
6974: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks ] then
6976: LD_VAR 0 10
6980: PUSH
6981: LD_INT 1
6983: ARRAY
6984: PUSH
6985: LD_INT 1
6987: ARRAY
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: LD_INT 5
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: IN
6999: IFFALSE 7096
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7001: LD_VAR 0 10
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PUSH
7010: LD_INT 2
7012: ARRAY
7013: PPUSH
7014: LD_VAR 0 10
7018: PUSH
7019: LD_INT 1
7021: ARRAY
7022: PUSH
7023: LD_INT 3
7025: ARRAY
7026: PPUSH
7027: CALL_OW 428
7031: IFFALSE 7057
7033: PUSH
7034: LD_VAR 0 35
7038: PPUSH
7039: LD_VAR 0 10
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PUSH
7048: LD_INT 1
7050: ARRAY
7051: PPUSH
7052: CALL 57993 0 2
7056: AND
7057: IFFALSE 7094
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7059: LD_VAR 0 10
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PUSH
7068: LD_INT 2
7070: ARRAY
7071: PPUSH
7072: LD_VAR 0 10
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PUSH
7081: LD_INT 3
7083: ARRAY
7084: PPUSH
7085: CALL_OW 428
7089: PPUSH
7090: CALL_OW 146
// end ; continue ;
7094: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
7096: LD_VAR 0 10
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PUSH
7109: LD_INT 7
7111: PUSH
7112: LD_INT 8
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: IN
7119: IFFALSE 7229
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7121: LD_VAR 0 10
7125: PUSH
7126: LD_INT 1
7128: ARRAY
7129: PUSH
7130: LD_INT 2
7132: ARRAY
7133: PPUSH
7134: LD_VAR 0 10
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PUSH
7143: LD_INT 3
7145: ARRAY
7146: PPUSH
7147: CALL_OW 428
7151: IFFALSE 7177
7153: PUSH
7154: LD_VAR 0 35
7158: PPUSH
7159: LD_VAR 0 10
7163: PUSH
7164: LD_INT 1
7166: ARRAY
7167: PUSH
7168: LD_INT 1
7170: ARRAY
7171: PPUSH
7172: CALL 57993 0 2
7176: AND
7177: IFFALSE 7227
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
7179: LD_VAR 0 10
7183: PUSH
7184: LD_INT 1
7186: ARRAY
7187: PUSH
7188: LD_INT 2
7190: ARRAY
7191: PPUSH
7192: LD_VAR 0 10
7196: PUSH
7197: LD_INT 1
7199: ARRAY
7200: PUSH
7201: LD_INT 3
7203: ARRAY
7204: PPUSH
7205: CALL_OW 428
7209: PPUSH
7210: LD_VAR 0 10
7214: PUSH
7215: LD_INT 1
7217: ARRAY
7218: PUSH
7219: LD_INT 5
7221: ARRAY
7222: PPUSH
7223: CALL_OW 147
// end ; continue ;
7227: GO 6345
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
7229: LD_VAR 0 10
7233: PUSH
7234: LD_INT 1
7236: ARRAY
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PUSH
7242: LD_INT 32
7244: PUSH
7245: LD_INT 33
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: IN
7252: IFFALSE 7328
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
7254: LD_VAR 0 10
7258: PUSH
7259: LD_INT 1
7261: ARRAY
7262: PUSH
7263: LD_INT 2
7265: ARRAY
7266: PPUSH
7267: LD_VAR 0 10
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: PUSH
7276: LD_INT 3
7278: ARRAY
7279: PPUSH
7280: CALL_OW 428
7284: IFFALSE 7328
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
7286: LD_VAR 0 15
7290: PPUSH
7291: LD_VAR 0 10
7295: PUSH
7296: LD_INT 1
7298: ARRAY
7299: PUSH
7300: LD_INT 2
7302: ARRAY
7303: PPUSH
7304: LD_VAR 0 10
7308: PUSH
7309: LD_INT 1
7311: ARRAY
7312: PUSH
7313: LD_INT 3
7315: ARRAY
7316: PPUSH
7317: CALL_OW 428
7321: PPUSH
7322: CALL_OW 167
// continue ;
7326: GO 6345
// end ; end ; if not HasTask ( i ) then
7328: LD_VAR 0 15
7332: PPUSH
7333: CALL_OW 314
7337: NOT
7338: IFFALSE 7401
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7340: LD_VAR 0 15
7344: PPUSH
7345: LD_VAR 0 10
7349: PUSH
7350: LD_INT 1
7352: ARRAY
7353: PUSH
7354: LD_INT 1
7356: ARRAY
7357: PPUSH
7358: LD_VAR 0 10
7362: PUSH
7363: LD_INT 1
7365: ARRAY
7366: PUSH
7367: LD_INT 2
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 10
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PUSH
7380: LD_INT 3
7382: ARRAY
7383: PPUSH
7384: LD_VAR 0 10
7388: PUSH
7389: LD_INT 1
7391: ARRAY
7392: PUSH
7393: LD_INT 4
7395: ARRAY
7396: PPUSH
7397: CALL_OW 145
// end ; if tag = tCrates then
7401: LD_VAR 0 21
7405: PUSH
7406: LD_INT 2
7408: EQUAL
7409: IFFALSE 7548
// begin if IsInUnit ( i ) then
7411: LD_VAR 0 15
7415: PPUSH
7416: CALL_OW 310
7420: IFFALSE 7433
// begin ComExitBuilding ( i ) ;
7422: LD_VAR 0 15
7426: PPUSH
7427: CALL_OW 122
// continue ;
7431: GO 6345
// end ; if not cr then
7433: LD_VAR 0 23
7437: NOT
7438: IFFALSE 7454
// begin SetTag ( i , 0 ) ;
7440: LD_VAR 0 15
7444: PPUSH
7445: LD_INT 0
7447: PPUSH
7448: CALL_OW 109
// continue ;
7452: GO 6345
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
7454: LD_VAR 0 15
7458: PPUSH
7459: CALL_OW 314
7463: NOT
7464: IFFALSE 7519
7466: PUSH
7467: LD_INT 81
7469: PUSH
7470: LD_VAR 0 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 92
7481: PUSH
7482: LD_VAR 0 23
7486: PUSH
7487: LD_INT 1
7489: ARRAY
7490: PUSH
7491: LD_VAR 0 23
7495: PUSH
7496: LD_INT 2
7498: ARRAY
7499: PUSH
7500: LD_INT 12
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: NOT
7518: AND
7519: IFFALSE 7548
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
7521: LD_VAR 0 15
7525: PPUSH
7526: LD_VAR 0 23
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PPUSH
7535: LD_VAR 0 23
7539: PUSH
7540: LD_INT 2
7542: ARRAY
7543: PPUSH
7544: CALL_OW 117
// end ; end ;
7548: GO 6345
7550: POP
7551: POP
// end ; if vehicles then
7552: LD_VAR 0 7
7556: IFFALSE 8618
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
7558: LD_ADDR_VAR 0 7
7562: PUSH
7563: LD_VAR 0 7
7567: PPUSH
7568: LD_INT 3
7570: PUSH
7571: LD_INT 2
7573: PUSH
7574: LD_INT 34
7576: PUSH
7577: LD_INT 52
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_INT 51
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 34
7596: PUSH
7597: LD_INT 13
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 34
7606: PUSH
7607: LD_INT 12
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 50
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 72
7639: ST_TO_ADDR
// if vehicles then
7640: LD_VAR 0 7
7644: IFFALSE 8618
// begin for i in vehicles do
7646: LD_ADDR_VAR 0 15
7650: PUSH
7651: LD_VAR 0 7
7655: PUSH
7656: FOR_IN
7657: IFFALSE 8616
// begin tag := GetTag ( i ) ;
7659: LD_ADDR_VAR 0 21
7663: PUSH
7664: LD_VAR 0 15
7668: PPUSH
7669: CALL_OW 110
7673: ST_TO_ADDR
// if not tag then
7674: LD_VAR 0 21
7678: NOT
7679: IFFALSE 7816
// begin if GetControl ( i ) = control_manual then
7681: LD_VAR 0 15
7685: PPUSH
7686: CALL_OW 263
7690: PUSH
7691: LD_INT 1
7693: EQUAL
7694: IFFALSE 7802
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7696: LD_ADDR_VAR 0 26
7700: PUSH
7701: LD_VAR 0 20
7705: PPUSH
7706: LD_INT 120
7708: PUSH
7709: LD_INT 7
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PPUSH
7716: CALL_OW 72
7720: ST_TO_ADDR
// if not drivers then
7721: LD_VAR 0 26
7725: NOT
7726: IFFALSE 7782
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
7728: LD_ADDR_VAR 0 26
7732: PUSH
7733: LD_VAR 0 20
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 120
7743: PUSH
7744: LD_INT 7
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: ST_TO_ADDR
// if drivers then
7760: LD_VAR 0 26
7764: IFFALSE 7782
// begin SetTag ( drivers [ 1 ] , tMech ) ;
7766: LD_VAR 0 26
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PPUSH
7775: LD_INT 7
7777: PPUSH
7778: CALL_OW 109
// end ; end ; if drivers then
7782: LD_VAR 0 26
7786: IFFALSE 7800
// SetTag ( i , tBusy ) ;
7788: LD_VAR 0 15
7792: PPUSH
7793: LD_INT 8
7795: PPUSH
7796: CALL_OW 109
// continue ;
7800: GO 7656
// end ; SetTag ( i , tBusy ) ;
7802: LD_VAR 0 15
7806: PPUSH
7807: LD_INT 8
7809: PPUSH
7810: CALL_OW 109
// end else
7814: GO 8614
// if tag = tBusy then
7816: LD_VAR 0 21
7820: PUSH
7821: LD_INT 8
7823: EQUAL
7824: IFFALSE 8079
// begin if GetLives ( i ) = 1000 then
7826: LD_VAR 0 15
7830: PPUSH
7831: CALL_OW 256
7835: PUSH
7836: LD_INT 1000
7838: EQUAL
7839: IFFALSE 8077
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
7841: LD_VAR 0 15
7845: PPUSH
7846: CALL_OW 263
7850: PUSH
7851: LD_INT 1
7853: EQUAL
7854: IFFALSE 7868
7856: PUSH
7857: LD_VAR 0 15
7861: PPUSH
7862: CALL_OW 311
7866: NOT
7867: AND
7868: IFFALSE 8045
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
7870: LD_ADDR_VAR 0 26
7874: PUSH
7875: LD_VAR 0 20
7879: PPUSH
7880: LD_INT 120
7882: PUSH
7883: LD_INT 7
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 72
7894: ST_TO_ADDR
// if not drivers then
7895: LD_VAR 0 26
7899: NOT
7900: IFFALSE 7916
// begin SetTag ( i , 0 ) ;
7902: LD_VAR 0 15
7906: PPUSH
7907: LD_INT 0
7909: PPUSH
7910: CALL_OW 109
// continue ;
7914: GO 7656
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
7916: LD_VAR 0 26
7920: PUSH
7921: LD_INT 1
7923: ARRAY
7924: PPUSH
7925: CALL_OW 310
7929: IFFALSE 7947
7931: PUSH
7932: LD_VAR 0 26
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: CALL 51478 0 1
7945: NOT
7946: AND
7947: IFFALSE 7962
// ComExitBuilding ( drivers [ 1 ] ) ;
7949: LD_VAR 0 26
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
7962: LD_VAR 0 7
7966: PPUSH
7967: LD_INT 120
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PPUSH
7977: CALL_OW 72
7981: IFFALSE 7999
7983: PUSH
7984: LD_VAR 0 26
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: CALL_OW 314
7997: NOT
7998: AND
7999: IFTRUE 8023
8001: PUSH
8002: LD_VAR 0 7
8006: PPUSH
8007: LD_INT 120
8009: PUSH
8010: LD_INT 3
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PPUSH
8017: CALL_OW 72
8021: NOT
8022: OR
8023: IFFALSE 8043
// ComEnterUnit ( drivers [ 1 ] , i ) ;
8025: LD_VAR 0 26
8029: PUSH
8030: LD_INT 1
8032: ARRAY
8033: PPUSH
8034: LD_VAR 0 15
8038: PPUSH
8039: CALL_OW 120
// continue ;
8043: GO 7656
// end ; if allowToPatrol then
8045: LD_VAR 0 13
8049: IFFALSE 8065
// SetTag ( i , tPatrol ) else
8051: LD_VAR 0 15
8055: PPUSH
8056: LD_INT 15
8058: PPUSH
8059: CALL_OW 109
8063: GO 8077
// SetTag ( i , tAttack ) ;
8065: LD_VAR 0 15
8069: PPUSH
8070: LD_INT 13
8072: PPUSH
8073: CALL_OW 109
// end ; end else
8077: GO 8614
// if tag = tPatrol then
8079: LD_VAR 0 21
8083: PUSH
8084: LD_INT 15
8086: EQUAL
8087: IFFALSE 8281
// begin if GetLives ( i ) < 650 then
8089: LD_VAR 0 15
8093: PPUSH
8094: CALL_OW 256
8098: PUSH
8099: LD_INT 650
8101: LESS
8102: IFFALSE 8145
// begin SetTag ( i , tVehRepair ) ;
8104: LD_VAR 0 15
8108: PPUSH
8109: LD_INT 9
8111: PPUSH
8112: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8116: LD_VAR 0 15
8120: PPUSH
8121: LD_VAR 0 12
8125: PUSH
8126: LD_INT 1
8128: ARRAY
8129: PPUSH
8130: LD_VAR 0 12
8134: PUSH
8135: LD_INT 2
8137: ARRAY
8138: PPUSH
8139: CALL_OW 111
// continue ;
8143: GO 7656
// end ; if GetEngine ( i ) = engine_combustion then
8145: LD_VAR 0 15
8149: PPUSH
8150: CALL_OW 262
8154: PUSH
8155: LD_INT 1
8157: EQUAL
8158: IFFALSE 8205
// if GetFuel ( i ) < 30 then
8160: LD_VAR 0 15
8164: PPUSH
8165: CALL_OW 261
8169: PUSH
8170: LD_INT 30
8172: LESS
8173: IFFALSE 8205
// begin ComMoveUnit ( i , depot ) ;
8175: LD_VAR 0 15
8179: PPUSH
8180: LD_VAR 0 35
8184: PPUSH
8185: CALL_OW 112
// AddComRefuel ( i , depot ) ;
8189: LD_VAR 0 15
8193: PPUSH
8194: LD_VAR 0 35
8198: PPUSH
8199: CALL_OW 210
// continue ;
8203: GO 7656
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
8205: LD_VAR 0 15
8209: PPUSH
8210: LD_VAR 0 13
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_VAR 0 13
8223: PUSH
8224: LD_INT 2
8226: ARRAY
8227: PPUSH
8228: CALL_OW 297
8232: PUSH
8233: LD_INT 12
8235: GREATER
8236: IFFALSE 8250
8238: PUSH
8239: LD_VAR 0 15
8243: PPUSH
8244: CALL_OW 314
8248: NOT
8249: AND
8250: IFFALSE 8279
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
8252: LD_VAR 0 15
8256: PPUSH
8257: LD_VAR 0 13
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 13
8270: PUSH
8271: LD_INT 2
8273: ARRAY
8274: PPUSH
8275: CALL_OW 114
// end else
8279: GO 8614
// if tag = tAttack then
8281: LD_VAR 0 21
8285: PUSH
8286: LD_INT 13
8288: EQUAL
8289: IFFALSE 8471
// begin enemy := enemyInBase ;
8291: LD_ADDR_VAR 0 28
8295: PUSH
8296: LD_VAR 0 29
8300: ST_TO_ADDR
// if not enemy then
8301: LD_VAR 0 28
8305: NOT
8306: IFFALSE 8318
// enemy := enemyOuterBase ;
8308: LD_ADDR_VAR 0 28
8312: PUSH
8313: LD_VAR 0 30
8317: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8318: LD_VAR 0 28
8322: NOT
8323: IFFALSE 8358
8325: PUSH
8326: LD_VAR 0 15
8330: PPUSH
8331: LD_VAR 0 12
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_VAR 0 12
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PPUSH
8349: CALL_OW 297
8353: PUSH
8354: LD_INT 10
8356: GREATER
8357: AND
8358: IFFALSE 8389
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8360: LD_VAR 0 15
8364: PPUSH
8365: LD_VAR 0 12
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_VAR 0 12
8378: PUSH
8379: LD_INT 2
8381: ARRAY
8382: PPUSH
8383: CALL_OW 111
// continue ;
8387: GO 7656
// end ; if GetLives ( i ) < 650 then
8389: LD_VAR 0 15
8393: PPUSH
8394: CALL_OW 256
8398: PUSH
8399: LD_INT 650
8401: LESS
8402: IFFALSE 8445
// begin SetTag ( i , tVehRepair ) ;
8404: LD_VAR 0 15
8408: PPUSH
8409: LD_INT 9
8411: PPUSH
8412: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8416: LD_VAR 0 15
8420: PPUSH
8421: LD_VAR 0 12
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 12
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: CALL_OW 111
// continue ;
8443: GO 7656
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8445: LD_VAR 0 15
8449: PPUSH
8450: LD_VAR 0 28
8454: PPUSH
8455: LD_VAR 0 15
8459: PPUSH
8460: CALL_OW 74
8464: PPUSH
8465: CALL_OW 115
// end else
8469: GO 8614
// if tag = tVehRepair then
8471: LD_VAR 0 21
8475: PUSH
8476: LD_INT 9
8478: EQUAL
8479: IFFALSE 8614
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8481: LD_VAR 0 15
8485: PPUSH
8486: LD_VAR 0 12
8490: PUSH
8491: LD_INT 1
8493: ARRAY
8494: PPUSH
8495: LD_VAR 0 12
8499: PUSH
8500: LD_INT 2
8502: ARRAY
8503: PPUSH
8504: CALL_OW 297
8508: PUSH
8509: LD_INT 10
8511: GREATER
8512: IFFALSE 8543
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8514: LD_VAR 0 15
8518: PPUSH
8519: LD_VAR 0 12
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: PPUSH
8528: LD_VAR 0 12
8532: PUSH
8533: LD_INT 2
8535: ARRAY
8536: PPUSH
8537: CALL_OW 111
// continue ;
8541: GO 7656
// end ; if GetLives ( i ) = 1000 then
8543: LD_VAR 0 15
8547: PPUSH
8548: CALL_OW 256
8552: PUSH
8553: LD_INT 1000
8555: EQUAL
8556: IFFALSE 8572
// begin SetTag ( i , tBusy ) ;
8558: LD_VAR 0 15
8562: PPUSH
8563: LD_INT 8
8565: PPUSH
8566: CALL_OW 109
// continue ;
8570: GO 7656
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8572: LD_VAR 0 15
8576: PPUSH
8577: CALL_OW 263
8581: PUSH
8582: LD_INT 1
8584: EQUAL
8585: IFFALSE 8598
8587: PUSH
8588: LD_VAR 0 15
8592: PPUSH
8593: CALL_OW 311
8597: AND
8598: IFFALSE 8614
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8600: LD_VAR 0 15
8604: PPUSH
8605: CALL_OW 311
8609: PPUSH
8610: CALL 55612 0 1
// end ; end ;
8614: GO 7656
8616: POP
8617: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8618: LD_ADDR_VAR 0 25
8622: PUSH
8623: LD_VAR 0 6
8627: PPUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 25
8633: PUSH
8634: LD_INT 1
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 8
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 25
8653: PUSH
8654: LD_INT 5
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 9
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 50
8680: PUSH
8681: EMPTY
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 72
8692: ST_TO_ADDR
// if sol then
8693: LD_VAR 0 25
8697: IFFALSE 9509
// begin if enemyInBase then
8699: LD_VAR 0 29
8703: IFFALSE 8882
// begin for i in sol do
8705: LD_ADDR_VAR 0 15
8709: PUSH
8710: LD_VAR 0 25
8714: PUSH
8715: FOR_IN
8716: IFFALSE 8878
// begin tw := IsInUnit ( i ) ;
8718: LD_ADDR_VAR 0 22
8722: PUSH
8723: LD_VAR 0 15
8727: PPUSH
8728: CALL_OW 310
8732: ST_TO_ADDR
// if tw then
8733: LD_VAR 0 22
8737: IFFALSE 8820
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8739: LD_VAR 0 22
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_VAR 0 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 101
8758: PUSH
8759: LD_VAR 0 36
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: LD_INT 30
8773: PUSH
8774: LD_INT 32
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 30
8783: PUSH
8784: LD_INT 31
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 69
8805: IN
8806: NOT
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 15
8813: PPUSH
8814: CALL_OW 122
// end else
8818: GO 8876
// if IsInarea ( i , area ) then
8820: LD_VAR 0 15
8824: PPUSH
8825: LD_VAR 0 2
8829: PPUSH
8830: CALL_OW 308
8834: IFFALSE 8862
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
8836: LD_VAR 0 15
8840: PPUSH
8841: LD_VAR 0 29
8845: PPUSH
8846: LD_VAR 0 15
8850: PPUSH
8851: CALL_OW 74
8855: PPUSH
8856: CALL_OW 115
8860: GO 8876
// ComMoveToArea ( i , area ) ;
8862: LD_VAR 0 15
8866: PPUSH
8867: LD_VAR 0 2
8871: PPUSH
8872: CALL_OW 113
// end ;
8876: GO 8715
8878: POP
8879: POP
// end else
8880: GO 9509
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8882: LD_ADDR_VAR 0 31
8886: PUSH
8887: LD_VAR 0 2
8891: PPUSH
8892: LD_INT 3
8894: PUSH
8895: LD_INT 62
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: LD_INT 57
8910: PUSH
8911: EMPTY
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: LD_INT 30
8923: PUSH
8924: LD_INT 32
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 30
8933: PUSH
8934: LD_INT 4
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 30
8943: PUSH
8944: LD_INT 5
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 30
8953: PUSH
8954: LD_INT 31
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 70
8977: ST_TO_ADDR
// emptyTowers := [ ] ;
8978: LD_ADDR_VAR 0 33
8982: PUSH
8983: EMPTY
8984: ST_TO_ADDR
// if empty then
8985: LD_VAR 0 31
8989: IFFALSE 9055
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8991: LD_ADDR_VAR 0 33
8995: PUSH
8996: LD_VAR 0 31
9000: PPUSH
9001: LD_INT 3
9003: PUSH
9004: LD_INT 120
9006: PUSH
9007: LD_INT 10
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 30
9023: PUSH
9024: LD_INT 32
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 33
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 72
9054: ST_TO_ADDR
// for i in sol do
9055: LD_ADDR_VAR 0 15
9059: PUSH
9060: LD_VAR 0 25
9064: PUSH
9065: FOR_IN
9066: IFFALSE 9507
// begin tag := GetTag ( i ) ;
9068: LD_ADDR_VAR 0 21
9072: PUSH
9073: LD_VAR 0 15
9077: PPUSH
9078: CALL_OW 110
9082: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9083: LD_VAR 0 15
9087: PPUSH
9088: CALL_OW 256
9092: PUSH
9093: LD_INT 1000
9095: LESS
9096: IFFALSE 9108
9098: PUSH
9099: LD_VAR 0 21
9103: PUSH
9104: LD_INT 1
9106: NONEQUAL
9107: AND
9108: IFFALSE 9160
// begin SetTag ( i , tHeal ) ;
9110: LD_VAR 0 15
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9122: LD_VAR 0 15
9126: PPUSH
9127: LD_VAR 0 11
9131: PUSH
9132: LD_INT 1
9134: ARRAY
9135: PPUSH
9136: LD_VAR 0 11
9140: PUSH
9141: LD_INT 2
9143: ARRAY
9144: PPUSH
9145: CALL_OW 111
// AddComHold ( i ) ;
9149: LD_VAR 0 15
9153: PPUSH
9154: CALL_OW 200
// continue ;
9158: GO 9065
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9160: LD_VAR 0 15
9164: PPUSH
9165: CALL_OW 256
9169: PUSH
9170: LD_INT 1000
9172: EQUAL
9173: IFFALSE 9185
9175: PUSH
9176: LD_VAR 0 21
9180: PUSH
9181: LD_INT 1
9183: EQUAL
9184: AND
9185: IFFALSE 9201
// begin SetTag ( i , 0 ) ;
9187: LD_VAR 0 15
9191: PPUSH
9192: LD_INT 0
9194: PPUSH
9195: CALL_OW 109
// continue ;
9199: GO 9065
// end ; if HasTask ( i ) then
9201: LD_VAR 0 15
9205: PPUSH
9206: CALL_OW 314
9210: IFFALSE 9214
// continue ;
9212: GO 9065
// if not IsInUnit ( i ) and not tag and empty then
9214: LD_VAR 0 15
9218: PPUSH
9219: CALL_OW 310
9223: NOT
9224: IFFALSE 9233
9226: PUSH
9227: LD_VAR 0 21
9231: NOT
9232: AND
9233: IFFALSE 9241
9235: PUSH
9236: LD_VAR 0 31
9240: AND
9241: IFFALSE 9281
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9243: LD_VAR 0 15
9247: PPUSH
9248: LD_VAR 0 31
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9261: LD_ADDR_VAR 0 31
9265: PUSH
9266: LD_VAR 0 31
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 3
9278: ST_TO_ADDR
// continue ;
9279: GO 9065
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
9281: LD_VAR 0 15
9285: PPUSH
9286: CALL_OW 310
9290: IFFALSE 9299
9292: PUSH
9293: LD_VAR 0 21
9297: NOT
9298: AND
9299: IFFALSE 9307
9301: PUSH
9302: LD_VAR 0 33
9306: AND
9307: IFFALSE 9505
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
9309: LD_VAR 0 15
9313: PPUSH
9314: CALL_OW 310
9318: PPUSH
9319: CALL_OW 266
9323: PUSH
9324: LD_INT 32
9326: PUSH
9327: LD_INT 31
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: IN
9334: IFFALSE 9338
// continue ;
9336: GO 9065
// SetTag ( i , tTower ) ;
9338: LD_VAR 0 15
9342: PPUSH
9343: LD_INT 10
9345: PPUSH
9346: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
9350: LD_VAR 0 33
9354: PUSH
9355: LD_INT 1
9357: ARRAY
9358: PPUSH
9359: LD_INT 10
9361: PPUSH
9362: CALL_OW 109
// ComExit ( i ) ;
9366: LD_VAR 0 15
9370: PPUSH
9371: CALL 54296 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9375: LD_VAR 0 15
9379: PPUSH
9380: LD_VAR 0 33
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
9393: LD_INT 35
9395: PPUSH
9396: CALL_OW 67
// if not HasTask ( i ) then
9400: LD_VAR 0 15
9404: PPUSH
9405: CALL_OW 314
9409: NOT
9410: IFFALSE 9430
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
9412: LD_VAR 0 15
9416: PPUSH
9417: LD_VAR 0 33
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: PPUSH
9426: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
9430: LD_VAR 0 33
9434: PUSH
9435: LD_INT 1
9437: ARRAY
9438: PPUSH
9439: CALL 17944 0 1
9443: NOT
9444: IFFALSE 9448
// break ;
9446: GO 9473
// until IsInUnit ( i ) or not IsOk ( i ) ;
9448: LD_VAR 0 15
9452: PPUSH
9453: CALL_OW 310
9457: IFTRUE 9471
9459: PUSH
9460: LD_VAR 0 15
9464: PPUSH
9465: CALL_OW 302
9469: NOT
9470: OR
9471: IFFALSE 9393
// SetTag ( i , 0 ) ;
9473: LD_VAR 0 15
9477: PPUSH
9478: LD_INT 0
9480: PPUSH
9481: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
9485: LD_VAR 0 33
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: LD_INT 0
9496: PPUSH
9497: CALL_OW 109
// exit ;
9501: POP
9502: POP
9503: GO 9509
// end ; end ;
9505: GO 9065
9507: POP
9508: POP
// end ; end ; end ; end_of_file
9509: LD_VAR 0 14
9513: RET
// export function Action ; var i , c , tmp ; begin
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
// InGameOn ;
9520: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
9524: LD_INT 3
9526: PPUSH
9527: LD_INT 5
9529: PPUSH
9530: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
9534: LD_EXP 30
9538: PPUSH
9539: LD_EXP 42
9543: PPUSH
9544: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
9548: LD_EXP 26
9552: PPUSH
9553: LD_EXP 42
9557: PPUSH
9558: CALL_OW 52
// if Belkov then
9562: LD_EXP 28
9566: IFFALSE 9582
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
9568: LD_EXP 28
9572: PPUSH
9573: LD_EXP 42
9577: PPUSH
9578: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
9582: LD_EXP 32
9586: PPUSH
9587: LD_EXP 42
9591: PPUSH
9592: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
9596: LD_INT 159
9598: PPUSH
9599: LD_INT 103
9601: PPUSH
9602: CALL_OW 86
// wait ( 0 0$0.3 ) ;
9606: LD_INT 10
9608: PPUSH
9609: CALL_OW 67
// if not Belkov then
9613: LD_EXP 28
9617: NOT
9618: IFFALSE 9715
// begin Say ( Kurin , D1a-Kur-1 ) ;
9620: LD_EXP 30
9624: PPUSH
9625: LD_STRING D1a-Kur-1
9627: PPUSH
9628: CALL_OW 88
// if not belkovSaved then
9632: LD_EXP 6
9636: NOT
9637: IFFALSE 9663
// begin Say ( Burlak , D1a-Bur-1 ) ;
9639: LD_EXP 26
9643: PPUSH
9644: LD_STRING D1a-Bur-1
9646: PPUSH
9647: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
9651: LD_EXP 30
9655: PPUSH
9656: LD_STRING D1a-Kur-2
9658: PPUSH
9659: CALL_OW 88
// end ; if wasSelfish then
9663: LD_EXP 4
9667: IFFALSE 9681
// Say ( Kurin , D1a-Kur-2a ) ;
9669: LD_EXP 30
9673: PPUSH
9674: LD_STRING D1a-Kur-2a
9676: PPUSH
9677: CALL_OW 88
// hasProblem := true ;
9681: LD_ADDR_EXP 5
9685: PUSH
9686: LD_INT 1
9688: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
9689: LD_EXP 30
9693: PPUSH
9694: LD_STRING D1a-Kur-2b
9696: PPUSH
9697: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
9701: LD_EXP 26
9705: PPUSH
9706: LD_STRING D1a-Bur-2
9708: PPUSH
9709: CALL_OW 88
// end else
9713: GO 9751
// begin Say ( Kurin , D1b-Kur-1 ) ;
9715: LD_EXP 30
9719: PPUSH
9720: LD_STRING D1b-Kur-1
9722: PPUSH
9723: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
9727: LD_EXP 28
9731: PPUSH
9732: LD_STRING D1b-Bel-1
9734: PPUSH
9735: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
9739: LD_EXP 30
9743: PPUSH
9744: LD_STRING D1b-Kur-2
9746: PPUSH
9747: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
9751: LD_EXP 30
9755: PPUSH
9756: LD_STRING D2-Kur-1
9758: PPUSH
9759: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
9763: LD_EXP 26
9767: PPUSH
9768: LD_STRING D2-Bur-1
9770: PPUSH
9771: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
9775: LD_EXP 30
9779: PPUSH
9780: LD_STRING D2-Kur-2
9782: PPUSH
9783: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
9787: LD_EXP 26
9791: PPUSH
9792: LD_STRING D2-Bur-2
9794: PPUSH
9795: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
9799: LD_EXP 30
9803: PPUSH
9804: LD_STRING D2-Kur-3
9806: PPUSH
9807: CALL_OW 88
// wait ( 0 0$0.5 ) ;
9811: LD_INT 18
9813: PPUSH
9814: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
9818: LD_EXP 32
9822: PPUSH
9823: LD_STRING D2-Pop-3
9825: PPUSH
9826: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
9830: LD_EXP 30
9834: PPUSH
9835: LD_STRING D2-Kur-4
9837: PPUSH
9838: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
9842: LD_EXP 26
9846: PPUSH
9847: LD_STRING D2-Bur-4
9849: PPUSH
9850: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
9854: LD_EXP 30
9858: PPUSH
9859: LD_STRING D2-Kur-5
9861: PPUSH
9862: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
9866: LD_EXP 26
9870: PPUSH
9871: LD_STRING D2-Bur-5
9873: PPUSH
9874: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
9878: LD_EXP 30
9882: PPUSH
9883: LD_STRING D2-Kur-6
9885: PPUSH
9886: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
9890: LD_ADDR_EXP 36
9894: PUSH
9895: LD_STRING 1
9897: PPUSH
9898: LD_INT 7
9900: PUSH
9901: LD_INT 6
9903: PUSH
9904: LD_INT 6
9906: PUSH
9907: LD_INT 5
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: PUSH
9916: LD_OWVAR 67
9920: ARRAY
9921: PPUSH
9922: LD_INT 7
9924: PUSH
9925: LD_INT 6
9927: PUSH
9928: LD_INT 6
9930: PUSH
9931: LD_INT 5
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: LD_OWVAR 67
9944: ARRAY
9945: PPUSH
9946: LD_INT -5
9948: PUSH
9949: LD_EXP 26
9953: PUSH
9954: LD_INT -3
9956: PUSH
9957: LD_INT -5
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_EXP 28
9970: ADD
9971: PUSH
9972: LD_EXP 27
9976: ADD
9977: PUSH
9978: LD_EXP 29
9982: ADD
9983: PUSH
9984: LD_EXP 31
9988: ADD
9989: PUSH
9990: LD_EXP 40
9994: ADD
9995: PUSH
9996: LD_INT -2
9998: PUSH
9999: LD_INT -4
10001: PUSH
10002: LD_INT -6
10004: PUSH
10005: LD_EXP 30
10009: PUSH
10010: LD_EXP 32
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: ADD
10022: PUSH
10023: LD_INT -3
10025: PUSH
10026: LD_INT -5
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: ADD
10033: PUSH
10034: LD_EXP 39
10038: ADD
10039: PPUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 4
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 0
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: LD_INT 2
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PPUSH
10086: CALL_OW 42
10090: ST_TO_ADDR
// stop_talking := true ;
10091: LD_ADDR_OWVAR 56
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
10099: LD_EXP 26
10103: PPUSH
10104: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
10108: LD_EXP 26
10112: PPUSH
10113: LD_INT 123
10115: PPUSH
10116: LD_INT 98
10118: PPUSH
10119: CALL_OW 171
// for i in beriaBaseSquad do
10123: LD_ADDR_VAR 0 2
10127: PUSH
10128: LD_EXP 36
10132: PUSH
10133: FOR_IN
10134: IFFALSE 10209
// begin SetSide ( i , 3 ) ;
10136: LD_VAR 0 2
10140: PPUSH
10141: LD_INT 3
10143: PPUSH
10144: CALL_OW 235
// if not IsPlaced ( i ) then
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 305
10157: NOT
10158: IFFALSE 10183
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
10160: LD_VAR 0 2
10164: PPUSH
10165: LD_INT 112
10167: PPUSH
10168: LD_INT 98
10170: PPUSH
10171: LD_INT 3
10173: PPUSH
10174: LD_INT 0
10176: PPUSH
10177: CALL_OW 50
10181: GO 10207
// begin ComExit ( i ) ;
10183: LD_VAR 0 2
10187: PPUSH
10188: CALL 54296 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
10192: LD_VAR 0 2
10196: PPUSH
10197: LD_INT 123
10199: PPUSH
10200: LD_INT 98
10202: PPUSH
10203: CALL_OW 171
// end ; end ;
10207: GO 10133
10209: POP
10210: POP
// stop_talking := false ;
10211: LD_ADDR_OWVAR 56
10215: PUSH
10216: LD_INT 0
10218: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10219: LD_INT 70
10221: PPUSH
10222: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
10226: LD_INT 110
10228: PPUSH
10229: LD_INT 97
10231: PPUSH
10232: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
10236: LD_EXP 28
10240: IFFALSE 10255
10242: PUSH
10243: LD_EXP 28
10247: PUSH
10248: LD_EXP 36
10252: IN
10253: NOT
10254: AND
10255: IFFALSE 10277
// popovTeam := Join ( popovTeam , Belkov ) ;
10257: LD_ADDR_EXP 41
10261: PUSH
10262: LD_EXP 41
10266: PPUSH
10267: LD_EXP 28
10271: PPUSH
10272: CALL 53898 0 2
10276: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
10277: LD_EXP 27
10281: IFFALSE 10296
10283: PUSH
10284: LD_EXP 27
10288: PUSH
10289: LD_EXP 36
10293: IN
10294: NOT
10295: AND
10296: IFFALSE 10318
// popovTeam := Join ( popovTeam , Gnyevko ) ;
10298: LD_ADDR_EXP 41
10302: PUSH
10303: LD_EXP 41
10307: PPUSH
10308: LD_EXP 27
10312: PPUSH
10313: CALL 53898 0 2
10317: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
10318: LD_EXP 29
10322: IFFALSE 10337
10324: PUSH
10325: LD_EXP 29
10329: PUSH
10330: LD_EXP 36
10334: IN
10335: NOT
10336: AND
10337: IFFALSE 10359
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
10339: LD_ADDR_EXP 41
10343: PUSH
10344: LD_EXP 41
10348: PPUSH
10349: LD_EXP 29
10353: PPUSH
10354: CALL 53898 0 2
10358: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
10359: LD_EXP 31
10363: IFFALSE 10378
10365: PUSH
10366: LD_EXP 31
10370: PUSH
10371: LD_EXP 36
10375: IN
10376: NOT
10377: AND
10378: IFFALSE 10400
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
10380: LD_ADDR_EXP 41
10384: PUSH
10385: LD_EXP 41
10389: PPUSH
10390: LD_EXP 31
10394: PPUSH
10395: CALL 53898 0 2
10399: ST_TO_ADDR
// for i in beriaTeam do
10400: LD_ADDR_VAR 0 2
10404: PUSH
10405: LD_EXP 40
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10448
// if not i in beriaBaseSquad then
10413: LD_VAR 0 2
10417: PUSH
10418: LD_EXP 36
10422: IN
10423: NOT
10424: IFFALSE 10446
// popovTeam := Join ( popovTeam , i ) ;
10426: LD_ADDR_EXP 41
10430: PUSH
10431: LD_EXP 41
10435: PPUSH
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL 53898 0 2
10445: ST_TO_ADDR
10446: GO 10410
10448: POP
10449: POP
// if popovTeam < 3 then
10450: LD_EXP 41
10454: PUSH
10455: LD_INT 3
10457: LESS
10458: IFFALSE 10536
// for i := Count ( popovTeam ) to 3 do
10460: LD_ADDR_VAR 0 2
10464: PUSH
10465: DOUBLE
10466: LD_EXP 41
10470: PPUSH
10471: CALL 17922 0 1
10475: DEC
10476: ST_TO_ADDR
10477: LD_INT 3
10479: PUSH
10480: FOR_TO
10481: IFFALSE 10534
// begin uc_side := 6 ;
10483: LD_ADDR_OWVAR 20
10487: PUSH
10488: LD_INT 6
10490: ST_TO_ADDR
// uc_nation := nation_russian ;
10491: LD_ADDR_OWVAR 21
10495: PUSH
10496: LD_INT 3
10498: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
10499: LD_INT 0
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
10512: LD_ADDR_EXP 41
10516: PUSH
10517: LD_EXP 41
10521: PPUSH
10522: CALL_OW 44
10526: PPUSH
10527: CALL 53898 0 2
10531: ST_TO_ADDR
// end ;
10532: GO 10480
10534: POP
10535: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
10536: LD_EXP 41
10540: PPUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PPUSH
10551: CALL_OW 72
10555: NOT
10556: IFFALSE 10574
// SetClass ( popovTeam [ 1 ] , 4 ) ;
10558: LD_EXP 41
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: PPUSH
10567: LD_INT 4
10569: PPUSH
10570: CALL_OW 336
// for i in popovTeam do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_EXP 41
10583: PUSH
10584: FOR_IN
10585: IFFALSE 10688
// begin if not GetClass ( i ) in [ 1 , 4 ] then
10587: LD_VAR 0 2
10591: PPUSH
10592: CALL_OW 257
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: LD_INT 4
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: IN
10607: NOT
10608: IFFALSE 10622
// SetClass ( i , class_soldier ) ;
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 336
// if not IsPlaced ( i ) then
10622: LD_VAR 0 2
10626: PPUSH
10627: CALL_OW 305
10631: NOT
10632: IFFALSE 10657
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
10634: LD_VAR 0 2
10638: PPUSH
10639: LD_INT 161
10641: PPUSH
10642: LD_INT 107
10644: PPUSH
10645: LD_INT 3
10647: PPUSH
10648: LD_INT 0
10650: PPUSH
10651: CALL_OW 50
10655: GO 10677
// if IsInUnit ( i ) then
10657: LD_VAR 0 2
10661: PPUSH
10662: CALL_OW 310
10666: IFFALSE 10677
// ComExitBuilding ( i ) ;
10668: LD_VAR 0 2
10672: PPUSH
10673: CALL_OW 122
// AddComHold ( i ) ;
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL_OW 200
// end ;
10686: GO 10584
10688: POP
10689: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
10690: LD_ADDR_EXP 35
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 6
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: PUSH
10724: LD_EXP 30
10728: PUSH
10729: LD_EXP 32
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_EXP 41
10742: ADD
10743: DIFF
10744: ST_TO_ADDR
// for i in kirovBaseSquad do
10745: LD_ADDR_VAR 0 2
10749: PUSH
10750: LD_EXP 35
10754: PUSH
10755: FOR_IN
10756: IFFALSE 10887
// begin tmp := IsInUnit ( i ) ;
10758: LD_ADDR_VAR 0 4
10762: PUSH
10763: LD_VAR 0 2
10767: PPUSH
10768: CALL_OW 310
10772: ST_TO_ADDR
// if not tmp then
10773: LD_VAR 0 4
10777: NOT
10778: IFFALSE 10782
// continue ;
10780: GO 10755
// case GetBType ( tmp ) of b_workshop :
10782: LD_VAR 0 4
10786: PPUSH
10787: CALL_OW 266
10791: PUSH
10792: LD_INT 2
10794: DOUBLE
10795: EQUAL
10796: IFTRUE 10800
10798: GO 10815
10800: POP
// SetClass ( i , class_mechanic ) ; b_lab :
10801: LD_VAR 0 2
10805: PPUSH
10806: LD_INT 3
10808: PPUSH
10809: CALL_OW 336
10813: GO 10885
10815: LD_INT 6
10817: DOUBLE
10818: EQUAL
10819: IFTRUE 10823
10821: GO 10838
10823: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 4
10831: PPUSH
10832: CALL_OW 336
10836: GO 10885
10838: LD_INT 4
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 10861
10846: POP
// SetClass ( i , class_soldier ) ; b_depot :
10847: LD_VAR 0 2
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 336
10859: GO 10885
10861: LD_INT 0
10863: DOUBLE
10864: EQUAL
10865: IFTRUE 10869
10867: GO 10884
10869: POP
// SetClass ( i , class_engineer ) ; end ;
10870: LD_VAR 0 2
10874: PPUSH
10875: LD_INT 2
10877: PPUSH
10878: CALL_OW 336
10882: GO 10885
10884: POP
// end ;
10885: GO 10755
10887: POP
10888: POP
// for c := 1 to 4 do
10889: LD_ADDR_VAR 0 3
10893: PUSH
10894: DOUBLE
10895: LD_INT 1
10897: DEC
10898: ST_TO_ADDR
10899: LD_INT 4
10901: PUSH
10902: FOR_TO
10903: IFFALSE 10994
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
10905: LD_EXP 35
10909: PPUSH
10910: LD_INT 25
10912: PUSH
10913: LD_VAR 0 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 72
10926: PUSH
10927: LD_INT 2
10929: LESS
10930: IFFALSE 10992
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_EXP 35
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: CALL 52378 0 2
10951: ST_TO_ADDR
// for i := 1 to 2 do
10952: LD_ADDR_VAR 0 2
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_INT 2
10964: PUSH
10965: FOR_TO
10966: IFFALSE 10990
// SetClass ( tmp [ i ] , c ) ;
10968: LD_VAR 0 4
10972: PUSH
10973: LD_VAR 0 2
10977: ARRAY
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: CALL_OW 336
10988: GO 10965
10990: POP
10991: POP
// end ;
10992: GO 10902
10994: POP
10995: POP
// wait ( 0 0$3 ) ;
10996: LD_INT 105
10998: PPUSH
10999: CALL_OW 67
// InGameOff ;
11003: CALL_OW 9
// gameStart := true ;
11007: LD_ADDR_EXP 7
11011: PUSH
11012: LD_INT 1
11014: ST_TO_ADDR
// Query ( QBriefing ) ;
11015: LD_STRING QBriefing
11017: PPUSH
11018: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
11022: LD_STRING M1
11024: PPUSH
11025: CALL_OW 337
// SaveForQuickRestart ;
11029: CALL_OW 22
// wait ( 0 0$5 ) ;
11033: LD_INT 175
11035: PPUSH
11036: CALL_OW 67
// ComExitBuilding ( Popov ) ;
11040: LD_EXP 32
11044: PPUSH
11045: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
11049: LD_EXP 32
11053: PPUSH
11054: LD_INT 142
11056: PPUSH
11057: LD_INT 64
11059: PPUSH
11060: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
11064: LD_EXP 41
11068: PPUSH
11069: LD_INT 142
11071: PPUSH
11072: LD_INT 64
11074: PPUSH
11075: CALL_OW 171
// end ;
11079: LD_VAR 0 1
11083: RET
// every 0 0$2 trigger allianceAttacked do
11084: LD_EXP 9
11088: IFFALSE 11127
11090: GO 11092
11092: DISABLE
// begin DialogueOn ;
11093: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11097: LD_EXP 30
11101: PPUSH
11102: LD_STRING DArestKur
11104: PPUSH
11105: CALL_OW 88
// dwait ( 0 0$1 ) ;
11109: LD_INT 35
11111: PPUSH
11112: CALL_OW 68
// YouLost ( SelfAttack ) ;
11116: LD_STRING SelfAttack
11118: PPUSH
11119: CALL_OW 104
// DialogueOff ;
11123: CALL_OW 7
// end ;
11127: END
// every 0 0$2 trigger youTookCratesFromKirov do
11128: LD_EXP 17
11132: IFFALSE 11195
11134: GO 11136
11136: DISABLE
// begin Query ( QTookCrates ) ;
11137: LD_STRING QTookCrates
11139: PPUSH
11140: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
11144: LD_INT 35
11146: PPUSH
11147: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
11151: LD_EXP 17
11155: PUSH
11156: LD_INT 3
11158: GREATEREQUAL
11159: IFFALSE 11144
// DialogueOn ;
11161: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
11165: LD_EXP 30
11169: PPUSH
11170: LD_STRING DArestKur
11172: PPUSH
11173: CALL_OW 88
// dwait ( 0 0$1 ) ;
11177: LD_INT 35
11179: PPUSH
11180: CALL_OW 68
// YouLost ( TookCrates ) ;
11184: LD_STRING TookCrates
11186: PPUSH
11187: CALL_OW 104
// DialogueOff ;
11191: CALL_OW 7
// end ;
11195: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
11196: LD_INT 78
11198: PPUSH
11199: LD_INT 112
11201: PPUSH
11202: LD_INT 3
11204: PPUSH
11205: CALL_OW 440
11209: IFFALSE 11268
11211: GO 11213
11213: DISABLE
// begin foundOil := true ;
11214: LD_ADDR_EXP 10
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
// if not IsOk ( Burlak ) then
11222: LD_EXP 26
11226: PPUSH
11227: CALL_OW 302
11231: NOT
11232: IFFALSE 11236
// exit ;
11234: GO 11268
// DialogueOn ;
11236: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
11240: LD_EXP 26
11244: PPUSH
11245: LD_STRING D2a-Bur-1
11247: PPUSH
11248: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
11252: LD_EXP 30
11256: PPUSH
11257: LD_STRING D2a-Kur-1
11259: PPUSH
11260: CALL_OW 94
// DialogueOff ;
11264: CALL_OW 7
// end ;
11268: END
// every 0 0$1 trigger hasKagan and hasOilTower do
11269: LD_EXP 12
11273: IFFALSE 11281
11275: PUSH
11276: LD_EXP 14
11280: AND
11281: IFFALSE 11293
11283: GO 11285
11285: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
11286: LD_STRING M2
11288: PPUSH
11289: CALL_OW 337
// end ;
11293: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
11294: LD_INT 22
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 30
11306: PUSH
11307: LD_INT 3
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 57
11319: PUSH
11320: EMPTY
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: IFTRUE 11382
11338: PUSH
11339: LD_INT 22
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 30
11351: PUSH
11352: LD_INT 7
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 3
11361: PUSH
11362: LD_INT 57
11364: PUSH
11365: EMPTY
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: OR
11382: IFFALSE 11415
11384: PUSH
11385: LD_INT 22
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 26
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 69
11413: NOT
11414: AND
11415: IFFALSE 11428
11417: PUSH
11418: LD_EXP 26
11422: PPUSH
11423: CALL_OW 302
11427: AND
11428: IFFALSE 11622
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin DialogueOn ;
11436: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
11440: LD_EXP 26
11444: PPUSH
11445: LD_STRING D3aa-Bur-1
11447: PPUSH
11448: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
11452: LD_EXP 11
11456: IFFALSE 11469
11458: PUSH
11459: LD_EXP 33
11463: PPUSH
11464: CALL_OW 302
11468: AND
11469: IFFALSE 11495
// begin sci := Scholtze ;
11471: LD_ADDR_VAR 0 1
11475: PUSH
11476: LD_EXP 33
11480: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
11481: LD_EXP 33
11485: PPUSH
11486: LD_STRING D3aa-Sch-1
11488: PPUSH
11489: CALL_OW 88
// end else
11493: GO 11600
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 3
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 50
11512: PUSH
11513: EMPTY
11514: LIST
11515: PUSH
11516: LD_INT 25
11518: PUSH
11519: LD_INT 4
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 26
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 69
11546: PUSH
11547: LD_EXP 45
11551: DIFF
11552: ST_TO_ADDR
// if sci then
11553: LD_VAR 0 1
11557: IFFALSE 11600
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
11559: LD_ADDR_VAR 0 1
11563: PUSH
11564: LD_VAR 0 1
11568: PUSH
11569: LD_INT 1
11571: PPUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 17922 0 1
11581: PPUSH
11582: CALL_OW 12
11586: ARRAY
11587: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
11588: LD_VAR 0 1
11592: PPUSH
11593: LD_STRING D3aa-Sci1-1
11595: PPUSH
11596: CALL_OW 88
// end ; end ; if sci then
11600: LD_VAR 0 1
11604: IFFALSE 11618
// Say ( Burlak , D3aa-Bur-2 ) ;
11606: LD_EXP 26
11610: PPUSH
11611: LD_STRING D3aa-Bur-2
11613: PPUSH
11614: CALL_OW 88
// DialogueOff ;
11618: CALL_OW 7
// end ;
11622: PPOPN 1
11624: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
11625: LD_EXP 55
11629: PPUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 3
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 72
11644: IFFALSE 11657
11646: PUSH
11647: LD_EXP 26
11651: PPUSH
11652: CALL_OW 302
11656: AND
11657: IFFALSE 11666
11659: PUSH
11660: LD_EXP 13
11664: NOT
11665: AND
11666: IFFALSE 11980
11668: GO 11670
11670: DISABLE
11671: LD_INT 0
11673: PPUSH
11674: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_EXP 55
11684: PPUSH
11685: LD_INT 101
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PPUSH
11695: CALL_OW 72
11699: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
11700: LD_ADDR_VAR 0 1
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 50
11717: PUSH
11718: EMPTY
11719: LIST
11720: PUSH
11721: LD_INT 26
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: LIST
11735: PPUSH
11736: CALL_OW 69
11740: PUSH
11741: LD_EXP 45
11745: DIFF
11746: ST_TO_ADDR
// if not sol then
11747: LD_VAR 0 1
11751: NOT
11752: IFFALSE 11756
// exit ;
11754: GO 11980
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_VAR 0 1
11765: PUSH
11766: LD_INT 1
11768: PPUSH
11769: LD_VAR 0 1
11773: PPUSH
11774: CALL 17922 0 1
11778: PPUSH
11779: CALL_OW 12
11783: ARRAY
11784: ST_TO_ADDR
// DialogueOn ;
11785: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
11789: LD_VAR 0 2
11793: PPUSH
11794: LD_EXP 26
11798: PPUSH
11799: CALL_OW 74
11803: PPUSH
11804: CALL_OW 87
// if not hasKagan then
11808: LD_EXP 12
11812: NOT
11813: IFFALSE 11841
// begin Say ( sol , D3a-RSol1-1 ) ;
11815: LD_VAR 0 1
11819: PPUSH
11820: LD_STRING D3a-RSol1-1
11822: PPUSH
11823: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
11827: LD_EXP 26
11831: PPUSH
11832: LD_STRING D3a-Bur-1
11834: PPUSH
11835: CALL_OW 88
// end else
11839: GO 11976
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
11841: LD_VAR 0 1
11845: PPUSH
11846: LD_STRING D3a-RSol1-1
11848: PUSH
11849: LD_STRING D3b-RSol1-1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 2
11863: MOD
11864: PUSH
11865: LD_INT 1
11867: PLUS
11868: ARRAY
11869: PPUSH
11870: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
11874: LD_EXP 27
11878: PPUSH
11879: CALL_OW 302
11883: IFFALSE 11897
11885: PUSH
11886: LD_EXP 27
11890: PUSH
11891: LD_EXP 36
11895: IN
11896: AND
11897: IFFALSE 11913
// Say ( Gnyevko , D3b-Gny-1 ) else
11899: LD_EXP 27
11903: PPUSH
11904: LD_STRING D3b-Gny-1
11906: PPUSH
11907: CALL_OW 88
11911: GO 11964
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
11913: LD_EXP 31
11917: PPUSH
11918: CALL_OW 302
11922: IFFALSE 11936
11924: PUSH
11925: LD_EXP 31
11929: PUSH
11930: LD_EXP 36
11934: IN
11935: AND
11936: IFFALSE 11952
// Say ( Kovalyuk , D3b-Kov-1 ) else
11938: LD_EXP 31
11942: PPUSH
11943: LD_STRING D3b-Kov-1
11945: PPUSH
11946: CALL_OW 88
11950: GO 11964
// Say ( sol , D3b-RSol1-2 ) ;
11952: LD_VAR 0 1
11956: PPUSH
11957: LD_STRING D3b-RSol1-2
11959: PPUSH
11960: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
11964: LD_EXP 26
11968: PPUSH
11969: LD_STRING D3b-Bur-1
11971: PPUSH
11972: CALL_OW 88
// end ; DialogueOff ;
11976: CALL_OW 7
// end ;
11980: PPOPN 2
11982: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
11983: LD_EXP 10
11987: IFFALSE 12992
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
12000: LD_INT 1050
12002: PUSH
12003: LD_INT 350
12005: PPUSH
12006: LD_INT 2100
12008: PPUSH
12009: CALL_OW 12
12013: PLUS
12014: PPUSH
12015: CALL_OW 67
// case Difficulty of 1 :
12019: LD_OWVAR 67
12023: PUSH
12024: LD_INT 1
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12043
12032: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
12033: LD_ADDR_VAR 0 4
12037: PUSH
12038: LD_INT 8
12040: ST_TO_ADDR
12041: GO 12170
12043: LD_INT 2
12045: DOUBLE
12046: EQUAL
12047: IFTRUE 12051
12049: GO 12085
12051: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
12052: LD_ADDR_VAR 0 4
12056: PUSH
12057: LD_INT 8
12059: PUSH
12060: LD_INT 7
12062: PUSH
12063: LD_INT 7
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 1
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: CALL_OW 12
12081: ARRAY
12082: ST_TO_ADDR
12083: GO 12170
12085: LD_INT 3
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12127
12093: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
12094: LD_ADDR_VAR 0 4
12098: PUSH
12099: LD_INT 7
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: LD_INT 6
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: CALL_OW 12
12123: ARRAY
12124: ST_TO_ADDR
12125: GO 12170
12127: LD_INT 4
12129: DOUBLE
12130: EQUAL
12131: IFTRUE 12135
12133: GO 12169
12135: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
12136: LD_ADDR_VAR 0 4
12140: PUSH
12141: LD_INT 7
12143: PUSH
12144: LD_INT 6
12146: PUSH
12147: LD_INT 6
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 1
12157: PPUSH
12158: LD_INT 3
12160: PPUSH
12161: CALL_OW 12
12165: ARRAY
12166: ST_TO_ADDR
12167: GO 12170
12169: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
12170: LD_EXP 33
12174: PPUSH
12175: LD_VAR 0 4
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 49
// ComHold ( Scholtze ) ;
12187: LD_EXP 33
12191: PPUSH
12192: CALL_OW 140
// wait ( 0 0$4 ) ;
12196: LD_INT 140
12198: PPUSH
12199: CALL_OW 67
// if See ( 3 , Scholtze ) then
12203: LD_INT 3
12205: PPUSH
12206: LD_EXP 33
12210: PPUSH
12211: CALL_OW 292
12215: IFFALSE 12299
// begin hasScholtze := true ;
12217: LD_ADDR_EXP 11
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
12225: LD_EXP 33
12229: PPUSH
12230: LD_INT 3
12232: PPUSH
12233: CALL_OW 235
// ComFree ( Scholtze ) ;
12237: LD_EXP 33
12241: PPUSH
12242: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
12246: LD_EXP 33
12250: PPUSH
12251: CALL_OW 87
// DialogueOn ;
12255: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
12259: LD_EXP 33
12263: PPUSH
12264: LD_STRING D4a-Sch-1
12266: PPUSH
12267: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
12271: LD_EXP 26
12275: PPUSH
12276: LD_STRING D4a-Bur-1
12278: PPUSH
12279: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
12283: LD_EXP 33
12287: PPUSH
12288: LD_STRING D4a-Sch-2
12290: PPUSH
12291: CALL_OW 88
// DialogueOff ;
12295: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_EXP 33
12308: PPUSH
12309: CALL_OW 250
12313: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
12314: LD_ADDR_VAR 0 3
12318: PUSH
12319: LD_EXP 33
12323: PPUSH
12324: CALL_OW 251
12328: ST_TO_ADDR
// uc_side := 6 ;
12329: LD_ADDR_OWVAR 20
12333: PUSH
12334: LD_INT 6
12336: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
12337: LD_INT 1
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 380
// fake := CreateHuman ;
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: CALL_OW 44
12359: ST_TO_ADDR
// InGameOn ;
12360: CALL_OW 8
// DialogueOn ;
12364: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
12368: LD_VAR 0 1
12372: PPUSH
12373: LD_STRING D4-Sch-1
12375: PPUSH
12376: CALL 58143 0 2
// Say ( Burlak , D4-Bur-1 ) ;
12380: LD_EXP 26
12384: PPUSH
12385: LD_STRING D4-Bur-1
12387: PPUSH
12388: CALL_OW 88
// DialogueOff ;
12392: CALL_OW 7
// InGameOff ;
12396: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
12400: LD_STRING M4
12402: PPUSH
12403: CALL_OW 337
// canSearchForScholtze := true ;
12407: LD_ADDR_EXP 16
12411: PUSH
12412: LD_INT 1
12414: ST_TO_ADDR
// if dickensKilled then
12415: LD_EXP 15
12419: IFFALSE 12423
// exit ;
12421: GO 12992
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
12423: LD_INT 4200
12425: PUSH
12426: LD_INT 700
12428: PUSH
12429: LD_OWVAR 67
12433: MUL
12434: MINUS
12435: PPUSH
12436: CALL_OW 67
// uc_side := 1 ;
12440: LD_ADDR_OWVAR 20
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// uc_nation := nation_american ;
12448: LD_ADDR_OWVAR 21
12452: PUSH
12453: LD_INT 1
12455: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
12456: LD_ADDR_VAR 0 5
12460: PUSH
12461: LD_STRING Dickens
12463: PPUSH
12464: CALL_OW 25
12468: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
12469: LD_VAR 0 5
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: LD_OWVAR 67
12481: PPUSH
12482: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
12486: LD_INT 1
12488: PPUSH
12489: LD_OWVAR 67
12493: PPUSH
12494: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
12498: LD_ADDR_OWVAR 29
12502: PUSH
12503: LD_INT 10
12505: PUSH
12506: LD_INT 10
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
// DickensFriend := CreateHuman ;
12513: LD_ADDR_VAR 0 6
12517: PUSH
12518: CALL_OW 44
12522: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
12523: LD_VAR 0 5
12527: PPUSH
12528: LD_INT 22
12530: PPUSH
12531: LD_INT 17
12533: PPUSH
12534: LD_INT 3
12536: PPUSH
12537: LD_INT 0
12539: PPUSH
12540: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
12544: LD_VAR 0 6
12548: PPUSH
12549: LD_INT 22
12551: PPUSH
12552: LD_INT 17
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: LD_INT 0
12560: PPUSH
12561: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
12565: LD_VAR 0 5
12569: PUSH
12570: LD_VAR 0 6
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: LD_VAR 0 2
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
12593: LD_INT 35
12595: PPUSH
12596: CALL_OW 67
// if not IsOk ( Dickens ) then
12600: LD_VAR 0 5
12604: PPUSH
12605: CALL_OW 302
12609: NOT
12610: IFFALSE 12657
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
12612: LD_VAR 0 6
12616: PPUSH
12617: LD_INT 31
12619: PPUSH
12620: LD_INT 39
12622: PPUSH
12623: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
12627: LD_VAR 0 6
12631: PPUSH
12632: LD_INT 297
12634: PPUSH
12635: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
12639: LD_ADDR_EXP 54
12643: PUSH
12644: LD_EXP 54
12648: PUSH
12649: LD_VAR 0 6
12653: UNION
12654: ST_TO_ADDR
// exit ;
12655: GO 12992
// end ; if not IsOk ( DickensFriend ) then
12657: LD_VAR 0 6
12661: PPUSH
12662: CALL_OW 302
12666: NOT
12667: IFFALSE 12714
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
12669: LD_VAR 0 5
12673: PPUSH
12674: LD_INT 31
12676: PPUSH
12677: LD_INT 39
12679: PPUSH
12680: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
12684: LD_VAR 0 5
12688: PPUSH
12689: LD_INT 297
12691: PPUSH
12692: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
12696: LD_ADDR_EXP 54
12700: PUSH
12701: LD_EXP 54
12705: PUSH
12706: LD_VAR 0 5
12710: UNION
12711: ST_TO_ADDR
// exit ;
12712: GO 12992
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
12714: LD_INT 1
12716: PPUSH
12717: LD_EXP 33
12721: PPUSH
12722: CALL_OW 292
12726: IFFALSE 12743
12728: PUSH
12729: LD_EXP 33
12733: PPUSH
12734: CALL_OW 256
12738: PUSH
12739: LD_INT 1000
12741: LESS
12742: AND
12743: IFFALSE 12752
12745: PUSH
12746: LD_EXP 11
12750: NOT
12751: AND
12752: IFFALSE 12593
// canSearchForScholtze := false ;
12754: LD_ADDR_EXP 16
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
12762: LD_VAR 0 5
12766: PUSH
12767: LD_VAR 0 6
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PPUSH
12776: LD_EXP 33
12780: PPUSH
12781: CALL_OW 115
// wait ( 0 0$0.3 ) ;
12785: LD_INT 10
12787: PPUSH
12788: CALL_OW 67
// InGameOn ;
12792: CALL_OW 8
// DialogueOn ;
12796: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
12800: LD_VAR 0 2
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 3
12812: PPUSH
12813: LD_INT 10
12815: NEG
12816: PPUSH
12817: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
12821: LD_VAR 0 2
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
12835: LD_EXP 33
12839: PPUSH
12840: LD_STRING D4b-Sch-1
12842: PPUSH
12843: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
12847: LD_VAR 0 6
12851: PPUSH
12852: LD_STRING D4b-Sol1-1
12854: PPUSH
12855: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
12859: LD_VAR 0 5
12863: PPUSH
12864: LD_STRING D4b-Sol2-1
12866: PPUSH
12867: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
12871: LD_EXP 33
12875: PPUSH
12876: LD_STRING D4b-Sch-2
12878: PPUSH
12879: CALL_OW 88
// DialogueOff ;
12883: CALL_OW 7
// wait ( 0 0$0.3 ) ;
12887: LD_INT 10
12889: PPUSH
12890: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
12894: LD_VAR 0 2
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 3
12906: PPUSH
12907: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
12911: LD_EXP 26
12915: PPUSH
12916: LD_STRING D4b-Bur-2
12918: PPUSH
12919: CALL_OW 88
// InGameOff ;
12923: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
12927: LD_STRING MScholtzeDel
12929: PPUSH
12930: CALL_OW 337
// KillUnit ( Scholtze ) ;
12934: LD_EXP 33
12938: PPUSH
12939: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
12943: LD_VAR 0 5
12947: PUSH
12948: LD_VAR 0 6
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: LD_INT 25
12959: PPUSH
12960: LD_INT 31
12962: PPUSH
12963: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
12967: LD_ADDR_EXP 54
12971: PUSH
12972: LD_EXP 54
12976: PUSH
12977: LD_VAR 0 5
12981: PUSH
12982: LD_VAR 0 6
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: UNION
12991: ST_TO_ADDR
// end ;
12992: PPOPN 6
12994: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
12995: LD_INT 3
12997: PPUSH
12998: LD_EXP 33
13002: PPUSH
13003: CALL_OW 292
13007: IFFALSE 13015
13009: PUSH
13010: LD_EXP 16
13014: AND
13015: IFFALSE 13024
13017: PUSH
13018: LD_EXP 11
13022: NOT
13023: AND
13024: IFFALSE 13109
13026: GO 13028
13028: DISABLE
// begin hasScholtze := true ;
13029: LD_ADDR_EXP 11
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
13037: LD_EXP 33
13041: PPUSH
13042: LD_INT 3
13044: PPUSH
13045: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
13049: LD_EXP 33
13053: PPUSH
13054: CALL_OW 87
// DialogueOn ;
13058: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
13062: LD_EXP 33
13066: PPUSH
13067: LD_STRING D4a-Sch-1
13069: PPUSH
13070: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
13074: LD_EXP 26
13078: PPUSH
13079: LD_STRING D4a-Bur-1
13081: PPUSH
13082: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
13086: LD_EXP 33
13090: PPUSH
13091: LD_STRING D4a-Sch-2
13093: PPUSH
13094: CALL_OW 88
// DialogueOff ;
13098: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
13102: LD_STRING MScholtzeOut
13104: PPUSH
13105: CALL_OW 337
// end ;
13109: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
13110: LD_INT 3
13112: PPUSH
13113: LD_INT 22
13115: PUSH
13116: LD_INT 6
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 21
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 70
13141: IFFALSE 13216
13143: GO 13145
13145: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
13146: LD_INT 131
13148: PPUSH
13149: LD_INT 50
13151: PPUSH
13152: LD_INT 3
13154: PPUSH
13155: LD_INT 12
13157: PPUSH
13158: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
13162: LD_INT 35
13164: PPUSH
13165: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
13169: LD_INT 3
13171: PPUSH
13172: LD_INT 22
13174: PUSH
13175: LD_INT 6
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 21
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 70
13200: NOT
13201: IFFALSE 13162
// RemoveSeeing ( 131 , 50 , 3 ) ;
13203: LD_INT 131
13205: PPUSH
13206: LD_INT 50
13208: PPUSH
13209: LD_INT 3
13211: PPUSH
13212: CALL_OW 331
// end ;
13216: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
13217: LD_EXP 18
13221: NOT
13222: IFFALSE 13268
13224: PUSH
13225: LD_INT 9
13227: PPUSH
13228: LD_INT 22
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 21
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 31
13250: PUSH
13251: LD_INT 21
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: PPUSH
13263: CALL_OW 70
13267: AND
13268: IFFALSE 13281
13270: PUSH
13271: LD_EXP 26
13275: PPUSH
13276: CALL_OW 302
13280: AND
13281: IFFALSE 13306
13283: GO 13285
13285: DISABLE
// begin DialogueOn ;
13286: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
13290: LD_EXP 26
13294: PPUSH
13295: LD_STRING D5a-Bur-1
13297: PPUSH
13298: CALL_OW 88
// DialogueOff ;
13302: CALL_OW 7
// end ;
13306: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
13307: LD_EXP 19
13311: IFFALSE 13319
13313: PUSH
13314: LD_EXP 14
13318: AND
13319: IFFALSE 14976
13321: GO 13323
13323: DISABLE
13324: LD_INT 0
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
13333: PPUSH
13334: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
13335: LD_STRING M3
13337: PPUSH
13338: CALL_OW 337
// sendMechanics := false ;
13342: LD_ADDR_VAR 0 9
13346: PUSH
13347: LD_INT 0
13349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13350: LD_INT 35
13352: PPUSH
13353: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13357: LD_ADDR_VAR 0 5
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_INT 3
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 21
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 50
13384: PUSH
13385: EMPTY
13386: LIST
13387: PUSH
13388: LD_INT 23
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PPUSH
13404: CALL_OW 69
13408: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13409: LD_ADDR_VAR 0 7
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: PPUSH
13454: CALL 17922 0 1
13458: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13459: LD_VAR 0 5
13463: PUSH
13464: LD_VAR 0 7
13468: PUSH
13469: LD_EXP 21
13473: PLUS
13474: LESS
13475: IFFALSE 13508
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13477: LD_ADDR_OWVAR 47
13481: PUSH
13482: LD_STRING #Ru03-5
13484: PUSH
13485: LD_VAR 0 7
13489: PUSH
13490: LD_EXP 21
13494: PLUS
13495: PUSH
13496: LD_VAR 0 5
13500: MINUS
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: ST_TO_ADDR
13506: GO 13519
// display_strings := [ #Ru03-5a ] ;
13508: LD_ADDR_OWVAR 47
13512: PUSH
13513: LD_STRING #Ru03-5a
13515: PUSH
13516: EMPTY
13517: LIST
13518: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
13519: LD_ADDR_EXP 20
13523: PUSH
13524: LD_EXP 20
13528: PUSH
13529: LD_INT 35
13531: MINUS
13532: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
13533: LD_EXP 20
13537: PUSH
13538: LD_INT 0
13540: EQUAL
13541: IFFALSE 13350
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
13543: LD_VAR 0 5
13547: PUSH
13548: LD_VAR 0 7
13552: PUSH
13553: LD_EXP 21
13557: PLUS
13558: GREATEREQUAL
13559: IFFALSE 13592
// begin AddMedal ( Surplus , 1 ) ;
13561: LD_STRING Surplus
13563: PPUSH
13564: LD_INT 1
13566: PPUSH
13567: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
13571: LD_ADDR_VAR 0 8
13575: PUSH
13576: LD_INT 1
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: LD_INT 3
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: ST_TO_ADDR
// end else
13590: GO 13654
// if vehiclesOwned >= pepCount then
13592: LD_VAR 0 5
13596: PUSH
13597: LD_VAR 0 7
13601: GREATEREQUAL
13602: IFFALSE 13632
// begin AddMedal ( Surplus , - 1 ) ;
13604: LD_STRING Surplus
13606: PPUSH
13607: LD_INT 1
13609: NEG
13610: PPUSH
13611: CALL_OW 101
// points := [ 2 , 3 ] ;
13615: LD_ADDR_VAR 0 8
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: LD_INT 3
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: ST_TO_ADDR
// end else
13630: GO 13654
// begin AddMedal ( Surplus , - 2 ) ;
13632: LD_STRING Surplus
13634: PPUSH
13635: LD_INT 2
13637: NEG
13638: PPUSH
13639: CALL_OW 101
// points := [ 3 ] ;
13643: LD_ADDR_VAR 0 8
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: EMPTY
13652: LIST
13653: ST_TO_ADDR
// end ; InGameOn ;
13654: CALL_OW 8
// DialogueOn ;
13658: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
13662: LD_EXP 30
13666: PPUSH
13667: LD_STRING D5-Kur-1
13669: PPUSH
13670: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
13674: LD_ADDR_VAR 0 6
13678: PUSH
13679: LD_STRING QVehicles
13681: PPUSH
13682: LD_VAR 0 8
13686: PPUSH
13687: CALL_OW 98
13691: ST_TO_ADDR
// case q of 1 :
13692: LD_VAR 0 6
13696: PUSH
13697: LD_INT 1
13699: DOUBLE
13700: EQUAL
13701: IFTRUE 13705
13703: GO 13748
13705: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
13706: LD_EXP 26
13710: PPUSH
13711: LD_STRING D6a-Bur-1
13713: PPUSH
13714: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
13718: LD_EXP 30
13722: PPUSH
13723: LD_STRING D6a-Kur-1
13725: PPUSH
13726: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
13730: LD_ADDR_EXP 23
13734: PUSH
13735: LD_INT 4200
13737: ST_TO_ADDR
// sendMechanics := true ;
13738: LD_ADDR_VAR 0 9
13742: PUSH
13743: LD_INT 1
13745: ST_TO_ADDR
// end ; 2 :
13746: GO 13843
13748: LD_INT 2
13750: DOUBLE
13751: EQUAL
13752: IFTRUE 13756
13754: GO 13799
13756: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
13757: LD_EXP 26
13761: PPUSH
13762: LD_STRING D6b-Bur-1
13764: PPUSH
13765: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
13769: LD_EXP 30
13773: PPUSH
13774: LD_STRING D6b-Kur-1
13776: PPUSH
13777: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
13781: LD_ADDR_EXP 23
13785: PUSH
13786: LD_INT 6300
13788: ST_TO_ADDR
// sendMechanics := true ;
13789: LD_ADDR_VAR 0 9
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// end ; 3 :
13797: GO 13843
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13842
13807: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
13808: LD_EXP 26
13812: PPUSH
13813: LD_STRING D6c-Bur-1
13815: PPUSH
13816: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
13820: LD_EXP 30
13824: PPUSH
13825: LD_STRING D6c-Kur-1
13827: PPUSH
13828: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
13832: LD_ADDR_EXP 20
13836: PUSH
13837: LD_INT 14700
13839: ST_TO_ADDR
// end ; end ;
13840: GO 13843
13842: POP
// DialogueOff ;
13843: CALL_OW 7
// InGameOff ;
13847: CALL_OW 9
// if q = 3 then
13851: LD_VAR 0 6
13855: PUSH
13856: LD_INT 3
13858: EQUAL
13859: IFFALSE 14131
// begin repeat wait ( 0 0$1 ) ;
13861: LD_INT 35
13863: PPUSH
13864: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 22
13875: PUSH
13876: LD_INT 3
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 21
13885: PUSH
13886: LD_INT 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 50
13895: PUSH
13896: EMPTY
13897: LIST
13898: PUSH
13899: LD_INT 23
13901: PUSH
13902: LD_INT 3
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
13920: LD_ADDR_VAR 0 7
13924: PUSH
13925: LD_INT 22
13927: PUSH
13928: LD_INT 3
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 21
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 23
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: PPUSH
13965: CALL 17922 0 1
13969: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
13970: LD_VAR 0 5
13974: PUSH
13975: LD_VAR 0 7
13979: PUSH
13980: LD_EXP 21
13984: PLUS
13985: LESS
13986: IFFALSE 14019
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned ] else
13988: LD_ADDR_OWVAR 47
13992: PUSH
13993: LD_STRING #Ru03-5
13995: PUSH
13996: LD_VAR 0 7
14000: PUSH
14001: LD_EXP 21
14005: PLUS
14006: PUSH
14007: LD_VAR 0 5
14011: MINUS
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: ST_TO_ADDR
14017: GO 14030
// display_strings := [ #Ru03-5a ] ;
14019: LD_ADDR_OWVAR 47
14023: PUSH
14024: LD_STRING #Ru03-5a
14026: PUSH
14027: EMPTY
14028: LIST
14029: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
14030: LD_ADDR_EXP 20
14034: PUSH
14035: LD_EXP 20
14039: PUSH
14040: LD_INT 35
14042: MINUS
14043: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
14044: LD_EXP 20
14048: PUSH
14049: LD_INT 0
14051: EQUAL
14052: IFFALSE 13861
// if vehiclesOwned < requiredVehiclesAmount then
14054: LD_VAR 0 5
14058: PUSH
14059: LD_EXP 21
14063: LESS
14064: IFFALSE 14095
// begin DialogueOn ;
14066: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
14070: LD_EXP 30
14074: PPUSH
14075: LD_STRING D6d-Kur-1
14077: PPUSH
14078: CALL_OW 94
// YouLost ( Vehicles ) ;
14082: LD_STRING Vehicles
14084: PPUSH
14085: CALL_OW 104
// DialogueOff ;
14089: CALL_OW 7
// exit ;
14093: GO 14976
// end ; DialogueOn ;
14095: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
14099: LD_EXP 30
14103: PPUSH
14104: LD_STRING D6c-Kur-2
14106: PPUSH
14107: CALL_OW 94
// DialogueOff ;
14111: CALL_OW 7
// sendMechanics := true ;
14115: LD_ADDR_VAR 0 9
14119: PUSH
14120: LD_INT 1
14122: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
14123: LD_ADDR_EXP 23
14127: PUSH
14128: LD_INT 4200
14130: ST_TO_ADDR
// end ; display_strings := [ ] ;
14131: LD_ADDR_OWVAR 47
14135: PUSH
14136: EMPTY
14137: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
14138: LD_STRING M5
14140: PPUSH
14141: CALL_OW 337
// if sendMechanics then
14145: LD_VAR 0 9
14149: IFFALSE 14976
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14151: LD_ADDR_VAR 0 3
14155: PUSH
14156: LD_INT 22
14158: PUSH
14159: LD_INT 6
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 21
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 25
14178: PUSH
14179: LD_INT 3
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 3
14188: PUSH
14189: LD_INT 120
14191: PUSH
14192: LD_INT 7
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
14214: LD_VAR 0 3
14218: PPUSH
14219: CALL 17922 0 1
14223: PUSH
14224: LD_EXP 21
14228: LESS
14229: IFFALSE 14420
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: DOUBLE
14237: LD_VAR 0 3
14241: PPUSH
14242: CALL 17922 0 1
14246: DEC
14247: ST_TO_ADDR
14248: LD_EXP 21
14252: PUSH
14253: FOR_TO
14254: IFFALSE 14355
// begin uc_side := 6 ;
14256: LD_ADDR_OWVAR 20
14260: PUSH
14261: LD_INT 6
14263: ST_TO_ADDR
// uc_nation := nation_russian ;
14264: LD_ADDR_OWVAR 21
14268: PUSH
14269: LD_INT 3
14271: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
14272: LD_INT 0
14274: PPUSH
14275: LD_INT 3
14277: PPUSH
14278: CALL_OW 383
// un := CreateHuman ;
14282: LD_ADDR_VAR 0 2
14286: PUSH
14287: CALL_OW 44
14291: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14292: LD_INT 35
14294: PPUSH
14295: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_INT 14
14306: PPUSH
14307: LD_INT 0
14309: PPUSH
14310: CALL_OW 49
14314: IFFALSE 14292
// ComMoveXY ( un , 193 , 135 ) ;
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_INT 193
14323: PPUSH
14324: LD_INT 135
14326: PPUSH
14327: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
14331: LD_VAR 0 2
14335: PPUSH
14336: LD_INT 159
14338: PPUSH
14339: LD_INT 106
14341: PPUSH
14342: CALL_OW 171
// wait ( 0 0$1 ) ;
14346: LD_INT 35
14348: PPUSH
14349: CALL_OW 67
// end ;
14353: GO 14253
14355: POP
14356: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14357: LD_ADDR_VAR 0 3
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 3
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: LD_INT 120
14397: PUSH
14398: LD_INT 7
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
14420: LD_ADDR_EXP 35
14424: PUSH
14425: LD_EXP 35
14429: PUSH
14430: LD_VAR 0 3
14434: DIFF
14435: ST_TO_ADDR
// vehicles := [ ] ;
14436: LD_ADDR_VAR 0 4
14440: PUSH
14441: EMPTY
14442: ST_TO_ADDR
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
14443: LD_ADDR_VAR 0 5
14447: PUSH
14448: LD_INT 22
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 21
14460: PUSH
14461: LD_INT 2
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 50
14470: PUSH
14471: EMPTY
14472: LIST
14473: PUSH
14474: LD_INT 23
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_EXP 21
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14594
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
14513: LD_VAR 0 5
14517: PUSH
14518: LD_VAR 0 1
14522: ARRAY
14523: PPUSH
14524: CALL_OW 311
14528: PPUSH
14529: CALL 54296 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
14533: LD_VAR 0 5
14537: PUSH
14538: LD_VAR 0 1
14542: ARRAY
14543: PPUSH
14544: LD_INT 6
14546: PPUSH
14547: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_VAR 0 4
14560: PPUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_VAR 0 1
14570: ARRAY
14571: PPUSH
14572: CALL 53898 0 2
14576: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
14577: LD_VAR 0 3
14581: PUSH
14582: LD_VAR 0 1
14586: ARRAY
14587: PPUSH
14588: CALL 54296 0 1
// end ;
14592: GO 14510
14594: POP
14595: POP
// if not vehicles then
14596: LD_VAR 0 4
14600: NOT
14601: IFFALSE 14605
// exit ;
14603: GO 14976
// kirovAttackVehicles := kirovVehicles union vehicles ;
14605: LD_ADDR_EXP 47
14609: PUSH
14610: LD_EXP 46
14614: PUSH
14615: LD_VAR 0 4
14619: UNION
14620: ST_TO_ADDR
// kirovVehicles := [ ] ;
14621: LD_ADDR_EXP 46
14625: PUSH
14626: EMPTY
14627: ST_TO_ADDR
// for i in kirovAttackVehicles do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_EXP 47
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14655
// SetTag ( i , 0 ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: LD_INT 0
14648: PPUSH
14649: CALL_OW 109
14653: GO 14638
14655: POP
14656: POP
// repeat wait ( 0 0$3 ) ;
14657: LD_INT 105
14659: PPUSH
14660: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_INT 6
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 21
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 55
14704: PUSH
14705: EMPTY
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: LD_INT 120
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_EXP 47
14750: PPUSH
14751: LD_INT 58
14753: PUSH
14754: EMPTY
14755: LIST
14756: PPUSH
14757: CALL_OW 72
14761: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: DOUBLE
14768: LD_INT 1
14770: DEC
14771: ST_TO_ADDR
14772: LD_VAR 0 4
14776: PPUSH
14777: CALL 17922 0 1
14781: PUSH
14782: FOR_TO
14783: IFFALSE 14825
// if i <= tmp then
14785: LD_VAR 0 1
14789: PUSH
14790: LD_VAR 0 3
14794: LESSEQUAL
14795: IFFALSE 14823
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
14797: LD_VAR 0 3
14801: PUSH
14802: LD_VAR 0 1
14806: ARRAY
14807: PPUSH
14808: LD_VAR 0 4
14812: PUSH
14813: LD_VAR 0 1
14817: ARRAY
14818: PPUSH
14819: CALL_OW 120
14823: GO 14782
14825: POP
14826: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
14827: LD_EXP 47
14831: PPUSH
14832: LD_INT 58
14834: PUSH
14835: EMPTY
14836: LIST
14837: PPUSH
14838: CALL_OW 72
14842: NOT
14843: IFFALSE 14657
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_INT 22
14852: PUSH
14853: LD_INT 6
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 25
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: LD_INT 120
14875: PUSH
14876: LD_INT 7
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: LD_INT 55
14892: PUSH
14893: EMPTY
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: ST_TO_ADDR
// for i in tmp do
14911: LD_ADDR_VAR 0 1
14915: PUSH
14916: LD_VAR 0 3
14920: PUSH
14921: FOR_IN
14922: IFFALSE 14959
// if not i in kirovBaseSquad then
14924: LD_VAR 0 1
14928: PUSH
14929: LD_EXP 35
14933: IN
14934: NOT
14935: IFFALSE 14957
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
14937: LD_ADDR_EXP 35
14941: PUSH
14942: LD_EXP 35
14946: PPUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL 53898 0 2
14956: ST_TO_ADDR
14957: GO 14921
14959: POP
14960: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
14961: LD_EXP 47
14965: PPUSH
14966: LD_INT 71
14968: PPUSH
14969: LD_INT 36
14971: PPUSH
14972: CALL_OW 111
// end ; end ;
14976: PPOPN 9
14978: END
// every 0 0$1 trigger timeToAttackOnOmicron do
14979: LD_EXP 23
14983: IFFALSE 15417
14985: GO 14987
14987: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
14988: LD_INT 16
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
15005: LD_INT 35
15007: PPUSH
15008: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
15012: LD_ADDR_OWVAR 47
15016: PUSH
15017: LD_STRING #Ru03-1
15019: PUSH
15020: LD_EXP 23
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
15029: LD_ADDR_EXP 23
15033: PUSH
15034: LD_EXP 23
15038: PUSH
15039: LD_INT 35
15041: MINUS
15042: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
15043: LD_EXP 23
15047: PUSH
15048: LD_INT 0
15050: EQUAL
15051: IFFALSE 15005
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
15053: LD_INT 16
15055: PPUSH
15056: LD_INT 22
15058: PUSH
15059: LD_INT 3
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: LD_INT 58
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 71
15098: IFTRUE 15147
15100: PUSH
15101: LD_INT 16
15103: PPUSH
15104: LD_INT 22
15106: PUSH
15107: LD_INT 3
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 21
15116: PUSH
15117: LD_INT 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: LD_INT 55
15129: PUSH
15130: EMPTY
15131: LIST
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 71
15146: OR
15147: IFFALSE 15330
// begin DialogueOn ;
15149: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
15153: LD_EXP 30
15157: PPUSH
15158: LD_STRING D7a-Kur-1
15160: PPUSH
15161: CALL_OW 94
// DialogueOff ;
15165: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
15169: LD_ADDR_EXP 23
15173: PUSH
15174: LD_INT 4200
15176: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15177: LD_INT 35
15179: PPUSH
15180: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
15184: LD_ADDR_OWVAR 47
15188: PUSH
15189: LD_STRING #Ru03-2
15191: PUSH
15192: LD_EXP 23
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
15201: LD_ADDR_EXP 23
15205: PUSH
15206: LD_EXP 23
15210: PUSH
15211: LD_INT 35
15213: MINUS
15214: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
15215: LD_EXP 23
15219: PUSH
15220: LD_INT 0
15222: EQUAL
15223: IFFALSE 15177
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
15225: LD_INT 16
15227: PPUSH
15228: LD_INT 22
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 21
15240: PUSH
15241: LD_INT 2
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 3
15250: PUSH
15251: LD_INT 58
15253: PUSH
15254: EMPTY
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 71
15270: IFTRUE 15319
15272: PUSH
15273: LD_INT 16
15275: PPUSH
15276: LD_INT 22
15278: PUSH
15279: LD_INT 3
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 55
15301: PUSH
15302: EMPTY
15303: LIST
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: PPUSH
15314: CALL_OW 71
15318: OR
15319: IFFALSE 15330
// begin YouLost ( Delay ) ;
15321: LD_STRING Delay
15323: PPUSH
15324: CALL_OW 104
// exit ;
15328: GO 15417
// end ; end ; display_strings := [ ] ;
15330: LD_ADDR_OWVAR 47
15334: PUSH
15335: EMPTY
15336: ST_TO_ADDR
// allowedToAttackOmicron := true ;
15337: LD_ADDR_EXP 13
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// canCaptureKirovVehs := true ;
15345: LD_ADDR_EXP 22
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// retreatToKirovAllowed := false ;
15353: LD_ADDR_EXP 24
15357: PUSH
15358: LD_INT 0
15360: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
15361: LD_INT 16
15363: PPUSH
15364: LD_INT 0
15366: PPUSH
15367: CALL_OW 424
// DialogueOn ;
15371: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
15375: LD_EXP 26
15379: PPUSH
15380: LD_STRING D7-Bur-1
15382: PPUSH
15383: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
15387: LD_EXP 30
15391: PPUSH
15392: LD_STRING D7-Kur-1
15394: PPUSH
15395: CALL_OW 94
// DialogueOff ;
15399: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
15403: LD_STRING M5a
15405: PPUSH
15406: CALL_OW 337
// Query ( QRefuel ) ;
15410: LD_STRING QRefuel
15412: PPUSH
15413: CALL_OW 97
// end ;
15417: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
15418: LD_EXP 24
15422: NOT
15423: IFFALSE 15511
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 91
15438: PUSH
15439: LD_EXP 42
15443: PUSH
15444: LD_INT 16
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 21
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 58
15470: PUSH
15471: EMPTY
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 3
15485: PUSH
15486: LD_INT 21
15488: PUSH
15489: LD_INT 3
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: AND
15511: IFFALSE 15662
15513: GO 15515
15515: DISABLE
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_INT 22
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 91
15537: PUSH
15538: LD_EXP 42
15542: PUSH
15543: LD_INT 16
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 3
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: LD_INT 21
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 58
15569: PUSH
15570: EMPTY
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 3
15584: PUSH
15585: LD_INT 21
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
15610: LD_VAR 0 2
15614: PPUSH
15615: CALL_OW 87
// InGameOn ;
15619: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
15623: LD_VAR 0 2
15627: PPUSH
15628: LD_INT 70
15630: PPUSH
15631: LD_INT 33
15633: PPUSH
15634: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
15638: LD_EXP 30
15642: PPUSH
15643: LD_STRING D12-Kur-1
15645: PPUSH
15646: CALL_OW 94
// InGameOff ;
15650: CALL_OW 9
// wait ( 0 0$2 ) ;
15654: LD_INT 70
15656: PPUSH
15657: CALL_OW 67
// enable ;
15661: ENABLE
// end ; end_of_file
15662: PPOPN 2
15664: END
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
15665: LD_EXP 8
15669: NOT
15670: IFFALSE 15697
15672: GO 15674
15674: DISABLE
// begin enable ;
15675: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
15676: LD_INT 1
15678: PPUSH
15679: LD_INT 5
15681: PPUSH
15682: CALL_OW 12
15686: PPUSH
15687: LD_INT 13
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 55
// end ; end_of_file
15697: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
// if exist_mode then
15702: LD_VAR 0 2
15706: IFFALSE 15752
// begin unit := CreateCharacter ( prefix & ident ) ;
15708: LD_ADDR_VAR 0 5
15712: PUSH
15713: LD_VAR 0 3
15717: PUSH
15718: LD_VAR 0 1
15722: STR
15723: PPUSH
15724: CALL_OW 34
15728: ST_TO_ADDR
// if unit then
15729: LD_VAR 0 5
15733: IFFALSE 15750
// DeleteCharacters ( prefix & ident ) ;
15735: LD_VAR 0 3
15739: PUSH
15740: LD_VAR 0 1
15744: STR
15745: PPUSH
15746: CALL_OW 40
// end else
15750: GO 15767
// unit := NewCharacter ( ident ) ;
15752: LD_ADDR_VAR 0 5
15756: PUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 25
15766: ST_TO_ADDR
// result := unit ;
15767: LD_ADDR_VAR 0 4
15771: PUSH
15772: LD_VAR 0 5
15776: ST_TO_ADDR
// end ;
15777: LD_VAR 0 4
15781: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
// if exist_mode then
15786: LD_VAR 0 2
15790: IFFALSE 15815
// unit := CreateCharacter ( prefix & ident ) else
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 3
15801: PUSH
15802: LD_VAR 0 1
15806: STR
15807: PPUSH
15808: CALL_OW 34
15812: ST_TO_ADDR
15813: GO 15830
// unit := NewCharacter ( ident ) ;
15815: LD_ADDR_VAR 0 5
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 25
15829: ST_TO_ADDR
// result := unit ;
15830: LD_ADDR_VAR 0 4
15834: PUSH
15835: LD_VAR 0 5
15839: ST_TO_ADDR
// end ;
15840: LD_VAR 0 4
15844: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15845: LD_INT 0
15847: PPUSH
15848: PPUSH
// if not side or not nation then
15849: LD_VAR 0 1
15853: NOT
15854: IFTRUE 15863
15856: PUSH
15857: LD_VAR 0 2
15861: NOT
15862: OR
15863: IFFALSE 15867
// exit ;
15865: GO 16661
// case nation of nation_american :
15867: LD_VAR 0 2
15871: PUSH
15872: LD_INT 1
15874: DOUBLE
15875: EQUAL
15876: IFTRUE 15880
15878: GO 16102
15880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15881: LD_ADDR_VAR 0 4
15885: PUSH
15886: LD_INT 35
15888: PUSH
15889: LD_INT 45
15891: PUSH
15892: LD_INT 46
15894: PUSH
15895: LD_INT 47
15897: PUSH
15898: LD_INT 82
15900: PUSH
15901: LD_INT 83
15903: PUSH
15904: LD_INT 84
15906: PUSH
15907: LD_INT 85
15909: PUSH
15910: LD_INT 86
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: LD_INT 6
15921: PUSH
15922: LD_INT 15
15924: PUSH
15925: LD_INT 16
15927: PUSH
15928: LD_INT 7
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: LD_INT 13
15936: PUSH
15937: LD_INT 10
15939: PUSH
15940: LD_INT 14
15942: PUSH
15943: LD_INT 20
15945: PUSH
15946: LD_INT 21
15948: PUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 25
15954: PUSH
15955: LD_INT 32
15957: PUSH
15958: LD_INT 27
15960: PUSH
15961: LD_INT 36
15963: PUSH
15964: LD_INT 69
15966: PUSH
15967: LD_INT 39
15969: PUSH
15970: LD_INT 34
15972: PUSH
15973: LD_INT 40
15975: PUSH
15976: LD_INT 48
15978: PUSH
15979: LD_INT 49
15981: PUSH
15982: LD_INT 50
15984: PUSH
15985: LD_INT 51
15987: PUSH
15988: LD_INT 52
15990: PUSH
15991: LD_INT 53
15993: PUSH
15994: LD_INT 54
15996: PUSH
15997: LD_INT 55
15999: PUSH
16000: LD_INT 56
16002: PUSH
16003: LD_INT 57
16005: PUSH
16006: LD_INT 58
16008: PUSH
16009: LD_INT 59
16011: PUSH
16012: LD_INT 60
16014: PUSH
16015: LD_INT 61
16017: PUSH
16018: LD_INT 62
16020: PUSH
16021: LD_INT 80
16023: PUSH
16024: LD_INT 82
16026: PUSH
16027: LD_INT 83
16029: PUSH
16030: LD_INT 84
16032: PUSH
16033: LD_INT 85
16035: PUSH
16036: LD_INT 86
16038: PUSH
16039: LD_INT 90
16041: PUSH
16042: LD_INT 93
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: ST_TO_ADDR
16100: GO 16583
16102: LD_INT 2
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16344
16110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16111: LD_ADDR_VAR 0 4
16115: PUSH
16116: LD_INT 35
16118: PUSH
16119: LD_INT 45
16121: PUSH
16122: LD_INT 46
16124: PUSH
16125: LD_INT 47
16127: PUSH
16128: LD_INT 82
16130: PUSH
16131: LD_INT 83
16133: PUSH
16134: LD_INT 84
16136: PUSH
16137: LD_INT 85
16139: PUSH
16140: LD_INT 87
16142: PUSH
16143: LD_INT 70
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: LD_INT 11
16151: PUSH
16152: LD_INT 3
16154: PUSH
16155: LD_INT 4
16157: PUSH
16158: LD_INT 5
16160: PUSH
16161: LD_INT 6
16163: PUSH
16164: LD_INT 15
16166: PUSH
16167: LD_INT 18
16169: PUSH
16170: LD_INT 7
16172: PUSH
16173: LD_INT 17
16175: PUSH
16176: LD_INT 8
16178: PUSH
16179: LD_INT 20
16181: PUSH
16182: LD_INT 21
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 72
16190: PUSH
16191: LD_INT 26
16193: PUSH
16194: LD_INT 69
16196: PUSH
16197: LD_INT 39
16199: PUSH
16200: LD_INT 40
16202: PUSH
16203: LD_INT 41
16205: PUSH
16206: LD_INT 42
16208: PUSH
16209: LD_INT 43
16211: PUSH
16212: LD_INT 48
16214: PUSH
16215: LD_INT 49
16217: PUSH
16218: LD_INT 50
16220: PUSH
16221: LD_INT 51
16223: PUSH
16224: LD_INT 52
16226: PUSH
16227: LD_INT 53
16229: PUSH
16230: LD_INT 54
16232: PUSH
16233: LD_INT 55
16235: PUSH
16236: LD_INT 56
16238: PUSH
16239: LD_INT 60
16241: PUSH
16242: LD_INT 61
16244: PUSH
16245: LD_INT 62
16247: PUSH
16248: LD_INT 66
16250: PUSH
16251: LD_INT 67
16253: PUSH
16254: LD_INT 68
16256: PUSH
16257: LD_INT 81
16259: PUSH
16260: LD_INT 82
16262: PUSH
16263: LD_INT 83
16265: PUSH
16266: LD_INT 84
16268: PUSH
16269: LD_INT 85
16271: PUSH
16272: LD_INT 87
16274: PUSH
16275: LD_INT 88
16277: PUSH
16278: LD_INT 92
16280: PUSH
16281: LD_INT 94
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
16342: GO 16583
16344: LD_INT 3
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16582
16352: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16353: LD_ADDR_VAR 0 4
16357: PUSH
16358: LD_INT 46
16360: PUSH
16361: LD_INT 47
16363: PUSH
16364: LD_INT 1
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 82
16372: PUSH
16373: LD_INT 83
16375: PUSH
16376: LD_INT 84
16378: PUSH
16379: LD_INT 85
16381: PUSH
16382: LD_INT 86
16384: PUSH
16385: LD_INT 11
16387: PUSH
16388: LD_INT 9
16390: PUSH
16391: LD_INT 20
16393: PUSH
16394: LD_INT 19
16396: PUSH
16397: LD_INT 21
16399: PUSH
16400: LD_INT 24
16402: PUSH
16403: LD_INT 22
16405: PUSH
16406: LD_INT 25
16408: PUSH
16409: LD_INT 28
16411: PUSH
16412: LD_INT 29
16414: PUSH
16415: LD_INT 30
16417: PUSH
16418: LD_INT 31
16420: PUSH
16421: LD_INT 37
16423: PUSH
16424: LD_INT 38
16426: PUSH
16427: LD_INT 32
16429: PUSH
16430: LD_INT 27
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 69
16438: PUSH
16439: LD_INT 39
16441: PUSH
16442: LD_INT 34
16444: PUSH
16445: LD_INT 40
16447: PUSH
16448: LD_INT 71
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 44
16456: PUSH
16457: LD_INT 48
16459: PUSH
16460: LD_INT 49
16462: PUSH
16463: LD_INT 50
16465: PUSH
16466: LD_INT 51
16468: PUSH
16469: LD_INT 52
16471: PUSH
16472: LD_INT 53
16474: PUSH
16475: LD_INT 54
16477: PUSH
16478: LD_INT 55
16480: PUSH
16481: LD_INT 56
16483: PUSH
16484: LD_INT 57
16486: PUSH
16487: LD_INT 58
16489: PUSH
16490: LD_INT 59
16492: PUSH
16493: LD_INT 63
16495: PUSH
16496: LD_INT 64
16498: PUSH
16499: LD_INT 65
16501: PUSH
16502: LD_INT 82
16504: PUSH
16505: LD_INT 83
16507: PUSH
16508: LD_INT 84
16510: PUSH
16511: LD_INT 85
16513: PUSH
16514: LD_INT 86
16516: PUSH
16517: LD_INT 89
16519: PUSH
16520: LD_INT 91
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: ST_TO_ADDR
16580: GO 16583
16582: POP
// if state > - 1 and state < 3 then
16583: LD_VAR 0 3
16587: PUSH
16588: LD_INT 1
16590: NEG
16591: GREATER
16592: IFFALSE 16604
16594: PUSH
16595: LD_VAR 0 3
16599: PUSH
16600: LD_INT 3
16602: LESS
16603: AND
16604: IFFALSE 16661
// for i in result do
16606: LD_ADDR_VAR 0 5
16610: PUSH
16611: LD_VAR 0 4
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16659
// if GetTech ( i , side ) <> state then
16619: LD_VAR 0 5
16623: PPUSH
16624: LD_VAR 0 1
16628: PPUSH
16629: CALL_OW 321
16633: PUSH
16634: LD_VAR 0 3
16638: NONEQUAL
16639: IFFALSE 16657
// result := result diff i ;
16641: LD_ADDR_VAR 0 4
16645: PUSH
16646: LD_VAR 0 4
16650: PUSH
16651: LD_VAR 0 5
16655: DIFF
16656: ST_TO_ADDR
16657: GO 16616
16659: POP
16660: POP
// end ;
16661: LD_VAR 0 4
16665: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16666: LD_INT 0
16668: PPUSH
16669: PPUSH
16670: PPUSH
// result := true ;
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16679: LD_ADDR_VAR 0 5
16683: PUSH
16684: LD_VAR 0 2
16688: PPUSH
16689: CALL_OW 480
16693: ST_TO_ADDR
// if not tmp then
16694: LD_VAR 0 5
16698: NOT
16699: IFFALSE 16703
// exit ;
16701: GO 16752
// for i in tmp do
16703: LD_ADDR_VAR 0 4
16707: PUSH
16708: LD_VAR 0 5
16712: PUSH
16713: FOR_IN
16714: IFFALSE 16750
// if GetTech ( i , side ) <> state_researched then
16716: LD_VAR 0 4
16720: PPUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 321
16730: PUSH
16731: LD_INT 2
16733: NONEQUAL
16734: IFFALSE 16748
// begin result := false ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// exit ;
16744: POP
16745: POP
16746: GO 16752
// end ;
16748: GO 16713
16750: POP
16751: POP
// end ;
16752: LD_VAR 0 3
16756: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16757: LD_INT 0
16759: PPUSH
16760: PPUSH
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
16768: PPUSH
16769: PPUSH
16770: PPUSH
16771: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16772: LD_VAR 0 1
16776: NOT
16777: IFTRUE 16794
16779: PUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 257
16789: PUSH
16790: LD_INT 9
16792: NONEQUAL
16793: OR
16794: IFFALSE 16798
// exit ;
16796: GO 17377
// side := GetSide ( unit ) ;
16798: LD_ADDR_VAR 0 9
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 255
16812: ST_TO_ADDR
// tech_space := tech_spacanom ;
16813: LD_ADDR_VAR 0 12
16817: PUSH
16818: LD_INT 29
16820: ST_TO_ADDR
// tech_time := tech_taurad ;
16821: LD_ADDR_VAR 0 13
16825: PUSH
16826: LD_INT 28
16828: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16829: LD_ADDR_VAR 0 11
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 310
16843: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16844: LD_VAR 0 11
16848: PPUSH
16849: CALL_OW 247
16853: PUSH
16854: LD_INT 2
16856: EQUAL
16857: IFFALSE 16861
// exit ;
16859: GO 17377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16861: LD_ADDR_VAR 0 8
16865: PUSH
16866: LD_INT 81
16868: PUSH
16869: LD_VAR 0 9
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 3
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 69
16903: ST_TO_ADDR
// if not tmp then
16904: LD_VAR 0 8
16908: NOT
16909: IFFALSE 16913
// exit ;
16911: GO 17377
// if in_unit then
16913: LD_VAR 0 11
16917: IFFALSE 16941
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16919: LD_ADDR_VAR 0 10
16923: PUSH
16924: LD_VAR 0 8
16928: PPUSH
16929: LD_VAR 0 11
16933: PPUSH
16934: CALL_OW 74
16938: ST_TO_ADDR
16939: GO 16961
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16941: LD_ADDR_VAR 0 10
16945: PUSH
16946: LD_VAR 0 8
16950: PPUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 74
16960: ST_TO_ADDR
// if not enemy then
16961: LD_VAR 0 10
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 17377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16970: LD_VAR 0 11
16974: IFFALSE 16996
16976: PUSH
16977: LD_VAR 0 11
16981: PPUSH
16982: LD_VAR 0 10
16986: PPUSH
16987: CALL_OW 296
16991: PUSH
16992: LD_INT 13
16994: GREATER
16995: AND
16996: IFTRUE 17018
16998: PUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: LD_VAR 0 10
17008: PPUSH
17009: CALL_OW 296
17013: PUSH
17014: LD_INT 12
17016: GREATER
17017: OR
17018: IFFALSE 17022
// exit ;
17020: GO 17377
// missile := [ 1 ] ;
17022: LD_ADDR_VAR 0 14
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: EMPTY
17031: LIST
17032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17033: LD_VAR 0 9
17037: PPUSH
17038: LD_VAR 0 12
17042: PPUSH
17043: CALL_OW 325
17047: IFFALSE 17076
// missile := Replace ( missile , missile + 1 , 2 ) ;
17049: LD_ADDR_VAR 0 14
17053: PUSH
17054: LD_VAR 0 14
17058: PPUSH
17059: LD_VAR 0 14
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: PPUSH
17068: LD_INT 2
17070: PPUSH
17071: CALL_OW 1
17075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17076: LD_VAR 0 9
17080: PPUSH
17081: LD_VAR 0 13
17085: PPUSH
17086: CALL_OW 325
17090: IFFALSE 17114
17092: PUSH
17093: LD_VAR 0 10
17097: PPUSH
17098: CALL_OW 255
17102: PPUSH
17103: LD_VAR 0 13
17107: PPUSH
17108: CALL_OW 325
17112: NOT
17113: AND
17114: IFFALSE 17143
// missile := Replace ( missile , missile + 1 , 3 ) ;
17116: LD_ADDR_VAR 0 14
17120: PUSH
17121: LD_VAR 0 14
17125: PPUSH
17126: LD_VAR 0 14
17130: PUSH
17131: LD_INT 1
17133: PLUS
17134: PPUSH
17135: LD_INT 3
17137: PPUSH
17138: CALL_OW 1
17142: ST_TO_ADDR
// if missile < 2 then
17143: LD_VAR 0 14
17147: PUSH
17148: LD_INT 2
17150: LESS
17151: IFFALSE 17155
// exit ;
17153: GO 17377
// x := GetX ( enemy ) ;
17155: LD_ADDR_VAR 0 4
17159: PUSH
17160: LD_VAR 0 10
17164: PPUSH
17165: CALL_OW 250
17169: ST_TO_ADDR
// y := GetY ( enemy ) ;
17170: LD_ADDR_VAR 0 5
17174: PUSH
17175: LD_VAR 0 10
17179: PPUSH
17180: CALL_OW 251
17184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17185: LD_ADDR_VAR 0 6
17189: PUSH
17190: LD_VAR 0 4
17194: PUSH
17195: LD_INT 1
17197: NEG
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: CALL_OW 12
17206: PLUS
17207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17208: LD_ADDR_VAR 0 7
17212: PUSH
17213: LD_VAR 0 5
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: CALL_OW 12
17229: PLUS
17230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17231: LD_VAR 0 6
17235: PPUSH
17236: LD_VAR 0 7
17240: PPUSH
17241: CALL_OW 488
17245: NOT
17246: IFFALSE 17268
// begin _x := x ;
17248: LD_ADDR_VAR 0 6
17252: PUSH
17253: LD_VAR 0 4
17257: ST_TO_ADDR
// _y := y ;
17258: LD_ADDR_VAR 0 7
17262: PUSH
17263: LD_VAR 0 5
17267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_INT 1
17275: PPUSH
17276: LD_VAR 0 14
17280: PPUSH
17281: CALL_OW 12
17285: ST_TO_ADDR
// case i of 1 :
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: DOUBLE
17294: EQUAL
17295: IFTRUE 17299
17297: GO 17316
17299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17300: LD_VAR 0 1
17304: PPUSH
17305: LD_VAR 0 10
17309: PPUSH
17310: CALL_OW 115
17314: GO 17377
17316: LD_INT 2
17318: DOUBLE
17319: EQUAL
17320: IFTRUE 17324
17322: GO 17346
17324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17325: LD_VAR 0 1
17329: PPUSH
17330: LD_VAR 0 6
17334: PPUSH
17335: LD_VAR 0 7
17339: PPUSH
17340: CALL_OW 153
17344: GO 17377
17346: LD_INT 3
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 17376
17354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_VAR 0 6
17364: PPUSH
17365: LD_VAR 0 7
17369: PPUSH
17370: CALL_OW 154
17374: GO 17377
17376: POP
// end ;
17377: LD_VAR 0 2
17381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
// if not unit or not building then
17390: LD_VAR 0 1
17394: NOT
17395: IFTRUE 17404
17397: PUSH
17398: LD_VAR 0 2
17402: NOT
17403: OR
17404: IFFALSE 17408
// exit ;
17406: GO 17566
// x := GetX ( building ) ;
17408: LD_ADDR_VAR 0 5
17412: PUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: CALL_OW 250
17422: ST_TO_ADDR
// y := GetY ( building ) ;
17423: LD_ADDR_VAR 0 6
17427: PUSH
17428: LD_VAR 0 2
17432: PPUSH
17433: CALL_OW 251
17437: ST_TO_ADDR
// for i := 0 to 5 do
17438: LD_ADDR_VAR 0 4
17442: PUSH
17443: DOUBLE
17444: LD_INT 0
17446: DEC
17447: ST_TO_ADDR
17448: LD_INT 5
17450: PUSH
17451: FOR_TO
17452: IFFALSE 17564
// begin _x := ShiftX ( x , i , 3 ) ;
17454: LD_ADDR_VAR 0 7
17458: PUSH
17459: LD_VAR 0 5
17463: PPUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_INT 3
17471: PPUSH
17472: CALL_OW 272
17476: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: LD_VAR 0 6
17486: PPUSH
17487: LD_VAR 0 4
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: CALL_OW 273
17499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17500: LD_VAR 0 7
17504: PPUSH
17505: LD_VAR 0 8
17509: PPUSH
17510: CALL_OW 488
17514: NOT
17515: IFFALSE 17519
// continue ;
17517: GO 17451
// if HexInfo ( _x , _y ) = 0 then
17519: LD_VAR 0 7
17523: PPUSH
17524: LD_VAR 0 8
17528: PPUSH
17529: CALL_OW 428
17533: PUSH
17534: LD_INT 0
17536: EQUAL
17537: IFFALSE 17562
// begin ComMoveXY ( unit , _x , _y ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_VAR 0 7
17548: PPUSH
17549: LD_VAR 0 8
17553: PPUSH
17554: CALL_OW 111
// exit ;
17558: POP
17559: POP
17560: GO 17566
// end ; end ;
17562: GO 17451
17564: POP
17565: POP
// end ;
17566: LD_VAR 0 3
17570: RET
// export function ScanBase ( side , base_area ) ; begin
17571: LD_INT 0
17573: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: LD_VAR 0 2
17583: PPUSH
17584: LD_INT 81
17586: PUSH
17587: LD_VAR 0 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 70
17600: ST_TO_ADDR
// end ;
17601: LD_VAR 0 3
17605: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17606: LD_INT 0
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
// result := false ;
17612: LD_ADDR_VAR 0 2
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// side := GetSide ( unit ) ;
17620: LD_ADDR_VAR 0 3
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 255
17634: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 248
17649: ST_TO_ADDR
// case nat of 1 :
17650: LD_VAR 0 4
17654: PUSH
17655: LD_INT 1
17657: DOUBLE
17658: EQUAL
17659: IFTRUE 17663
17661: GO 17674
17663: POP
// tech := tech_lassight ; 2 :
17664: LD_ADDR_VAR 0 5
17668: PUSH
17669: LD_INT 12
17671: ST_TO_ADDR
17672: GO 17713
17674: LD_INT 2
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17693
17682: POP
// tech := tech_mortar ; 3 :
17683: LD_ADDR_VAR 0 5
17687: PUSH
17688: LD_INT 41
17690: ST_TO_ADDR
17691: GO 17713
17693: LD_INT 3
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17712
17701: POP
// tech := tech_bazooka ; end ;
17702: LD_ADDR_VAR 0 5
17706: PUSH
17707: LD_INT 44
17709: ST_TO_ADDR
17710: GO 17713
17712: POP
// if Researched ( side , tech ) then
17713: LD_VAR 0 3
17717: PPUSH
17718: LD_VAR 0 5
17722: PPUSH
17723: CALL_OW 325
17727: IFFALSE 17754
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 5
17736: PUSH
17737: LD_INT 8
17739: PUSH
17740: LD_INT 9
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: PUSH
17748: LD_VAR 0 4
17752: ARRAY
17753: ST_TO_ADDR
// end ;
17754: LD_VAR 0 2
17758: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17759: LD_INT 0
17761: PPUSH
17762: PPUSH
17763: PPUSH
// if not mines then
17764: LD_VAR 0 2
17768: NOT
17769: IFFALSE 17773
// exit ;
17771: GO 17917
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17773: LD_ADDR_VAR 0 5
17777: PUSH
17778: LD_INT 81
17780: PUSH
17781: LD_VAR 0 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 3
17792: PUSH
17793: LD_INT 21
17795: PUSH
17796: LD_INT 3
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 69
17815: ST_TO_ADDR
// for i in mines do
17816: LD_ADDR_VAR 0 4
17820: PUSH
17821: LD_VAR 0 2
17825: PUSH
17826: FOR_IN
17827: IFFALSE 17915
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17829: LD_VAR 0 4
17833: PUSH
17834: LD_INT 1
17836: ARRAY
17837: PPUSH
17838: LD_VAR 0 4
17842: PUSH
17843: LD_INT 2
17845: ARRAY
17846: PPUSH
17847: CALL_OW 458
17851: NOT
17852: IFFALSE 17856
// continue ;
17854: GO 17826
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17856: LD_VAR 0 4
17860: PUSH
17861: LD_INT 1
17863: ARRAY
17864: PPUSH
17865: LD_VAR 0 4
17869: PUSH
17870: LD_INT 2
17872: ARRAY
17873: PPUSH
17874: CALL_OW 428
17878: PUSH
17879: LD_VAR 0 5
17883: IN
17884: IFFALSE 17913
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17886: LD_VAR 0 4
17890: PUSH
17891: LD_INT 1
17893: ARRAY
17894: PPUSH
17895: LD_VAR 0 4
17899: PUSH
17900: LD_INT 2
17902: ARRAY
17903: PPUSH
17904: LD_VAR 0 1
17908: PPUSH
17909: CALL_OW 456
// end ;
17913: GO 17826
17915: POP
17916: POP
// end ;
17917: LD_VAR 0 3
17921: RET
// export function Count ( array ) ; begin
17922: LD_INT 0
17924: PPUSH
// result := array + 0 ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_VAR 0 1
17934: PUSH
17935: LD_INT 0
17937: PLUS
17938: ST_TO_ADDR
// end ;
17939: LD_VAR 0 2
17943: RET
// export function IsEmpty ( building ) ; begin
17944: LD_INT 0
17946: PPUSH
// if not building then
17947: LD_VAR 0 1
17951: NOT
17952: IFFALSE 17956
// exit ;
17954: GO 17999
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17956: LD_ADDR_VAR 0 2
17960: PUSH
17961: LD_VAR 0 1
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 255
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 58
17985: PUSH
17986: EMPTY
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: IN
17998: ST_TO_ADDR
// end ;
17999: LD_VAR 0 2
18003: RET
// export function IsNotFull ( building ) ; var places ; begin
18004: LD_INT 0
18006: PPUSH
18007: PPUSH
// if not building then
18008: LD_VAR 0 1
18012: NOT
18013: IFFALSE 18017
// exit ;
18015: GO 18045
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 62
18032: PUSH
18033: EMPTY
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 72
18044: ST_TO_ADDR
// end ;
18045: LD_VAR 0 2
18049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18050: LD_INT 0
18052: PPUSH
18053: PPUSH
18054: PPUSH
18055: PPUSH
// tmp := [ ] ;
18056: LD_ADDR_VAR 0 3
18060: PUSH
18061: EMPTY
18062: ST_TO_ADDR
// list := [ ] ;
18063: LD_ADDR_VAR 0 5
18067: PUSH
18068: EMPTY
18069: ST_TO_ADDR
// for i = 16 to 25 do
18070: LD_ADDR_VAR 0 4
18074: PUSH
18075: DOUBLE
18076: LD_INT 16
18078: DEC
18079: ST_TO_ADDR
18080: LD_INT 25
18082: PUSH
18083: FOR_TO
18084: IFFALSE 18157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18086: LD_ADDR_VAR 0 3
18090: PUSH
18091: LD_VAR 0 3
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 255
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 91
18115: PUSH
18116: LD_VAR 0 1
18120: PUSH
18121: LD_INT 6
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 30
18131: PUSH
18132: LD_VAR 0 4
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ADD
18154: ST_TO_ADDR
18155: GO 18083
18157: POP
18158: POP
// for i = 1 to tmp do
18159: LD_ADDR_VAR 0 4
18163: PUSH
18164: DOUBLE
18165: LD_INT 1
18167: DEC
18168: ST_TO_ADDR
18169: LD_VAR 0 3
18173: PUSH
18174: FOR_TO
18175: IFFALSE 18263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18177: LD_ADDR_VAR 0 5
18181: PUSH
18182: LD_VAR 0 5
18186: PUSH
18187: LD_VAR 0 3
18191: PUSH
18192: LD_VAR 0 4
18196: ARRAY
18197: PPUSH
18198: CALL_OW 266
18202: PUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_VAR 0 4
18212: ARRAY
18213: PPUSH
18214: CALL_OW 250
18218: PUSH
18219: LD_VAR 0 3
18223: PUSH
18224: LD_VAR 0 4
18228: ARRAY
18229: PPUSH
18230: CALL_OW 251
18234: PUSH
18235: LD_VAR 0 3
18239: PUSH
18240: LD_VAR 0 4
18244: ARRAY
18245: PPUSH
18246: CALL_OW 254
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: ADD
18260: ST_TO_ADDR
18261: GO 18174
18263: POP
18264: POP
// result := list ;
18265: LD_ADDR_VAR 0 2
18269: PUSH
18270: LD_VAR 0 5
18274: ST_TO_ADDR
// end ;
18275: LD_VAR 0 2
18279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
18288: PPUSH
// if not factory then
18289: LD_VAR 0 1
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18901
// if control = control_apeman then
18298: LD_VAR 0 4
18302: PUSH
18303: LD_INT 5
18305: EQUAL
18306: IFFALSE 18415
// begin tmp := UnitsInside ( factory ) ;
18308: LD_ADDR_VAR 0 8
18312: PUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 313
18322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18323: LD_VAR 0 8
18327: PPUSH
18328: LD_INT 25
18330: PUSH
18331: LD_INT 12
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PPUSH
18338: CALL_OW 72
18342: NOT
18343: IFFALSE 18353
// control := control_manual ;
18345: LD_ADDR_VAR 0 4
18349: PUSH
18350: LD_INT 1
18352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18353: LD_ADDR_VAR 0 8
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL 18050 0 1
18367: ST_TO_ADDR
// if tmp then
18368: LD_VAR 0 8
18372: IFFALSE 18415
// begin for i in tmp do
18374: LD_ADDR_VAR 0 7
18378: PUSH
18379: LD_VAR 0 8
18383: PUSH
18384: FOR_IN
18385: IFFALSE 18413
// if i [ 1 ] = b_ext_radio then
18387: LD_VAR 0 7
18391: PUSH
18392: LD_INT 1
18394: ARRAY
18395: PUSH
18396: LD_INT 22
18398: EQUAL
18399: IFFALSE 18411
// begin control := control_remote ;
18401: LD_ADDR_VAR 0 4
18405: PUSH
18406: LD_INT 2
18408: ST_TO_ADDR
// break ;
18409: GO 18413
// end ;
18411: GO 18384
18413: POP
18414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18415: LD_VAR 0 1
18419: PPUSH
18420: LD_VAR 0 2
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_VAR 0 4
18434: PPUSH
18435: LD_VAR 0 5
18439: PPUSH
18440: CALL_OW 448
18444: IFFALSE 18479
// begin result := [ chassis , engine , control , weapon ] ;
18446: LD_ADDR_VAR 0 6
18450: PUSH
18451: LD_VAR 0 2
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_VAR 0 4
18465: PUSH
18466: LD_VAR 0 5
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: ST_TO_ADDR
// exit ;
18477: GO 18901
// end ; _chassis := AvailableChassisList ( factory ) ;
18479: LD_ADDR_VAR 0 9
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 475
18493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18494: LD_ADDR_VAR 0 11
18498: PUSH
18499: LD_VAR 0 1
18503: PPUSH
18504: CALL_OW 476
18508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18509: LD_ADDR_VAR 0 12
18513: PUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 477
18523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18524: LD_ADDR_VAR 0 10
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 478
18538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18539: LD_VAR 0 9
18543: NOT
18544: IFTRUE 18553
18546: PUSH
18547: LD_VAR 0 11
18551: NOT
18552: OR
18553: IFTRUE 18562
18555: PUSH
18556: LD_VAR 0 12
18560: NOT
18561: OR
18562: IFTRUE 18571
18564: PUSH
18565: LD_VAR 0 10
18569: NOT
18570: OR
18571: IFFALSE 18606
// begin result := [ chassis , engine , control , weapon ] ;
18573: LD_ADDR_VAR 0 6
18577: PUSH
18578: LD_VAR 0 2
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: LD_VAR 0 4
18592: PUSH
18593: LD_VAR 0 5
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: ST_TO_ADDR
// exit ;
18604: GO 18901
// end ; if not chassis in _chassis then
18606: LD_VAR 0 2
18610: PUSH
18611: LD_VAR 0 9
18615: IN
18616: NOT
18617: IFFALSE 18643
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_VAR 0 9
18628: PUSH
18629: LD_INT 1
18631: PPUSH
18632: LD_VAR 0 9
18636: PPUSH
18637: CALL_OW 12
18641: ARRAY
18642: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18643: LD_VAR 0 2
18647: PPUSH
18648: LD_VAR 0 3
18652: PPUSH
18653: CALL 18906 0 2
18657: NOT
18658: IFFALSE 18719
// repeat engine := _engine [ 1 ] ;
18660: LD_ADDR_VAR 0 3
18664: PUSH
18665: LD_VAR 0 11
18669: PUSH
18670: LD_INT 1
18672: ARRAY
18673: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18674: LD_ADDR_VAR 0 11
18678: PUSH
18679: LD_VAR 0 11
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 3
18691: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18692: LD_VAR 0 2
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL 18906 0 2
18706: IFTRUE 18717
18708: PUSH
18709: LD_VAR 0 11
18713: PUSH
18714: EMPTY
18715: EQUAL
18716: OR
18717: IFFALSE 18660
// if not control in _control then
18719: LD_VAR 0 4
18723: PUSH
18724: LD_VAR 0 12
18728: IN
18729: NOT
18730: IFFALSE 18756
// control := _control [ rand ( 1 , _control ) ] ;
18732: LD_ADDR_VAR 0 4
18736: PUSH
18737: LD_VAR 0 12
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: LD_VAR 0 12
18749: PPUSH
18750: CALL_OW 12
18754: ARRAY
18755: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18756: LD_VAR 0 2
18760: PPUSH
18761: LD_VAR 0 5
18765: PPUSH
18766: CALL 19128 0 2
18770: NOT
18771: IFFALSE 18832
// repeat weapon := _weapon [ 1 ] ;
18773: LD_ADDR_VAR 0 5
18777: PUSH
18778: LD_VAR 0 10
18782: PUSH
18783: LD_INT 1
18785: ARRAY
18786: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18787: LD_ADDR_VAR 0 10
18791: PUSH
18792: LD_VAR 0 10
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 3
18804: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18805: LD_VAR 0 2
18809: PPUSH
18810: LD_VAR 0 5
18814: PPUSH
18815: CALL 19128 0 2
18819: IFTRUE 18830
18821: PUSH
18822: LD_VAR 0 10
18826: PUSH
18827: EMPTY
18828: EQUAL
18829: OR
18830: IFFALSE 18773
// result := [ ] ;
18832: LD_ADDR_VAR 0 6
18836: PUSH
18837: EMPTY
18838: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_VAR 0 4
18858: PPUSH
18859: LD_VAR 0 5
18863: PPUSH
18864: CALL_OW 448
18868: IFFALSE 18901
// result := [ chassis , engine , control , weapon ] ;
18870: LD_ADDR_VAR 0 6
18874: PUSH
18875: LD_VAR 0 2
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 4
18889: PUSH
18890: LD_VAR 0 5
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// end ;
18901: LD_VAR 0 6
18905: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18906: LD_INT 0
18908: PPUSH
// if not chassis or not engine then
18909: LD_VAR 0 1
18913: NOT
18914: IFTRUE 18923
18916: PUSH
18917: LD_VAR 0 2
18921: NOT
18922: OR
18923: IFFALSE 18927
// exit ;
18925: GO 19123
// case engine of engine_solar :
18927: LD_VAR 0 2
18931: PUSH
18932: LD_INT 2
18934: DOUBLE
18935: EQUAL
18936: IFTRUE 18940
18938: GO 18978
18940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18941: LD_ADDR_VAR 0 3
18945: PUSH
18946: LD_INT 11
18948: PUSH
18949: LD_INT 12
18951: PUSH
18952: LD_INT 13
18954: PUSH
18955: LD_INT 14
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 3
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: ST_TO_ADDR
18976: GO 19107
18978: LD_INT 1
18980: DOUBLE
18981: EQUAL
18982: IFTRUE 18986
18984: GO 19048
18986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18987: LD_ADDR_VAR 0 3
18991: PUSH
18992: LD_INT 11
18994: PUSH
18995: LD_INT 12
18997: PUSH
18998: LD_INT 13
19000: PUSH
19001: LD_INT 14
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 23
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 19107
19048: LD_INT 3
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19106
19056: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19057: LD_ADDR_VAR 0 3
19061: PUSH
19062: LD_INT 13
19064: PUSH
19065: LD_INT 14
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_INT 23
19088: PUSH
19089: LD_INT 24
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: ST_TO_ADDR
19104: GO 19107
19106: POP
// result := ( chassis in result ) ;
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_VAR 0 1
19116: PUSH
19117: LD_VAR 0 3
19121: IN
19122: ST_TO_ADDR
// end ;
19123: LD_VAR 0 3
19127: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19128: LD_INT 0
19130: PPUSH
// if not chassis or not weapon then
19131: LD_VAR 0 1
19135: NOT
19136: IFTRUE 19145
19138: PUSH
19139: LD_VAR 0 2
19143: NOT
19144: OR
19145: IFFALSE 19149
// exit ;
19147: GO 20243
// case weapon of us_machine_gun :
19149: LD_VAR 0 2
19153: PUSH
19154: LD_INT 2
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19192
19162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19163: LD_ADDR_VAR 0 3
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: LD_INT 3
19176: PUSH
19177: LD_INT 4
19179: PUSH
19180: LD_INT 5
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: ST_TO_ADDR
19190: GO 20227
19192: LD_INT 3
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19230
19200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: LD_INT 3
19214: PUSH
19215: LD_INT 4
19217: PUSH
19218: LD_INT 5
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: ST_TO_ADDR
19228: GO 20227
19230: LD_INT 11
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19268
19238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 4
19255: PUSH
19256: LD_INT 5
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: ST_TO_ADDR
19266: GO 20227
19268: LD_INT 4
19270: DOUBLE
19271: EQUAL
19272: IFTRUE 19276
19274: GO 19302
19276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19277: LD_ADDR_VAR 0 3
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 3
19287: PUSH
19288: LD_INT 4
19290: PUSH
19291: LD_INT 5
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 20227
19302: LD_INT 5
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19336
19310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: LD_INT 4
19324: PUSH
19325: LD_INT 5
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
19334: GO 20227
19336: LD_INT 9
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19370
19344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: LD_INT 4
19358: PUSH
19359: LD_INT 5
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 20227
19370: LD_INT 7
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19404
19378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 3
19389: PUSH
19390: LD_INT 4
19392: PUSH
19393: LD_INT 5
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: ST_TO_ADDR
19402: GO 20227
19404: LD_INT 12
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19438
19412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: LD_INT 3
19423: PUSH
19424: LD_INT 4
19426: PUSH
19427: LD_INT 5
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: ST_TO_ADDR
19436: GO 20227
19438: LD_INT 13
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19472
19446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19447: LD_ADDR_VAR 0 3
19451: PUSH
19452: LD_INT 2
19454: PUSH
19455: LD_INT 3
19457: PUSH
19458: LD_INT 4
19460: PUSH
19461: LD_INT 5
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
19470: GO 20227
19472: LD_INT 14
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 19498
19480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: LD_INT 4
19488: PUSH
19489: LD_INT 5
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: ST_TO_ADDR
19496: GO 20227
19498: LD_INT 6
19500: DOUBLE
19501: EQUAL
19502: IFTRUE 19506
19504: GO 19524
19506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19507: LD_ADDR_VAR 0 3
19511: PUSH
19512: LD_INT 4
19514: PUSH
19515: LD_INT 5
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: ST_TO_ADDR
19522: GO 20227
19524: LD_INT 10
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19550
19532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_INT 4
19540: PUSH
19541: LD_INT 5
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: ST_TO_ADDR
19548: GO 20227
19550: LD_INT 22
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19584
19558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: LD_INT 11
19566: PUSH
19567: LD_INT 12
19569: PUSH
19570: LD_INT 13
19572: PUSH
19573: LD_INT 14
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: ST_TO_ADDR
19582: GO 20227
19584: LD_INT 23
19586: DOUBLE
19587: EQUAL
19588: IFTRUE 19592
19590: GO 19618
19592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19593: LD_ADDR_VAR 0 3
19597: PUSH
19598: LD_INT 11
19600: PUSH
19601: LD_INT 12
19603: PUSH
19604: LD_INT 13
19606: PUSH
19607: LD_INT 14
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: ST_TO_ADDR
19616: GO 20227
19618: LD_INT 24
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19652
19626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_INT 11
19634: PUSH
19635: LD_INT 12
19637: PUSH
19638: LD_INT 13
19640: PUSH
19641: LD_INT 14
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
19650: GO 20227
19652: LD_INT 30
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19686
19660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19661: LD_ADDR_VAR 0 3
19665: PUSH
19666: LD_INT 11
19668: PUSH
19669: LD_INT 12
19671: PUSH
19672: LD_INT 13
19674: PUSH
19675: LD_INT 14
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 20227
19686: LD_INT 25
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19712
19694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 13
19702: PUSH
19703: LD_INT 14
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: ST_TO_ADDR
19710: GO 20227
19712: LD_INT 27
19714: DOUBLE
19715: EQUAL
19716: IFTRUE 19720
19718: GO 19738
19720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 13
19728: PUSH
19729: LD_INT 14
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: ST_TO_ADDR
19736: GO 20227
19738: LD_INT 92
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19772
19746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: LD_INT 11
19754: PUSH
19755: LD_INT 12
19757: PUSH
19758: LD_INT 13
19760: PUSH
19761: LD_INT 14
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: ST_TO_ADDR
19770: GO 20227
19772: LD_INT 28
19774: DOUBLE
19775: EQUAL
19776: IFTRUE 19780
19778: GO 19798
19780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_INT 13
19788: PUSH
19789: LD_INT 14
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 20227
19798: LD_INT 29
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19824
19806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 13
19814: PUSH
19815: LD_INT 14
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: ST_TO_ADDR
19822: GO 20227
19824: LD_INT 31
19826: DOUBLE
19827: EQUAL
19828: IFTRUE 19832
19830: GO 19850
19832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_INT 13
19840: PUSH
19841: LD_INT 14
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: ST_TO_ADDR
19848: GO 20227
19850: LD_INT 26
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19876
19858: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_INT 13
19866: PUSH
19867: LD_INT 14
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: ST_TO_ADDR
19874: GO 20227
19876: LD_INT 42
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19910
19884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19885: LD_ADDR_VAR 0 3
19889: PUSH
19890: LD_INT 21
19892: PUSH
19893: LD_INT 22
19895: PUSH
19896: LD_INT 23
19898: PUSH
19899: LD_INT 24
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
19908: GO 20227
19910: LD_INT 43
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19944
19918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19919: LD_ADDR_VAR 0 3
19923: PUSH
19924: LD_INT 21
19926: PUSH
19927: LD_INT 22
19929: PUSH
19930: LD_INT 23
19932: PUSH
19933: LD_INT 24
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: ST_TO_ADDR
19942: GO 20227
19944: LD_INT 44
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19978
19952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19953: LD_ADDR_VAR 0 3
19957: PUSH
19958: LD_INT 21
19960: PUSH
19961: LD_INT 22
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 24
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: ST_TO_ADDR
19976: GO 20227
19978: LD_INT 45
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20012
19986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19987: LD_ADDR_VAR 0 3
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_INT 23
20000: PUSH
20001: LD_INT 24
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: ST_TO_ADDR
20010: GO 20227
20012: LD_INT 49
20014: DOUBLE
20015: EQUAL
20016: IFTRUE 20020
20018: GO 20046
20020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20021: LD_ADDR_VAR 0 3
20025: PUSH
20026: LD_INT 21
20028: PUSH
20029: LD_INT 22
20031: PUSH
20032: LD_INT 23
20034: PUSH
20035: LD_INT 24
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: ST_TO_ADDR
20044: GO 20227
20046: LD_INT 51
20048: DOUBLE
20049: EQUAL
20050: IFTRUE 20054
20052: GO 20080
20054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 21
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 24
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
20078: GO 20227
20080: LD_INT 52
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20114
20088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 22
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 24
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
20112: GO 20227
20114: LD_INT 53
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20140
20122: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20123: LD_ADDR_VAR 0 3
20127: PUSH
20128: LD_INT 23
20130: PUSH
20131: LD_INT 24
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: ST_TO_ADDR
20138: GO 20227
20140: LD_INT 46
20142: DOUBLE
20143: EQUAL
20144: IFTRUE 20148
20146: GO 20166
20148: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: LD_INT 23
20156: PUSH
20157: LD_INT 24
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: ST_TO_ADDR
20164: GO 20227
20166: LD_INT 47
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20192
20174: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 24
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: ST_TO_ADDR
20190: GO 20227
20192: LD_INT 98
20194: DOUBLE
20195: EQUAL
20196: IFTRUE 20200
20198: GO 20226
20200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20201: LD_ADDR_VAR 0 3
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_INT 23
20214: PUSH
20215: LD_INT 24
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: ST_TO_ADDR
20224: GO 20227
20226: POP
// result := ( chassis in result ) ;
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: LD_VAR 0 1
20236: PUSH
20237: LD_VAR 0 3
20241: IN
20242: ST_TO_ADDR
// end ;
20243: LD_VAR 0 3
20247: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20248: LD_INT 0
20250: PPUSH
20251: PPUSH
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
20256: PPUSH
// result := array ;
20257: LD_ADDR_VAR 0 5
20261: PUSH
20262: LD_VAR 0 1
20266: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20267: LD_VAR 0 1
20271: NOT
20272: IFTRUE 20281
20274: PUSH
20275: LD_VAR 0 2
20279: NOT
20280: OR
20281: IFTRUE 20290
20283: PUSH
20284: LD_VAR 0 3
20288: NOT
20289: OR
20290: IFTRUE 20304
20292: PUSH
20293: LD_VAR 0 2
20297: PUSH
20298: LD_VAR 0 1
20302: GREATER
20303: OR
20304: IFTRUE 20318
20306: PUSH
20307: LD_VAR 0 3
20311: PUSH
20312: LD_VAR 0 1
20316: GREATER
20317: OR
20318: IFFALSE 20322
// exit ;
20320: GO 20618
// if direction then
20322: LD_VAR 0 4
20326: IFFALSE 20390
// begin d := 1 ;
20328: LD_ADDR_VAR 0 9
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// if i_from > i_to then
20336: LD_VAR 0 2
20340: PUSH
20341: LD_VAR 0 3
20345: GREATER
20346: IFFALSE 20372
// length := ( array - i_from ) + i_to else
20348: LD_ADDR_VAR 0 11
20352: PUSH
20353: LD_VAR 0 1
20357: PUSH
20358: LD_VAR 0 2
20362: MINUS
20363: PUSH
20364: LD_VAR 0 3
20368: PLUS
20369: ST_TO_ADDR
20370: GO 20388
// length := i_to - i_from ;
20372: LD_ADDR_VAR 0 11
20376: PUSH
20377: LD_VAR 0 3
20381: PUSH
20382: LD_VAR 0 2
20386: MINUS
20387: ST_TO_ADDR
// end else
20388: GO 20451
// begin d := - 1 ;
20390: LD_ADDR_VAR 0 9
20394: PUSH
20395: LD_INT 1
20397: NEG
20398: ST_TO_ADDR
// if i_from > i_to then
20399: LD_VAR 0 2
20403: PUSH
20404: LD_VAR 0 3
20408: GREATER
20409: IFFALSE 20429
// length := i_from - i_to else
20411: LD_ADDR_VAR 0 11
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: LD_VAR 0 3
20425: MINUS
20426: ST_TO_ADDR
20427: GO 20451
// length := ( array - i_to ) + i_from ;
20429: LD_ADDR_VAR 0 11
20433: PUSH
20434: LD_VAR 0 1
20438: PUSH
20439: LD_VAR 0 3
20443: MINUS
20444: PUSH
20445: LD_VAR 0 2
20449: PLUS
20450: ST_TO_ADDR
// end ; if not length then
20451: LD_VAR 0 11
20455: NOT
20456: IFFALSE 20460
// exit ;
20458: GO 20618
// tmp := array ;
20460: LD_ADDR_VAR 0 10
20464: PUSH
20465: LD_VAR 0 1
20469: ST_TO_ADDR
// for i = 1 to length do
20470: LD_ADDR_VAR 0 6
20474: PUSH
20475: DOUBLE
20476: LD_INT 1
20478: DEC
20479: ST_TO_ADDR
20480: LD_VAR 0 11
20484: PUSH
20485: FOR_TO
20486: IFFALSE 20606
// begin for j = 1 to array do
20488: LD_ADDR_VAR 0 7
20492: PUSH
20493: DOUBLE
20494: LD_INT 1
20496: DEC
20497: ST_TO_ADDR
20498: LD_VAR 0 1
20502: PUSH
20503: FOR_TO
20504: IFFALSE 20592
// begin k := j + d ;
20506: LD_ADDR_VAR 0 8
20510: PUSH
20511: LD_VAR 0 7
20515: PUSH
20516: LD_VAR 0 9
20520: PLUS
20521: ST_TO_ADDR
// if k > array then
20522: LD_VAR 0 8
20526: PUSH
20527: LD_VAR 0 1
20531: GREATER
20532: IFFALSE 20542
// k := 1 ;
20534: LD_ADDR_VAR 0 8
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if not k then
20542: LD_VAR 0 8
20546: NOT
20547: IFFALSE 20559
// k := array ;
20549: LD_ADDR_VAR 0 8
20553: PUSH
20554: LD_VAR 0 1
20558: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20559: LD_ADDR_VAR 0 10
20563: PUSH
20564: LD_VAR 0 10
20568: PPUSH
20569: LD_VAR 0 8
20573: PPUSH
20574: LD_VAR 0 1
20578: PUSH
20579: LD_VAR 0 7
20583: ARRAY
20584: PPUSH
20585: CALL_OW 1
20589: ST_TO_ADDR
// end ;
20590: GO 20503
20592: POP
20593: POP
// array := tmp ;
20594: LD_ADDR_VAR 0 1
20598: PUSH
20599: LD_VAR 0 10
20603: ST_TO_ADDR
// end ;
20604: GO 20485
20606: POP
20607: POP
// result := array ;
20608: LD_ADDR_VAR 0 5
20612: PUSH
20613: LD_VAR 0 1
20617: ST_TO_ADDR
// end ;
20618: LD_VAR 0 5
20622: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20623: LD_INT 0
20625: PPUSH
20626: PPUSH
// result := 0 ;
20627: LD_ADDR_VAR 0 3
20631: PUSH
20632: LD_INT 0
20634: ST_TO_ADDR
// if not array or not value in array then
20635: LD_VAR 0 1
20639: NOT
20640: IFTRUE 20655
20642: PUSH
20643: LD_VAR 0 2
20647: PUSH
20648: LD_VAR 0 1
20652: IN
20653: NOT
20654: OR
20655: IFFALSE 20659
// exit ;
20657: GO 20713
// for i = 1 to array do
20659: LD_ADDR_VAR 0 4
20663: PUSH
20664: DOUBLE
20665: LD_INT 1
20667: DEC
20668: ST_TO_ADDR
20669: LD_VAR 0 1
20673: PUSH
20674: FOR_TO
20675: IFFALSE 20711
// if value = array [ i ] then
20677: LD_VAR 0 2
20681: PUSH
20682: LD_VAR 0 1
20686: PUSH
20687: LD_VAR 0 4
20691: ARRAY
20692: EQUAL
20693: IFFALSE 20709
// begin result := i ;
20695: LD_ADDR_VAR 0 3
20699: PUSH
20700: LD_VAR 0 4
20704: ST_TO_ADDR
// exit ;
20705: POP
20706: POP
20707: GO 20713
// end ;
20709: GO 20674
20711: POP
20712: POP
// end ;
20713: LD_VAR 0 3
20717: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20718: LD_INT 0
20720: PPUSH
// vc_chassis := chassis ;
20721: LD_ADDR_OWVAR 37
20725: PUSH
20726: LD_VAR 0 1
20730: ST_TO_ADDR
// vc_engine := engine ;
20731: LD_ADDR_OWVAR 39
20735: PUSH
20736: LD_VAR 0 2
20740: ST_TO_ADDR
// vc_control := control ;
20741: LD_ADDR_OWVAR 38
20745: PUSH
20746: LD_VAR 0 3
20750: ST_TO_ADDR
// vc_weapon := weapon ;
20751: LD_ADDR_OWVAR 40
20755: PUSH
20756: LD_VAR 0 4
20760: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20761: LD_ADDR_OWVAR 41
20765: PUSH
20766: LD_VAR 0 5
20770: ST_TO_ADDR
// end ;
20771: LD_VAR 0 6
20775: RET
// export function WantPlant ( unit ) ; var task ; begin
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
// result := false ;
20780: LD_ADDR_VAR 0 2
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 437
20802: ST_TO_ADDR
// if task then
20803: LD_VAR 0 3
20807: IFFALSE 20835
// if task [ 1 ] [ 1 ] = p then
20809: LD_VAR 0 3
20813: PUSH
20814: LD_INT 1
20816: ARRAY
20817: PUSH
20818: LD_INT 1
20820: ARRAY
20821: PUSH
20822: LD_STRING p
20824: EQUAL
20825: IFFALSE 20835
// result := true ;
20827: LD_ADDR_VAR 0 2
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// end ;
20835: LD_VAR 0 2
20839: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
// if pos < 1 then
20846: LD_VAR 0 2
20850: PUSH
20851: LD_INT 1
20853: LESS
20854: IFFALSE 20858
// exit ;
20856: GO 21161
// if pos = 1 then
20858: LD_VAR 0 2
20862: PUSH
20863: LD_INT 1
20865: EQUAL
20866: IFFALSE 20899
// result := Replace ( arr , pos [ 1 ] , value ) else
20868: LD_ADDR_VAR 0 4
20872: PUSH
20873: LD_VAR 0 1
20877: PPUSH
20878: LD_VAR 0 2
20882: PUSH
20883: LD_INT 1
20885: ARRAY
20886: PPUSH
20887: LD_VAR 0 3
20891: PPUSH
20892: CALL_OW 1
20896: ST_TO_ADDR
20897: GO 21161
// begin tmp := arr ;
20899: LD_ADDR_VAR 0 6
20903: PUSH
20904: LD_VAR 0 1
20908: ST_TO_ADDR
// s_arr := [ tmp ] ;
20909: LD_ADDR_VAR 0 7
20913: PUSH
20914: LD_VAR 0 6
20918: PUSH
20919: EMPTY
20920: LIST
20921: ST_TO_ADDR
// for i = 1 to pos - 1 do
20922: LD_ADDR_VAR 0 5
20926: PUSH
20927: DOUBLE
20928: LD_INT 1
20930: DEC
20931: ST_TO_ADDR
20932: LD_VAR 0 2
20936: PUSH
20937: LD_INT 1
20939: MINUS
20940: PUSH
20941: FOR_TO
20942: IFFALSE 20987
// begin tmp := tmp [ pos [ i ] ] ;
20944: LD_ADDR_VAR 0 6
20948: PUSH
20949: LD_VAR 0 6
20953: PUSH
20954: LD_VAR 0 2
20958: PUSH
20959: LD_VAR 0 5
20963: ARRAY
20964: ARRAY
20965: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20966: LD_ADDR_VAR 0 7
20970: PUSH
20971: LD_VAR 0 7
20975: PUSH
20976: LD_VAR 0 6
20980: PUSH
20981: EMPTY
20982: LIST
20983: ADD
20984: ST_TO_ADDR
// end ;
20985: GO 20941
20987: POP
20988: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20989: LD_ADDR_VAR 0 6
20993: PUSH
20994: LD_VAR 0 6
20998: PPUSH
20999: LD_VAR 0 2
21003: PUSH
21004: LD_VAR 0 2
21008: ARRAY
21009: PPUSH
21010: LD_VAR 0 3
21014: PPUSH
21015: CALL_OW 1
21019: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21020: LD_ADDR_VAR 0 7
21024: PUSH
21025: LD_VAR 0 7
21029: PPUSH
21030: LD_VAR 0 7
21034: PPUSH
21035: LD_VAR 0 6
21039: PPUSH
21040: CALL_OW 1
21044: ST_TO_ADDR
// for i = s_arr downto 2 do
21045: LD_ADDR_VAR 0 5
21049: PUSH
21050: DOUBLE
21051: LD_VAR 0 7
21055: INC
21056: ST_TO_ADDR
21057: LD_INT 2
21059: PUSH
21060: FOR_DOWNTO
21061: IFFALSE 21145
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21063: LD_ADDR_VAR 0 6
21067: PUSH
21068: LD_VAR 0 7
21072: PUSH
21073: LD_VAR 0 5
21077: PUSH
21078: LD_INT 1
21080: MINUS
21081: ARRAY
21082: PPUSH
21083: LD_VAR 0 2
21087: PUSH
21088: LD_VAR 0 5
21092: PUSH
21093: LD_INT 1
21095: MINUS
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 7
21102: PUSH
21103: LD_VAR 0 5
21107: ARRAY
21108: PPUSH
21109: CALL_OW 1
21113: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21114: LD_ADDR_VAR 0 7
21118: PUSH
21119: LD_VAR 0 7
21123: PPUSH
21124: LD_VAR 0 5
21128: PUSH
21129: LD_INT 1
21131: MINUS
21132: PPUSH
21133: LD_VAR 0 6
21137: PPUSH
21138: CALL_OW 1
21142: ST_TO_ADDR
// end ;
21143: GO 21060
21145: POP
21146: POP
// result := s_arr [ 1 ] ;
21147: LD_ADDR_VAR 0 4
21151: PUSH
21152: LD_VAR 0 7
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: ST_TO_ADDR
// end ; end ;
21161: LD_VAR 0 4
21165: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
// if not list then
21170: LD_VAR 0 1
21174: NOT
21175: IFFALSE 21179
// exit ;
21177: GO 21270
// i := list [ pos1 ] ;
21179: LD_ADDR_VAR 0 5
21183: PUSH
21184: LD_VAR 0 1
21188: PUSH
21189: LD_VAR 0 2
21193: ARRAY
21194: ST_TO_ADDR
// if not i then
21195: LD_VAR 0 5
21199: NOT
21200: IFFALSE 21204
// exit ;
21202: GO 21270
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21204: LD_ADDR_VAR 0 1
21208: PUSH
21209: LD_VAR 0 1
21213: PPUSH
21214: LD_VAR 0 2
21218: PPUSH
21219: LD_VAR 0 1
21223: PUSH
21224: LD_VAR 0 3
21228: ARRAY
21229: PPUSH
21230: CALL_OW 1
21234: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: LD_VAR 0 3
21249: PPUSH
21250: LD_VAR 0 5
21254: PPUSH
21255: CALL_OW 1
21259: ST_TO_ADDR
// result := list ;
21260: LD_ADDR_VAR 0 4
21264: PUSH
21265: LD_VAR 0 1
21269: ST_TO_ADDR
// end ;
21270: LD_VAR 0 4
21274: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21275: LD_INT 0
21277: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21278: LD_ADDR_VAR 0 5
21282: PUSH
21283: LD_VAR 0 1
21287: PPUSH
21288: CALL_OW 250
21292: PPUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 251
21302: PPUSH
21303: LD_VAR 0 2
21307: PPUSH
21308: LD_VAR 0 3
21312: PPUSH
21313: LD_VAR 0 4
21317: PPUSH
21318: CALL 21700 0 5
21322: ST_TO_ADDR
// end ;
21323: LD_VAR 0 5
21327: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
// if not list or not unit then
21334: LD_VAR 0 2
21338: NOT
21339: IFTRUE 21348
21341: PUSH
21342: LD_VAR 0 1
21346: NOT
21347: OR
21348: IFFALSE 21352
// exit ;
21350: GO 21695
// result := [ ] ;
21352: LD_ADDR_VAR 0 5
21356: PUSH
21357: EMPTY
21358: ST_TO_ADDR
// for i in list do
21359: LD_ADDR_VAR 0 6
21363: PUSH
21364: LD_VAR 0 2
21368: PUSH
21369: FOR_IN
21370: IFFALSE 21588
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21372: LD_ADDR_VAR 0 8
21376: PUSH
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_VAR 0 6
21386: PUSH
21387: LD_INT 1
21389: ARRAY
21390: PPUSH
21391: LD_VAR 0 6
21395: PUSH
21396: LD_INT 2
21398: ARRAY
21399: PPUSH
21400: CALL_OW 297
21404: ST_TO_ADDR
// if not Count ( result ) then
21405: LD_VAR 0 5
21409: PPUSH
21410: CALL 17922 0 1
21414: NOT
21415: IFFALSE 21448
// begin result := Join ( result , [ i , tmp ] ) ;
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: LD_VAR 0 5
21426: PPUSH
21427: LD_VAR 0 6
21431: PUSH
21432: LD_VAR 0 8
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PPUSH
21441: CALL 53898 0 2
21445: ST_TO_ADDR
// continue ;
21446: GO 21369
// end ; if result [ result ] [ 2 ] <= tmp then
21448: LD_VAR 0 5
21452: PUSH
21453: LD_VAR 0 5
21457: ARRAY
21458: PUSH
21459: LD_INT 2
21461: ARRAY
21462: PUSH
21463: LD_VAR 0 8
21467: LESSEQUAL
21468: IFFALSE 21501
// result := Join ( result , [ i , tmp ] ) else
21470: LD_ADDR_VAR 0 5
21474: PUSH
21475: LD_VAR 0 5
21479: PPUSH
21480: LD_VAR 0 6
21484: PUSH
21485: LD_VAR 0 8
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL 53898 0 2
21498: ST_TO_ADDR
21499: GO 21586
// begin for j := 1 to Count ( result ) do
21501: LD_ADDR_VAR 0 7
21505: PUSH
21506: DOUBLE
21507: LD_INT 1
21509: DEC
21510: ST_TO_ADDR
21511: LD_VAR 0 5
21515: PPUSH
21516: CALL 17922 0 1
21520: PUSH
21521: FOR_TO
21522: IFFALSE 21584
// begin if tmp < result [ j ] [ 2 ] then
21524: LD_VAR 0 8
21528: PUSH
21529: LD_VAR 0 5
21533: PUSH
21534: LD_VAR 0 7
21538: ARRAY
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: LESS
21544: IFFALSE 21582
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21546: LD_ADDR_VAR 0 5
21550: PUSH
21551: LD_VAR 0 5
21555: PPUSH
21556: LD_VAR 0 7
21560: PPUSH
21561: LD_VAR 0 6
21565: PUSH
21566: LD_VAR 0 8
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PPUSH
21575: CALL_OW 2
21579: ST_TO_ADDR
// break ;
21580: GO 21584
// end ; end ;
21582: GO 21521
21584: POP
21585: POP
// end ; end ;
21586: GO 21369
21588: POP
21589: POP
// if result and not asc then
21590: LD_VAR 0 5
21594: IFFALSE 21603
21596: PUSH
21597: LD_VAR 0 3
21601: NOT
21602: AND
21603: IFFALSE 21620
// result := ReverseArray ( result ) ;
21605: LD_ADDR_VAR 0 5
21609: PUSH
21610: LD_VAR 0 5
21614: PPUSH
21615: CALL 48978 0 1
21619: ST_TO_ADDR
// tmp := [ ] ;
21620: LD_ADDR_VAR 0 8
21624: PUSH
21625: EMPTY
21626: ST_TO_ADDR
// if mode then
21627: LD_VAR 0 4
21631: IFFALSE 21695
// begin for i := 1 to result do
21633: LD_ADDR_VAR 0 6
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_VAR 0 5
21647: PUSH
21648: FOR_TO
21649: IFFALSE 21683
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21651: LD_ADDR_VAR 0 8
21655: PUSH
21656: LD_VAR 0 8
21660: PPUSH
21661: LD_VAR 0 5
21665: PUSH
21666: LD_VAR 0 6
21670: ARRAY
21671: PUSH
21672: LD_INT 1
21674: ARRAY
21675: PPUSH
21676: CALL 53898 0 2
21680: ST_TO_ADDR
21681: GO 21648
21683: POP
21684: POP
// result := tmp ;
21685: LD_ADDR_VAR 0 5
21689: PUSH
21690: LD_VAR 0 8
21694: ST_TO_ADDR
// end ; end ;
21695: LD_VAR 0 5
21699: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21700: LD_INT 0
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
// if not list then
21706: LD_VAR 0 3
21710: NOT
21711: IFFALSE 21715
// exit ;
21713: GO 22105
// result := [ ] ;
21715: LD_ADDR_VAR 0 6
21719: PUSH
21720: EMPTY
21721: ST_TO_ADDR
// for i in list do
21722: LD_ADDR_VAR 0 7
21726: PUSH
21727: LD_VAR 0 3
21731: PUSH
21732: FOR_IN
21733: IFFALSE 21935
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21735: LD_ADDR_VAR 0 9
21739: PUSH
21740: LD_VAR 0 7
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_VAR 0 2
21754: PPUSH
21755: CALL_OW 297
21759: ST_TO_ADDR
// if not result then
21760: LD_VAR 0 6
21764: NOT
21765: IFFALSE 21791
// result := [ [ i , tmp ] ] else
21767: LD_ADDR_VAR 0 6
21771: PUSH
21772: LD_VAR 0 7
21776: PUSH
21777: LD_VAR 0 9
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: ST_TO_ADDR
21789: GO 21933
// begin if result [ result ] [ 2 ] <= tmp then
21791: LD_VAR 0 6
21795: PUSH
21796: LD_VAR 0 6
21800: ARRAY
21801: PUSH
21802: LD_INT 2
21804: ARRAY
21805: PUSH
21806: LD_VAR 0 9
21810: LESSEQUAL
21811: IFFALSE 21853
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21813: LD_ADDR_VAR 0 6
21817: PUSH
21818: LD_VAR 0 6
21822: PPUSH
21823: LD_VAR 0 6
21827: PUSH
21828: LD_INT 1
21830: PLUS
21831: PPUSH
21832: LD_VAR 0 7
21836: PUSH
21837: LD_VAR 0 9
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PPUSH
21846: CALL_OW 2
21850: ST_TO_ADDR
21851: GO 21933
// for j := 1 to result do
21853: LD_ADDR_VAR 0 8
21857: PUSH
21858: DOUBLE
21859: LD_INT 1
21861: DEC
21862: ST_TO_ADDR
21863: LD_VAR 0 6
21867: PUSH
21868: FOR_TO
21869: IFFALSE 21931
// begin if tmp < result [ j ] [ 2 ] then
21871: LD_VAR 0 9
21875: PUSH
21876: LD_VAR 0 6
21880: PUSH
21881: LD_VAR 0 8
21885: ARRAY
21886: PUSH
21887: LD_INT 2
21889: ARRAY
21890: LESS
21891: IFFALSE 21929
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21893: LD_ADDR_VAR 0 6
21897: PUSH
21898: LD_VAR 0 6
21902: PPUSH
21903: LD_VAR 0 8
21907: PPUSH
21908: LD_VAR 0 7
21912: PUSH
21913: LD_VAR 0 9
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PPUSH
21922: CALL_OW 2
21926: ST_TO_ADDR
// break ;
21927: GO 21931
// end ; end ;
21929: GO 21868
21931: POP
21932: POP
// end ; end ;
21933: GO 21732
21935: POP
21936: POP
// if result and not asc then
21937: LD_VAR 0 6
21941: IFFALSE 21950
21943: PUSH
21944: LD_VAR 0 4
21948: NOT
21949: AND
21950: IFFALSE 22025
// begin tmp := result ;
21952: LD_ADDR_VAR 0 9
21956: PUSH
21957: LD_VAR 0 6
21961: ST_TO_ADDR
// for i = tmp downto 1 do
21962: LD_ADDR_VAR 0 7
21966: PUSH
21967: DOUBLE
21968: LD_VAR 0 9
21972: INC
21973: ST_TO_ADDR
21974: LD_INT 1
21976: PUSH
21977: FOR_DOWNTO
21978: IFFALSE 22023
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21980: LD_ADDR_VAR 0 6
21984: PUSH
21985: LD_VAR 0 6
21989: PPUSH
21990: LD_VAR 0 9
21994: PUSH
21995: LD_VAR 0 7
21999: MINUS
22000: PUSH
22001: LD_INT 1
22003: PLUS
22004: PPUSH
22005: LD_VAR 0 9
22009: PUSH
22010: LD_VAR 0 7
22014: ARRAY
22015: PPUSH
22016: CALL_OW 1
22020: ST_TO_ADDR
22021: GO 21977
22023: POP
22024: POP
// end ; tmp := [ ] ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: EMPTY
22031: ST_TO_ADDR
// if mode then
22032: LD_VAR 0 5
22036: IFFALSE 22105
// begin for i = 1 to result do
22038: LD_ADDR_VAR 0 7
22042: PUSH
22043: DOUBLE
22044: LD_INT 1
22046: DEC
22047: ST_TO_ADDR
22048: LD_VAR 0 6
22052: PUSH
22053: FOR_TO
22054: IFFALSE 22093
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22056: LD_ADDR_VAR 0 9
22060: PUSH
22061: LD_VAR 0 9
22065: PPUSH
22066: LD_VAR 0 7
22070: PPUSH
22071: LD_VAR 0 6
22075: PUSH
22076: LD_VAR 0 7
22080: ARRAY
22081: PUSH
22082: LD_INT 1
22084: ARRAY
22085: PPUSH
22086: CALL_OW 1
22090: ST_TO_ADDR
22091: GO 22053
22093: POP
22094: POP
// result := tmp ;
22095: LD_ADDR_VAR 0 6
22099: PUSH
22100: LD_VAR 0 9
22104: ST_TO_ADDR
// end ; end ;
22105: LD_VAR 0 6
22109: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22110: LD_INT 0
22112: PPUSH
22113: PPUSH
22114: PPUSH
22115: PPUSH
22116: PPUSH
22117: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22118: LD_ADDR_VAR 0 5
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: LD_INT 0
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: ST_TO_ADDR
// if not x or not y then
22140: LD_VAR 0 2
22144: NOT
22145: IFTRUE 22154
22147: PUSH
22148: LD_VAR 0 3
22152: NOT
22153: OR
22154: IFFALSE 22158
// exit ;
22156: GO 23814
// if not range then
22158: LD_VAR 0 4
22162: NOT
22163: IFFALSE 22173
// range := 10 ;
22165: LD_ADDR_VAR 0 4
22169: PUSH
22170: LD_INT 10
22172: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22173: LD_ADDR_VAR 0 8
22177: PUSH
22178: LD_INT 81
22180: PUSH
22181: LD_VAR 0 1
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 92
22192: PUSH
22193: LD_VAR 0 2
22197: PUSH
22198: LD_VAR 0 3
22202: PUSH
22203: LD_VAR 0 4
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: LD_INT 21
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: LIST
22235: PPUSH
22236: CALL_OW 69
22240: ST_TO_ADDR
// if not tmp then
22241: LD_VAR 0 8
22245: NOT
22246: IFFALSE 22250
// exit ;
22248: GO 23814
// for i in tmp do
22250: LD_ADDR_VAR 0 6
22254: PUSH
22255: LD_VAR 0 8
22259: PUSH
22260: FOR_IN
22261: IFFALSE 23789
// begin points := [ 0 , 0 , 0 ] ;
22263: LD_ADDR_VAR 0 9
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: ST_TO_ADDR
// bpoints := 1 ;
22282: LD_ADDR_VAR 0 10
22286: PUSH
22287: LD_INT 1
22289: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22290: LD_VAR 0 6
22294: PPUSH
22295: CALL_OW 247
22299: PUSH
22300: LD_INT 1
22302: DOUBLE
22303: EQUAL
22304: IFTRUE 22308
22306: GO 22890
22308: POP
// begin if GetClass ( i ) = 1 then
22309: LD_VAR 0 6
22313: PPUSH
22314: CALL_OW 257
22318: PUSH
22319: LD_INT 1
22321: EQUAL
22322: IFFALSE 22343
// points := [ 10 , 5 , 3 ] ;
22324: LD_ADDR_VAR 0 9
22328: PUSH
22329: LD_INT 10
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 3
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22343: LD_VAR 0 6
22347: PPUSH
22348: CALL_OW 257
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: LD_INT 3
22358: PUSH
22359: LD_INT 4
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: IN
22367: IFFALSE 22388
// points := [ 3 , 2 , 1 ] ;
22369: LD_ADDR_VAR 0 9
22373: PUSH
22374: LD_INT 3
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22388: LD_VAR 0 6
22392: PPUSH
22393: CALL_OW 257
22397: PUSH
22398: LD_INT 5
22400: EQUAL
22401: IFFALSE 22422
// points := [ 130 , 5 , 2 ] ;
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: LD_INT 130
22410: PUSH
22411: LD_INT 5
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22422: LD_VAR 0 6
22426: PPUSH
22427: CALL_OW 257
22431: PUSH
22432: LD_INT 8
22434: EQUAL
22435: IFFALSE 22456
// points := [ 35 , 35 , 30 ] ;
22437: LD_ADDR_VAR 0 9
22441: PUSH
22442: LD_INT 35
22444: PUSH
22445: LD_INT 35
22447: PUSH
22448: LD_INT 30
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22456: LD_VAR 0 6
22460: PPUSH
22461: CALL_OW 257
22465: PUSH
22466: LD_INT 9
22468: EQUAL
22469: IFFALSE 22490
// points := [ 20 , 55 , 40 ] ;
22471: LD_ADDR_VAR 0 9
22475: PUSH
22476: LD_INT 20
22478: PUSH
22479: LD_INT 55
22481: PUSH
22482: LD_INT 40
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22490: LD_VAR 0 6
22494: PPUSH
22495: CALL_OW 257
22499: PUSH
22500: LD_INT 12
22502: PUSH
22503: LD_INT 16
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: IN
22510: IFFALSE 22531
// points := [ 5 , 3 , 2 ] ;
22512: LD_ADDR_VAR 0 9
22516: PUSH
22517: LD_INT 5
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22531: LD_VAR 0 6
22535: PPUSH
22536: CALL_OW 257
22540: PUSH
22541: LD_INT 17
22543: EQUAL
22544: IFFALSE 22565
// points := [ 100 , 50 , 75 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 100
22553: PUSH
22554: LD_INT 50
22556: PUSH
22557: LD_INT 75
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 257
22574: PUSH
22575: LD_INT 15
22577: EQUAL
22578: IFFALSE 22599
// points := [ 10 , 5 , 3 ] ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_INT 10
22587: PUSH
22588: LD_INT 5
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22599: LD_VAR 0 6
22603: PPUSH
22604: CALL_OW 257
22608: PUSH
22609: LD_INT 14
22611: EQUAL
22612: IFFALSE 22633
// points := [ 10 , 0 , 0 ] ;
22614: LD_ADDR_VAR 0 9
22618: PUSH
22619: LD_INT 10
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22633: LD_VAR 0 6
22637: PPUSH
22638: CALL_OW 257
22642: PUSH
22643: LD_INT 11
22645: EQUAL
22646: IFFALSE 22667
// points := [ 30 , 10 , 5 ] ;
22648: LD_ADDR_VAR 0 9
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 10
22658: PUSH
22659: LD_INT 5
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22667: LD_VAR 0 1
22671: PPUSH
22672: LD_INT 5
22674: PPUSH
22675: CALL_OW 321
22679: PUSH
22680: LD_INT 2
22682: EQUAL
22683: IFFALSE 22700
// bpoints := bpoints * 1.8 ;
22685: LD_ADDR_VAR 0 10
22689: PUSH
22690: LD_VAR 0 10
22694: PUSH
22695: LD_REAL  1.80000000000000E+0000
22698: MUL
22699: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22700: LD_VAR 0 6
22704: PPUSH
22705: CALL_OW 257
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: IN
22728: IFFALSE 22748
22730: PUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: LD_INT 51
22738: PPUSH
22739: CALL_OW 321
22743: PUSH
22744: LD_INT 2
22746: EQUAL
22747: AND
22748: IFFALSE 22765
// bpoints := bpoints * 1.2 ;
22750: LD_ADDR_VAR 0 10
22754: PUSH
22755: LD_VAR 0 10
22759: PUSH
22760: LD_REAL  1.20000000000000E+0000
22763: MUL
22764: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22765: LD_VAR 0 6
22769: PPUSH
22770: CALL_OW 257
22774: PUSH
22775: LD_INT 5
22777: PUSH
22778: LD_INT 7
22780: PUSH
22781: LD_INT 9
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: IN
22789: IFFALSE 22809
22791: PUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_INT 52
22799: PPUSH
22800: CALL_OW 321
22804: PUSH
22805: LD_INT 2
22807: EQUAL
22808: AND
22809: IFFALSE 22826
// bpoints := bpoints * 1.5 ;
22811: LD_ADDR_VAR 0 10
22815: PUSH
22816: LD_VAR 0 10
22820: PUSH
22821: LD_REAL  1.50000000000000E+0000
22824: MUL
22825: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_INT 66
22833: PPUSH
22834: CALL_OW 321
22838: PUSH
22839: LD_INT 2
22841: EQUAL
22842: IFFALSE 22859
// bpoints := bpoints * 1.1 ;
22844: LD_ADDR_VAR 0 10
22848: PUSH
22849: LD_VAR 0 10
22853: PUSH
22854: LD_REAL  1.10000000000000E+0000
22857: MUL
22858: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22859: LD_ADDR_VAR 0 10
22863: PUSH
22864: LD_VAR 0 10
22868: PUSH
22869: LD_VAR 0 6
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 259
22881: PUSH
22882: LD_REAL  1.15000000000000E+0000
22885: MUL
22886: MUL
22887: ST_TO_ADDR
// end ; unit_vehicle :
22888: GO 23718
22890: LD_INT 2
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 23706
22898: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22899: LD_VAR 0 6
22903: PPUSH
22904: CALL_OW 264
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: LD_INT 42
22914: PUSH
22915: LD_INT 24
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: IN
22923: IFFALSE 22944
// points := [ 25 , 5 , 3 ] ;
22925: LD_ADDR_VAR 0 9
22929: PUSH
22930: LD_INT 25
22932: PUSH
22933: LD_INT 5
22935: PUSH
22936: LD_INT 3
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22944: LD_VAR 0 6
22948: PPUSH
22949: CALL_OW 264
22953: PUSH
22954: LD_INT 4
22956: PUSH
22957: LD_INT 43
22959: PUSH
22960: LD_INT 25
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: IN
22968: IFFALSE 22989
// points := [ 40 , 15 , 5 ] ;
22970: LD_ADDR_VAR 0 9
22974: PUSH
22975: LD_INT 40
22977: PUSH
22978: LD_INT 15
22980: PUSH
22981: LD_INT 5
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22989: LD_VAR 0 6
22993: PPUSH
22994: CALL_OW 264
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: LD_INT 23
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: IN
23009: IFFALSE 23030
// points := [ 7 , 25 , 8 ] ;
23011: LD_ADDR_VAR 0 9
23015: PUSH
23016: LD_INT 7
23018: PUSH
23019: LD_INT 25
23021: PUSH
23022: LD_INT 8
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23030: LD_VAR 0 6
23034: PPUSH
23035: CALL_OW 264
23039: PUSH
23040: LD_INT 5
23042: PUSH
23043: LD_INT 27
23045: PUSH
23046: LD_INT 44
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: IN
23054: IFFALSE 23075
// points := [ 14 , 50 , 16 ] ;
23056: LD_ADDR_VAR 0 9
23060: PUSH
23061: LD_INT 14
23063: PUSH
23064: LD_INT 50
23066: PUSH
23067: LD_INT 16
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23075: LD_VAR 0 6
23079: PPUSH
23080: CALL_OW 264
23084: PUSH
23085: LD_INT 6
23087: PUSH
23088: LD_INT 46
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: IN
23095: IFFALSE 23116
// points := [ 32 , 120 , 70 ] ;
23097: LD_ADDR_VAR 0 9
23101: PUSH
23102: LD_INT 32
23104: PUSH
23105: LD_INT 120
23107: PUSH
23108: LD_INT 70
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: LIST
23115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23116: LD_VAR 0 6
23120: PPUSH
23121: CALL_OW 264
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_INT 28
23131: PUSH
23132: LD_INT 45
23134: PUSH
23135: LD_INT 92
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: IN
23144: IFFALSE 23165
// points := [ 35 , 20 , 45 ] ;
23146: LD_ADDR_VAR 0 9
23150: PUSH
23151: LD_INT 35
23153: PUSH
23154: LD_INT 20
23156: PUSH
23157: LD_INT 45
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23165: LD_VAR 0 6
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_INT 47
23177: PUSH
23178: EMPTY
23179: LIST
23180: IN
23181: IFFALSE 23202
// points := [ 67 , 45 , 75 ] ;
23183: LD_ADDR_VAR 0 9
23187: PUSH
23188: LD_INT 67
23190: PUSH
23191: LD_INT 45
23193: PUSH
23194: LD_INT 75
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23202: LD_VAR 0 6
23206: PPUSH
23207: CALL_OW 264
23211: PUSH
23212: LD_INT 26
23214: PUSH
23215: EMPTY
23216: LIST
23217: IN
23218: IFFALSE 23239
// points := [ 120 , 30 , 80 ] ;
23220: LD_ADDR_VAR 0 9
23224: PUSH
23225: LD_INT 120
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 80
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23239: LD_VAR 0 6
23243: PPUSH
23244: CALL_OW 264
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: EMPTY
23253: LIST
23254: IN
23255: IFFALSE 23276
// points := [ 40 , 1 , 1 ] ;
23257: LD_ADDR_VAR 0 9
23261: PUSH
23262: LD_INT 40
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23276: LD_VAR 0 6
23280: PPUSH
23281: CALL_OW 264
23285: PUSH
23286: LD_INT 29
23288: PUSH
23289: EMPTY
23290: LIST
23291: IN
23292: IFFALSE 23313
// points := [ 70 , 200 , 400 ] ;
23294: LD_ADDR_VAR 0 9
23298: PUSH
23299: LD_INT 70
23301: PUSH
23302: LD_INT 200
23304: PUSH
23305: LD_INT 400
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 264
23322: PUSH
23323: LD_INT 14
23325: PUSH
23326: LD_INT 53
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: IN
23333: IFFALSE 23354
// points := [ 40 , 10 , 20 ] ;
23335: LD_ADDR_VAR 0 9
23339: PUSH
23340: LD_INT 40
23342: PUSH
23343: LD_INT 10
23345: PUSH
23346: LD_INT 20
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: LIST
23353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23354: LD_VAR 0 6
23358: PPUSH
23359: CALL_OW 264
23363: PUSH
23364: LD_INT 9
23366: PUSH
23367: EMPTY
23368: LIST
23369: IN
23370: IFFALSE 23391
// points := [ 5 , 70 , 20 ] ;
23372: LD_ADDR_VAR 0 9
23376: PUSH
23377: LD_INT 5
23379: PUSH
23380: LD_INT 70
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23391: LD_VAR 0 6
23395: PPUSH
23396: CALL_OW 264
23400: PUSH
23401: LD_INT 10
23403: PUSH
23404: EMPTY
23405: LIST
23406: IN
23407: IFFALSE 23428
// points := [ 35 , 110 , 70 ] ;
23409: LD_ADDR_VAR 0 9
23413: PUSH
23414: LD_INT 35
23416: PUSH
23417: LD_INT 110
23419: PUSH
23420: LD_INT 70
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23428: LD_VAR 0 6
23432: PPUSH
23433: CALL_OW 265
23437: PUSH
23438: LD_INT 25
23440: EQUAL
23441: IFFALSE 23462
// points := [ 80 , 65 , 100 ] ;
23443: LD_ADDR_VAR 0 9
23447: PUSH
23448: LD_INT 80
23450: PUSH
23451: LD_INT 65
23453: PUSH
23454: LD_INT 100
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23462: LD_VAR 0 6
23466: PPUSH
23467: CALL_OW 263
23471: PUSH
23472: LD_INT 1
23474: EQUAL
23475: IFFALSE 23510
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23477: LD_ADDR_VAR 0 10
23481: PUSH
23482: LD_VAR 0 10
23486: PUSH
23487: LD_VAR 0 6
23491: PPUSH
23492: CALL_OW 311
23496: PPUSH
23497: LD_INT 3
23499: PPUSH
23500: CALL_OW 259
23504: PUSH
23505: LD_INT 4
23507: MUL
23508: MUL
23509: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23510: LD_VAR 0 6
23514: PPUSH
23515: CALL_OW 263
23519: PUSH
23520: LD_INT 2
23522: EQUAL
23523: IFFALSE 23574
// begin j := IsControledBy ( i ) ;
23525: LD_ADDR_VAR 0 7
23529: PUSH
23530: LD_VAR 0 6
23534: PPUSH
23535: CALL_OW 312
23539: ST_TO_ADDR
// if j then
23540: LD_VAR 0 7
23544: IFFALSE 23574
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23546: LD_ADDR_VAR 0 10
23550: PUSH
23551: LD_VAR 0 10
23555: PUSH
23556: LD_VAR 0 7
23560: PPUSH
23561: LD_INT 3
23563: PPUSH
23564: CALL_OW 259
23568: PUSH
23569: LD_INT 3
23571: MUL
23572: MUL
23573: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23574: LD_VAR 0 6
23578: PPUSH
23579: CALL_OW 264
23583: PUSH
23584: LD_INT 5
23586: PUSH
23587: LD_INT 6
23589: PUSH
23590: LD_INT 46
23592: PUSH
23593: LD_INT 44
23595: PUSH
23596: LD_INT 47
23598: PUSH
23599: LD_INT 45
23601: PUSH
23602: LD_INT 28
23604: PUSH
23605: LD_INT 7
23607: PUSH
23608: LD_INT 27
23610: PUSH
23611: LD_INT 29
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: IN
23626: IFFALSE 23646
23628: PUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_INT 52
23636: PPUSH
23637: CALL_OW 321
23641: PUSH
23642: LD_INT 2
23644: EQUAL
23645: AND
23646: IFFALSE 23663
// bpoints := bpoints * 1.2 ;
23648: LD_ADDR_VAR 0 10
23652: PUSH
23653: LD_VAR 0 10
23657: PUSH
23658: LD_REAL  1.20000000000000E+0000
23661: MUL
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 6
23675: PUSH
23676: LD_INT 46
23678: PUSH
23679: LD_INT 47
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: IN
23687: IFFALSE 23704
// bpoints := bpoints * 1.2 ;
23689: LD_ADDR_VAR 0 10
23693: PUSH
23694: LD_VAR 0 10
23698: PUSH
23699: LD_REAL  1.20000000000000E+0000
23702: MUL
23703: ST_TO_ADDR
// end ; unit_building :
23704: GO 23718
23706: LD_INT 3
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23717
23714: POP
// ; end ;
23715: GO 23718
23717: POP
// for j = 1 to 3 do
23718: LD_ADDR_VAR 0 7
23722: PUSH
23723: DOUBLE
23724: LD_INT 1
23726: DEC
23727: ST_TO_ADDR
23728: LD_INT 3
23730: PUSH
23731: FOR_TO
23732: IFFALSE 23785
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23734: LD_ADDR_VAR 0 5
23738: PUSH
23739: LD_VAR 0 5
23743: PPUSH
23744: LD_VAR 0 7
23748: PPUSH
23749: LD_VAR 0 5
23753: PUSH
23754: LD_VAR 0 7
23758: ARRAY
23759: PUSH
23760: LD_VAR 0 9
23764: PUSH
23765: LD_VAR 0 7
23769: ARRAY
23770: PUSH
23771: LD_VAR 0 10
23775: MUL
23776: PLUS
23777: PPUSH
23778: CALL_OW 1
23782: ST_TO_ADDR
23783: GO 23731
23785: POP
23786: POP
// end ;
23787: GO 22260
23789: POP
23790: POP
// result := Replace ( result , 4 , tmp ) ;
23791: LD_ADDR_VAR 0 5
23795: PUSH
23796: LD_VAR 0 5
23800: PPUSH
23801: LD_INT 4
23803: PPUSH
23804: LD_VAR 0 8
23808: PPUSH
23809: CALL_OW 1
23813: ST_TO_ADDR
// end ;
23814: LD_VAR 0 5
23818: RET
// export function DangerAtRange ( unit , range ) ; begin
23819: LD_INT 0
23821: PPUSH
// if not unit then
23822: LD_VAR 0 1
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 23876
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23831: LD_ADDR_VAR 0 3
23835: PUSH
23836: LD_VAR 0 1
23840: PPUSH
23841: CALL_OW 255
23845: PPUSH
23846: LD_VAR 0 1
23850: PPUSH
23851: CALL_OW 250
23855: PPUSH
23856: LD_VAR 0 1
23860: PPUSH
23861: CALL_OW 251
23865: PPUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: CALL 22110 0 4
23875: ST_TO_ADDR
// end ;
23876: LD_VAR 0 3
23880: RET
// export function DangerInArea ( side , area ) ; begin
23881: LD_INT 0
23883: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_INT 81
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 70
23910: ST_TO_ADDR
// end ;
23911: LD_VAR 0 3
23915: RET
// export function IsExtension ( b ) ; begin
23916: LD_INT 0
23918: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_VAR 0 1
23928: PUSH
23929: LD_INT 23
23931: PUSH
23932: LD_INT 20
23934: PUSH
23935: LD_INT 22
23937: PUSH
23938: LD_INT 17
23940: PUSH
23941: LD_INT 24
23943: PUSH
23944: LD_INT 21
23946: PUSH
23947: LD_INT 19
23949: PUSH
23950: LD_INT 16
23952: PUSH
23953: LD_INT 25
23955: PUSH
23956: LD_INT 18
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: IN
23971: ST_TO_ADDR
// end ;
23972: LD_VAR 0 2
23976: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
// result := [ ] ;
23982: LD_ADDR_VAR 0 4
23986: PUSH
23987: EMPTY
23988: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23989: LD_ADDR_VAR 0 5
23993: PUSH
23994: LD_VAR 0 2
23998: PPUSH
23999: LD_INT 21
24001: PUSH
24002: LD_INT 3
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 70
24013: ST_TO_ADDR
// if not tmp then
24014: LD_VAR 0 5
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24087
// if checkLink then
24023: LD_VAR 0 3
24027: IFFALSE 24077
// begin for i in tmp do
24029: LD_ADDR_VAR 0 6
24033: PUSH
24034: LD_VAR 0 5
24038: PUSH
24039: FOR_IN
24040: IFFALSE 24075
// if GetBase ( i ) <> base then
24042: LD_VAR 0 6
24046: PPUSH
24047: CALL_OW 274
24051: PUSH
24052: LD_VAR 0 1
24056: NONEQUAL
24057: IFFALSE 24073
// ComLinkToBase ( base , i ) ;
24059: LD_VAR 0 1
24063: PPUSH
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 169
24073: GO 24039
24075: POP
24076: POP
// end ; result := tmp ;
24077: LD_ADDR_VAR 0 4
24081: PUSH
24082: LD_VAR 0 5
24086: ST_TO_ADDR
// end ;
24087: LD_VAR 0 4
24091: RET
// export function ComComplete ( units , b ) ; var i ; begin
24092: LD_INT 0
24094: PPUSH
24095: PPUSH
// if not units then
24096: LD_VAR 0 1
24100: NOT
24101: IFFALSE 24105
// exit ;
24103: GO 24195
// for i in units do
24105: LD_ADDR_VAR 0 4
24109: PUSH
24110: LD_VAR 0 1
24114: PUSH
24115: FOR_IN
24116: IFFALSE 24193
// if BuildingStatus ( b ) = bs_build then
24118: LD_VAR 0 2
24122: PPUSH
24123: CALL_OW 461
24127: PUSH
24128: LD_INT 1
24130: EQUAL
24131: IFFALSE 24191
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24133: LD_VAR 0 4
24137: PPUSH
24138: LD_STRING h
24140: PUSH
24141: LD_VAR 0 2
24145: PPUSH
24146: CALL_OW 250
24150: PUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: CALL_OW 251
24160: PUSH
24161: LD_VAR 0 2
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: PPUSH
24187: CALL_OW 446
24191: GO 24115
24193: POP
24194: POP
// end ;
24195: LD_VAR 0 3
24199: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24200: LD_INT 0
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
24206: PPUSH
24207: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24208: LD_VAR 0 1
24212: NOT
24213: IFTRUE 24230
24215: PUSH
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 263
24225: PUSH
24226: LD_INT 2
24228: NONEQUAL
24229: OR
24230: IFFALSE 24234
// exit ;
24232: GO 24550
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24234: LD_ADDR_VAR 0 6
24238: PUSH
24239: LD_INT 22
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 255
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: LD_INT 30
24261: PUSH
24262: LD_INT 36
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 34
24271: PUSH
24272: LD_INT 31
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PPUSH
24288: CALL_OW 69
24292: ST_TO_ADDR
// if not tmp then
24293: LD_VAR 0 6
24297: NOT
24298: IFFALSE 24302
// exit ;
24300: GO 24550
// result := [ ] ;
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: EMPTY
24308: ST_TO_ADDR
// for i in tmp do
24309: LD_ADDR_VAR 0 3
24313: PUSH
24314: LD_VAR 0 6
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24391
// begin t := UnitsInside ( i ) ;
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: LD_VAR 0 3
24331: PPUSH
24332: CALL_OW 313
24336: ST_TO_ADDR
// if t then
24337: LD_VAR 0 4
24341: IFFALSE 24389
// for j in t do
24343: LD_ADDR_VAR 0 7
24347: PUSH
24348: LD_VAR 0 4
24352: PUSH
24353: FOR_IN
24354: IFFALSE 24387
// result := Replace ( result , result + 1 , j ) ;
24356: LD_ADDR_VAR 0 2
24360: PUSH
24361: LD_VAR 0 2
24365: PPUSH
24366: LD_VAR 0 2
24370: PUSH
24371: LD_INT 1
24373: PLUS
24374: PPUSH
24375: LD_VAR 0 7
24379: PPUSH
24380: CALL_OW 1
24384: ST_TO_ADDR
24385: GO 24353
24387: POP
24388: POP
// end ;
24389: GO 24319
24391: POP
24392: POP
// if not result then
24393: LD_VAR 0 2
24397: NOT
24398: IFFALSE 24402
// exit ;
24400: GO 24550
// mech := result [ 1 ] ;
24402: LD_ADDR_VAR 0 5
24406: PUSH
24407: LD_VAR 0 2
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: ST_TO_ADDR
// if result > 1 then
24416: LD_VAR 0 2
24420: PUSH
24421: LD_INT 1
24423: GREATER
24424: IFFALSE 24536
// begin for i = 2 to result do
24426: LD_ADDR_VAR 0 3
24430: PUSH
24431: DOUBLE
24432: LD_INT 2
24434: DEC
24435: ST_TO_ADDR
24436: LD_VAR 0 2
24440: PUSH
24441: FOR_TO
24442: IFFALSE 24534
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24444: LD_ADDR_VAR 0 4
24448: PUSH
24449: LD_VAR 0 2
24453: PUSH
24454: LD_VAR 0 3
24458: ARRAY
24459: PPUSH
24460: LD_INT 3
24462: PPUSH
24463: CALL_OW 259
24467: PUSH
24468: LD_VAR 0 2
24472: PUSH
24473: LD_VAR 0 3
24477: ARRAY
24478: PPUSH
24479: CALL_OW 432
24483: MINUS
24484: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24485: LD_VAR 0 4
24489: PUSH
24490: LD_VAR 0 5
24494: PPUSH
24495: LD_INT 3
24497: PPUSH
24498: CALL_OW 259
24502: PUSH
24503: LD_VAR 0 5
24507: PPUSH
24508: CALL_OW 432
24512: MINUS
24513: GREATEREQUAL
24514: IFFALSE 24532
// mech := result [ i ] ;
24516: LD_ADDR_VAR 0 5
24520: PUSH
24521: LD_VAR 0 2
24525: PUSH
24526: LD_VAR 0 3
24530: ARRAY
24531: ST_TO_ADDR
// end ;
24532: GO 24441
24534: POP
24535: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24536: LD_VAR 0 1
24540: PPUSH
24541: LD_VAR 0 5
24545: PPUSH
24546: CALL_OW 135
// end ;
24550: LD_VAR 0 2
24554: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
// result := [ ] ;
24570: LD_ADDR_VAR 0 7
24574: PUSH
24575: EMPTY
24576: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24577: LD_VAR 0 1
24581: PPUSH
24582: CALL_OW 266
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 1
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: IN
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 26242
// if name then
24602: LD_VAR 0 3
24606: IFFALSE 24622
// SetBName ( base_dep , name ) ;
24608: LD_VAR 0 1
24612: PPUSH
24613: LD_VAR 0 3
24617: PPUSH
24618: CALL_OW 500
// base := GetBase ( base_dep ) ;
24622: LD_ADDR_VAR 0 15
24626: PUSH
24627: LD_VAR 0 1
24631: PPUSH
24632: CALL_OW 274
24636: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24637: LD_ADDR_VAR 0 16
24641: PUSH
24642: LD_VAR 0 1
24646: PPUSH
24647: CALL_OW 255
24651: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24652: LD_ADDR_VAR 0 17
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 248
24666: ST_TO_ADDR
// if sources then
24667: LD_VAR 0 5
24671: IFFALSE 24718
// for i = 1 to 3 do
24673: LD_ADDR_VAR 0 8
24677: PUSH
24678: DOUBLE
24679: LD_INT 1
24681: DEC
24682: ST_TO_ADDR
24683: LD_INT 3
24685: PUSH
24686: FOR_TO
24687: IFFALSE 24716
// AddResourceType ( base , i , sources [ i ] ) ;
24689: LD_VAR 0 15
24693: PPUSH
24694: LD_VAR 0 8
24698: PPUSH
24699: LD_VAR 0 5
24703: PUSH
24704: LD_VAR 0 8
24708: ARRAY
24709: PPUSH
24710: CALL_OW 276
24714: GO 24686
24716: POP
24717: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24718: LD_ADDR_VAR 0 18
24722: PUSH
24723: LD_VAR 0 15
24727: PPUSH
24728: LD_VAR 0 2
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: CALL 23977 0 3
24740: ST_TO_ADDR
// InitHc ;
24741: CALL_OW 19
// InitUc ;
24745: CALL_OW 18
// uc_side := side ;
24749: LD_ADDR_OWVAR 20
24753: PUSH
24754: LD_VAR 0 16
24758: ST_TO_ADDR
// uc_nation := nation ;
24759: LD_ADDR_OWVAR 21
24763: PUSH
24764: LD_VAR 0 17
24768: ST_TO_ADDR
// if buildings then
24769: LD_VAR 0 18
24773: IFFALSE 26101
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24775: LD_ADDR_VAR 0 19
24779: PUSH
24780: LD_VAR 0 18
24784: PPUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 29
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 30
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 72
24817: ST_TO_ADDR
// if tmp then
24818: LD_VAR 0 19
24822: IFFALSE 24870
// for i in tmp do
24824: LD_ADDR_VAR 0 8
24828: PUSH
24829: LD_VAR 0 19
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24868
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24837: LD_VAR 0 8
24841: PPUSH
24842: CALL_OW 250
24846: PPUSH
24847: LD_VAR 0 8
24851: PPUSH
24852: CALL_OW 251
24856: PPUSH
24857: LD_VAR 0 16
24861: PPUSH
24862: CALL_OW 441
24866: GO 24834
24868: POP
24869: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24870: LD_VAR 0 18
24874: PPUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 30
24880: PUSH
24881: LD_INT 32
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 30
24890: PUSH
24891: LD_INT 33
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 72
24907: IFFALSE 24995
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24909: LD_ADDR_VAR 0 8
24913: PUSH
24914: LD_VAR 0 18
24918: PPUSH
24919: LD_INT 2
24921: PUSH
24922: LD_INT 30
24924: PUSH
24925: LD_INT 32
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 30
24934: PUSH
24935: LD_INT 33
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 72
24951: PUSH
24952: FOR_IN
24953: IFFALSE 24993
// begin if not GetBWeapon ( i ) then
24955: LD_VAR 0 8
24959: PPUSH
24960: CALL_OW 269
24964: NOT
24965: IFFALSE 24991
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24967: LD_VAR 0 8
24971: PPUSH
24972: LD_VAR 0 8
24976: PPUSH
24977: LD_VAR 0 2
24981: PPUSH
24982: CALL 26247 0 2
24986: PPUSH
24987: CALL_OW 431
// end ;
24991: GO 24952
24993: POP
24994: POP
// end ; for i = 1 to personel do
24995: LD_ADDR_VAR 0 8
24999: PUSH
25000: DOUBLE
25001: LD_INT 1
25003: DEC
25004: ST_TO_ADDR
25005: LD_VAR 0 6
25009: PUSH
25010: FOR_TO
25011: IFFALSE 26081
// begin if i > 4 then
25013: LD_VAR 0 8
25017: PUSH
25018: LD_INT 4
25020: GREATER
25021: IFFALSE 25025
// break ;
25023: GO 26081
// case i of 1 :
25025: LD_VAR 0 8
25029: PUSH
25030: LD_INT 1
25032: DOUBLE
25033: EQUAL
25034: IFTRUE 25038
25036: GO 25118
25038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25039: LD_ADDR_VAR 0 12
25043: PUSH
25044: LD_VAR 0 18
25048: PPUSH
25049: LD_INT 22
25051: PUSH
25052: LD_VAR 0 16
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 58
25063: PUSH
25064: EMPTY
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 32
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 30
25082: PUSH
25083: LD_INT 4
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 30
25092: PUSH
25093: LD_INT 5
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 72
25115: ST_TO_ADDR
25116: GO 25340
25118: LD_INT 2
25120: DOUBLE
25121: EQUAL
25122: IFTRUE 25126
25124: GO 25188
25126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25127: LD_ADDR_VAR 0 12
25131: PUSH
25132: LD_VAR 0 18
25136: PPUSH
25137: LD_INT 22
25139: PUSH
25140: LD_VAR 0 16
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 30
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 30
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PPUSH
25181: CALL_OW 72
25185: ST_TO_ADDR
25186: GO 25340
25188: LD_INT 3
25190: DOUBLE
25191: EQUAL
25192: IFTRUE 25196
25194: GO 25258
25196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25197: LD_ADDR_VAR 0 12
25201: PUSH
25202: LD_VAR 0 18
25206: PPUSH
25207: LD_INT 22
25209: PUSH
25210: LD_VAR 0 16
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 30
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 30
25234: PUSH
25235: LD_INT 3
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PPUSH
25251: CALL_OW 72
25255: ST_TO_ADDR
25256: GO 25340
25258: LD_INT 4
25260: DOUBLE
25261: EQUAL
25262: IFTRUE 25266
25264: GO 25339
25266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25267: LD_ADDR_VAR 0 12
25271: PUSH
25272: LD_VAR 0 18
25276: PPUSH
25277: LD_INT 22
25279: PUSH
25280: LD_VAR 0 16
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 30
25294: PUSH
25295: LD_INT 6
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 7
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 30
25314: PUSH
25315: LD_INT 8
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PPUSH
25332: CALL_OW 72
25336: ST_TO_ADDR
25337: GO 25340
25339: POP
// if i = 1 then
25340: LD_VAR 0 8
25344: PUSH
25345: LD_INT 1
25347: EQUAL
25348: IFFALSE 25459
// begin tmp := [ ] ;
25350: LD_ADDR_VAR 0 19
25354: PUSH
25355: EMPTY
25356: ST_TO_ADDR
// for j in f do
25357: LD_ADDR_VAR 0 9
25361: PUSH
25362: LD_VAR 0 12
25366: PUSH
25367: FOR_IN
25368: IFFALSE 25441
// if GetBType ( j ) = b_bunker then
25370: LD_VAR 0 9
25374: PPUSH
25375: CALL_OW 266
25379: PUSH
25380: LD_INT 32
25382: EQUAL
25383: IFFALSE 25410
// tmp := Insert ( tmp , 1 , j ) else
25385: LD_ADDR_VAR 0 19
25389: PUSH
25390: LD_VAR 0 19
25394: PPUSH
25395: LD_INT 1
25397: PPUSH
25398: LD_VAR 0 9
25402: PPUSH
25403: CALL_OW 2
25407: ST_TO_ADDR
25408: GO 25439
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25410: LD_ADDR_VAR 0 19
25414: PUSH
25415: LD_VAR 0 19
25419: PPUSH
25420: LD_VAR 0 19
25424: PUSH
25425: LD_INT 1
25427: PLUS
25428: PPUSH
25429: LD_VAR 0 9
25433: PPUSH
25434: CALL_OW 2
25438: ST_TO_ADDR
25439: GO 25367
25441: POP
25442: POP
// if tmp then
25443: LD_VAR 0 19
25447: IFFALSE 25459
// f := tmp ;
25449: LD_ADDR_VAR 0 12
25453: PUSH
25454: LD_VAR 0 19
25458: ST_TO_ADDR
// end ; x := personel [ i ] ;
25459: LD_ADDR_VAR 0 13
25463: PUSH
25464: LD_VAR 0 6
25468: PUSH
25469: LD_VAR 0 8
25473: ARRAY
25474: ST_TO_ADDR
// if x = - 1 then
25475: LD_VAR 0 13
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: EQUAL
25484: IFFALSE 25695
// begin for j in f do
25486: LD_ADDR_VAR 0 9
25490: PUSH
25491: LD_VAR 0 12
25495: PUSH
25496: FOR_IN
25497: IFFALSE 25691
// repeat InitHc ;
25499: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25503: LD_VAR 0 9
25507: PPUSH
25508: CALL_OW 266
25512: PUSH
25513: LD_INT 5
25515: EQUAL
25516: IFFALSE 25586
// begin if UnitsInside ( j ) < 3 then
25518: LD_VAR 0 9
25522: PPUSH
25523: CALL_OW 313
25527: PUSH
25528: LD_INT 3
25530: LESS
25531: IFFALSE 25567
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25533: LD_INT 0
25535: PPUSH
25536: LD_INT 5
25538: PUSH
25539: LD_INT 8
25541: PUSH
25542: LD_INT 9
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: PUSH
25550: LD_VAR 0 17
25554: ARRAY
25555: PPUSH
25556: LD_VAR 0 4
25560: PPUSH
25561: CALL_OW 380
25565: GO 25584
// PrepareHuman ( false , i , skill ) ;
25567: LD_INT 0
25569: PPUSH
25570: LD_VAR 0 8
25574: PPUSH
25575: LD_VAR 0 4
25579: PPUSH
25580: CALL_OW 380
// end else
25584: GO 25603
// PrepareHuman ( false , i , skill ) ;
25586: LD_INT 0
25588: PPUSH
25589: LD_VAR 0 8
25593: PPUSH
25594: LD_VAR 0 4
25598: PPUSH
25599: CALL_OW 380
// un := CreateHuman ;
25603: LD_ADDR_VAR 0 14
25607: PUSH
25608: CALL_OW 44
25612: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25613: LD_ADDR_VAR 0 7
25617: PUSH
25618: LD_VAR 0 7
25622: PPUSH
25623: LD_INT 1
25625: PPUSH
25626: LD_VAR 0 14
25630: PPUSH
25631: CALL_OW 2
25635: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25636: LD_VAR 0 14
25640: PPUSH
25641: LD_VAR 0 9
25645: PPUSH
25646: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25650: LD_VAR 0 9
25654: PPUSH
25655: CALL_OW 313
25659: PUSH
25660: LD_INT 6
25662: EQUAL
25663: IFTRUE 25687
25665: PUSH
25666: LD_VAR 0 9
25670: PPUSH
25671: CALL_OW 266
25675: PUSH
25676: LD_INT 32
25678: PUSH
25679: LD_INT 31
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: IN
25686: OR
25687: IFFALSE 25499
25689: GO 25496
25691: POP
25692: POP
// end else
25693: GO 26079
// for j = 1 to x do
25695: LD_ADDR_VAR 0 9
25699: PUSH
25700: DOUBLE
25701: LD_INT 1
25703: DEC
25704: ST_TO_ADDR
25705: LD_VAR 0 13
25709: PUSH
25710: FOR_TO
25711: IFFALSE 26077
// begin InitHc ;
25713: CALL_OW 19
// if not f then
25717: LD_VAR 0 12
25721: NOT
25722: IFFALSE 25811
// begin PrepareHuman ( false , i , skill ) ;
25724: LD_INT 0
25726: PPUSH
25727: LD_VAR 0 8
25731: PPUSH
25732: LD_VAR 0 4
25736: PPUSH
25737: CALL_OW 380
// un := CreateHuman ;
25741: LD_ADDR_VAR 0 14
25745: PUSH
25746: CALL_OW 44
25750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25751: LD_ADDR_VAR 0 7
25755: PUSH
25756: LD_VAR 0 7
25760: PPUSH
25761: LD_INT 1
25763: PPUSH
25764: LD_VAR 0 14
25768: PPUSH
25769: CALL_OW 2
25773: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25774: LD_VAR 0 14
25778: PPUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 250
25788: PPUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 251
25798: PPUSH
25799: LD_INT 10
25801: PPUSH
25802: LD_INT 0
25804: PPUSH
25805: CALL_OW 50
// continue ;
25809: GO 25710
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25811: LD_VAR 0 12
25815: PUSH
25816: LD_INT 1
25818: ARRAY
25819: PPUSH
25820: CALL_OW 313
25824: IFFALSE 25852
25826: PUSH
25827: LD_VAR 0 12
25831: PUSH
25832: LD_INT 1
25834: ARRAY
25835: PPUSH
25836: CALL_OW 266
25840: PUSH
25841: LD_INT 32
25843: PUSH
25844: LD_INT 31
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: IN
25851: AND
25852: IFTRUE 25873
25854: PUSH
25855: LD_VAR 0 12
25859: PUSH
25860: LD_INT 1
25862: ARRAY
25863: PPUSH
25864: CALL_OW 313
25868: PUSH
25869: LD_INT 6
25871: EQUAL
25872: OR
25873: IFFALSE 25893
// f := Delete ( f , 1 ) ;
25875: LD_ADDR_VAR 0 12
25879: PUSH
25880: LD_VAR 0 12
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 3
25892: ST_TO_ADDR
// if not f then
25893: LD_VAR 0 12
25897: NOT
25898: IFFALSE 25916
// begin x := x + 2 ;
25900: LD_ADDR_VAR 0 13
25904: PUSH
25905: LD_VAR 0 13
25909: PUSH
25910: LD_INT 2
25912: PLUS
25913: ST_TO_ADDR
// continue ;
25914: GO 25710
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25916: LD_VAR 0 12
25920: PUSH
25921: LD_INT 1
25923: ARRAY
25924: PPUSH
25925: CALL_OW 266
25929: PUSH
25930: LD_INT 5
25932: EQUAL
25933: IFFALSE 26007
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25935: LD_VAR 0 12
25939: PUSH
25940: LD_INT 1
25942: ARRAY
25943: PPUSH
25944: CALL_OW 313
25948: PUSH
25949: LD_INT 3
25951: LESS
25952: IFFALSE 25988
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25954: LD_INT 0
25956: PPUSH
25957: LD_INT 5
25959: PUSH
25960: LD_INT 8
25962: PUSH
25963: LD_INT 9
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: PUSH
25971: LD_VAR 0 17
25975: ARRAY
25976: PPUSH
25977: LD_VAR 0 4
25981: PPUSH
25982: CALL_OW 380
25986: GO 26005
// PrepareHuman ( false , i , skill ) ;
25988: LD_INT 0
25990: PPUSH
25991: LD_VAR 0 8
25995: PPUSH
25996: LD_VAR 0 4
26000: PPUSH
26001: CALL_OW 380
// end else
26005: GO 26024
// PrepareHuman ( false , i , skill ) ;
26007: LD_INT 0
26009: PPUSH
26010: LD_VAR 0 8
26014: PPUSH
26015: LD_VAR 0 4
26019: PPUSH
26020: CALL_OW 380
// un := CreateHuman ;
26024: LD_ADDR_VAR 0 14
26028: PUSH
26029: CALL_OW 44
26033: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26034: LD_ADDR_VAR 0 7
26038: PUSH
26039: LD_VAR 0 7
26043: PPUSH
26044: LD_INT 1
26046: PPUSH
26047: LD_VAR 0 14
26051: PPUSH
26052: CALL_OW 2
26056: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26057: LD_VAR 0 14
26061: PPUSH
26062: LD_VAR 0 12
26066: PUSH
26067: LD_INT 1
26069: ARRAY
26070: PPUSH
26071: CALL_OW 52
// end ;
26075: GO 25710
26077: POP
26078: POP
// end ;
26079: GO 25010
26081: POP
26082: POP
// result := result ^ buildings ;
26083: LD_ADDR_VAR 0 7
26087: PUSH
26088: LD_VAR 0 7
26092: PUSH
26093: LD_VAR 0 18
26097: ADD
26098: ST_TO_ADDR
// end else
26099: GO 26242
// begin for i = 1 to personel do
26101: LD_ADDR_VAR 0 8
26105: PUSH
26106: DOUBLE
26107: LD_INT 1
26109: DEC
26110: ST_TO_ADDR
26111: LD_VAR 0 6
26115: PUSH
26116: FOR_TO
26117: IFFALSE 26240
// begin if i > 4 then
26119: LD_VAR 0 8
26123: PUSH
26124: LD_INT 4
26126: GREATER
26127: IFFALSE 26131
// break ;
26129: GO 26240
// x := personel [ i ] ;
26131: LD_ADDR_VAR 0 13
26135: PUSH
26136: LD_VAR 0 6
26140: PUSH
26141: LD_VAR 0 8
26145: ARRAY
26146: ST_TO_ADDR
// if x = - 1 then
26147: LD_VAR 0 13
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: EQUAL
26156: IFFALSE 26160
// continue ;
26158: GO 26116
// PrepareHuman ( false , i , skill ) ;
26160: LD_INT 0
26162: PPUSH
26163: LD_VAR 0 8
26167: PPUSH
26168: LD_VAR 0 4
26172: PPUSH
26173: CALL_OW 380
// un := CreateHuman ;
26177: LD_ADDR_VAR 0 14
26181: PUSH
26182: CALL_OW 44
26186: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26187: LD_VAR 0 14
26191: PPUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: CALL_OW 250
26201: PPUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 251
26211: PPUSH
26212: LD_INT 10
26214: PPUSH
26215: LD_INT 0
26217: PPUSH
26218: CALL_OW 50
// result := result ^ un ;
26222: LD_ADDR_VAR 0 7
26226: PUSH
26227: LD_VAR 0 7
26231: PUSH
26232: LD_VAR 0 14
26236: ADD
26237: ST_TO_ADDR
// end ;
26238: GO 26116
26240: POP
26241: POP
// end ; end ;
26242: LD_VAR 0 7
26246: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26247: LD_INT 0
26249: PPUSH
26250: PPUSH
26251: PPUSH
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
26264: PPUSH
// result := false ;
26265: LD_ADDR_VAR 0 3
26269: PUSH
26270: LD_INT 0
26272: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26273: LD_VAR 0 1
26277: NOT
26278: IFTRUE 26303
26280: PUSH
26281: LD_VAR 0 1
26285: PPUSH
26286: CALL_OW 266
26290: PUSH
26291: LD_INT 32
26293: PUSH
26294: LD_INT 33
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: IN
26301: NOT
26302: OR
26303: IFFALSE 26307
// exit ;
26305: GO 27442
// nat := GetNation ( tower ) ;
26307: LD_ADDR_VAR 0 12
26311: PUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 248
26321: ST_TO_ADDR
// side := GetSide ( tower ) ;
26322: LD_ADDR_VAR 0 16
26326: PUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL_OW 255
26336: ST_TO_ADDR
// x := GetX ( tower ) ;
26337: LD_ADDR_VAR 0 10
26341: PUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: CALL_OW 250
26351: ST_TO_ADDR
// y := GetY ( tower ) ;
26352: LD_ADDR_VAR 0 11
26356: PUSH
26357: LD_VAR 0 1
26361: PPUSH
26362: CALL_OW 251
26366: ST_TO_ADDR
// if not x or not y then
26367: LD_VAR 0 10
26371: NOT
26372: IFTRUE 26381
26374: PUSH
26375: LD_VAR 0 11
26379: NOT
26380: OR
26381: IFFALSE 26385
// exit ;
26383: GO 27442
// weapon := 0 ;
26385: LD_ADDR_VAR 0 18
26389: PUSH
26390: LD_INT 0
26392: ST_TO_ADDR
// fac_list := [ ] ;
26393: LD_ADDR_VAR 0 17
26397: PUSH
26398: EMPTY
26399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26400: LD_ADDR_VAR 0 6
26404: PUSH
26405: LD_VAR 0 1
26409: PPUSH
26410: CALL_OW 274
26414: PPUSH
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_INT 0
26422: PPUSH
26423: CALL 23977 0 3
26427: PPUSH
26428: LD_INT 30
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PPUSH
26438: CALL_OW 72
26442: ST_TO_ADDR
// if not factories then
26443: LD_VAR 0 6
26447: NOT
26448: IFFALSE 26452
// exit ;
26450: GO 27442
// for i in factories do
26452: LD_ADDR_VAR 0 8
26456: PUSH
26457: LD_VAR 0 6
26461: PUSH
26462: FOR_IN
26463: IFFALSE 26488
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26465: LD_ADDR_VAR 0 17
26469: PUSH
26470: LD_VAR 0 17
26474: PUSH
26475: LD_VAR 0 8
26479: PPUSH
26480: CALL_OW 478
26484: UNION
26485: ST_TO_ADDR
26486: GO 26462
26488: POP
26489: POP
// if not fac_list then
26490: LD_VAR 0 17
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 27442
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26499: LD_ADDR_VAR 0 5
26503: PUSH
26504: LD_INT 4
26506: PUSH
26507: LD_INT 5
26509: PUSH
26510: LD_INT 9
26512: PUSH
26513: LD_INT 10
26515: PUSH
26516: LD_INT 6
26518: PUSH
26519: LD_INT 7
26521: PUSH
26522: LD_INT 11
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 27
26536: PUSH
26537: LD_INT 28
26539: PUSH
26540: LD_INT 26
26542: PUSH
26543: LD_INT 30
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 43
26554: PUSH
26555: LD_INT 44
26557: PUSH
26558: LD_INT 46
26560: PUSH
26561: LD_INT 45
26563: PUSH
26564: LD_INT 47
26566: PUSH
26567: LD_INT 49
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: PUSH
26583: LD_VAR 0 12
26587: ARRAY
26588: ST_TO_ADDR
// list := list isect fac_list ;
26589: LD_ADDR_VAR 0 5
26593: PUSH
26594: LD_VAR 0 5
26598: PUSH
26599: LD_VAR 0 17
26603: ISECT
26604: ST_TO_ADDR
// if not list then
26605: LD_VAR 0 5
26609: NOT
26610: IFFALSE 26614
// exit ;
26612: GO 27442
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26614: LD_VAR 0 12
26618: PUSH
26619: LD_INT 3
26621: EQUAL
26622: IFFALSE 26634
26624: PUSH
26625: LD_INT 49
26627: PUSH
26628: LD_VAR 0 5
26632: IN
26633: AND
26634: IFFALSE 26654
26636: PUSH
26637: LD_INT 31
26639: PPUSH
26640: LD_VAR 0 16
26644: PPUSH
26645: CALL_OW 321
26649: PUSH
26650: LD_INT 2
26652: EQUAL
26653: AND
26654: IFFALSE 26714
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26656: LD_INT 22
26658: PUSH
26659: LD_VAR 0 16
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 35
26670: PUSH
26671: LD_INT 49
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 91
26680: PUSH
26681: LD_VAR 0 1
26685: PUSH
26686: LD_INT 10
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: NOT
26704: IFFALSE 26714
// weapon := ru_time_lapser ;
26706: LD_ADDR_VAR 0 18
26710: PUSH
26711: LD_INT 49
26713: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26714: LD_VAR 0 12
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: IN
26729: IFFALSE 26753
26731: PUSH
26732: LD_INT 11
26734: PUSH
26735: LD_VAR 0 5
26739: IN
26740: IFTRUE 26752
26742: PUSH
26743: LD_INT 30
26745: PUSH
26746: LD_VAR 0 5
26750: IN
26751: OR
26752: AND
26753: IFFALSE 26773
26755: PUSH
26756: LD_INT 6
26758: PPUSH
26759: LD_VAR 0 16
26763: PPUSH
26764: CALL_OW 321
26768: PUSH
26769: LD_INT 2
26771: EQUAL
26772: AND
26773: IFFALSE 26940
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26775: LD_INT 22
26777: PUSH
26778: LD_VAR 0 16
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 2
26789: PUSH
26790: LD_INT 35
26792: PUSH
26793: LD_INT 11
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 35
26802: PUSH
26803: LD_INT 30
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 91
26817: PUSH
26818: LD_VAR 0 1
26822: PUSH
26823: LD_INT 18
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: PPUSH
26836: CALL_OW 69
26840: NOT
26841: IFFALSE 26917
26843: PUSH
26844: LD_INT 22
26846: PUSH
26847: LD_VAR 0 16
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 30
26861: PUSH
26862: LD_INT 32
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 30
26871: PUSH
26872: LD_INT 33
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 91
26886: PUSH
26887: LD_VAR 0 1
26891: PUSH
26892: LD_INT 12
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: PPUSH
26908: CALL_OW 69
26912: PUSH
26913: LD_INT 2
26915: GREATER
26916: AND
26917: IFFALSE 26940
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26919: LD_ADDR_VAR 0 18
26923: PUSH
26924: LD_INT 11
26926: PUSH
26927: LD_INT 30
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_VAR 0 12
26938: ARRAY
26939: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26940: LD_VAR 0 18
26944: NOT
26945: IFFALSE 26965
26947: PUSH
26948: LD_INT 40
26950: PPUSH
26951: LD_VAR 0 16
26955: PPUSH
26956: CALL_OW 321
26960: PUSH
26961: LD_INT 2
26963: EQUAL
26964: AND
26965: IFFALSE 27001
26967: PUSH
26968: LD_INT 7
26970: PUSH
26971: LD_VAR 0 5
26975: IN
26976: IFTRUE 26988
26978: PUSH
26979: LD_INT 28
26981: PUSH
26982: LD_VAR 0 5
26986: IN
26987: OR
26988: IFTRUE 27000
26990: PUSH
26991: LD_INT 45
26993: PUSH
26994: LD_VAR 0 5
26998: IN
26999: OR
27000: AND
27001: IFFALSE 27255
// begin hex := GetHexInfo ( x , y ) ;
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: LD_VAR 0 10
27012: PPUSH
27013: LD_VAR 0 11
27017: PPUSH
27018: CALL_OW 546
27022: ST_TO_ADDR
// if hex [ 1 ] then
27023: LD_VAR 0 4
27027: PUSH
27028: LD_INT 1
27030: ARRAY
27031: IFFALSE 27035
// exit ;
27033: GO 27442
// height := hex [ 2 ] ;
27035: LD_ADDR_VAR 0 15
27039: PUSH
27040: LD_VAR 0 4
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27049: LD_ADDR_VAR 0 14
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 3
27062: PUSH
27063: LD_INT 5
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// for i in tmp do
27072: LD_ADDR_VAR 0 8
27076: PUSH
27077: LD_VAR 0 14
27081: PUSH
27082: FOR_IN
27083: IFFALSE 27253
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27085: LD_ADDR_VAR 0 9
27089: PUSH
27090: LD_VAR 0 10
27094: PPUSH
27095: LD_VAR 0 8
27099: PPUSH
27100: LD_INT 5
27102: PPUSH
27103: CALL_OW 272
27107: PUSH
27108: LD_VAR 0 11
27112: PPUSH
27113: LD_VAR 0 8
27117: PPUSH
27118: LD_INT 5
27120: PPUSH
27121: CALL_OW 273
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27130: LD_VAR 0 9
27134: PUSH
27135: LD_INT 1
27137: ARRAY
27138: PPUSH
27139: LD_VAR 0 9
27143: PUSH
27144: LD_INT 2
27146: ARRAY
27147: PPUSH
27148: CALL_OW 488
27152: IFFALSE 27251
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27154: LD_ADDR_VAR 0 4
27158: PUSH
27159: LD_VAR 0 9
27163: PUSH
27164: LD_INT 1
27166: ARRAY
27167: PPUSH
27168: LD_VAR 0 9
27172: PUSH
27173: LD_INT 2
27175: ARRAY
27176: PPUSH
27177: CALL_OW 546
27181: ST_TO_ADDR
// if hex [ 1 ] then
27182: LD_VAR 0 4
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: IFFALSE 27194
// continue ;
27192: GO 27082
// h := hex [ 2 ] ;
27194: LD_ADDR_VAR 0 13
27198: PUSH
27199: LD_VAR 0 4
27203: PUSH
27204: LD_INT 2
27206: ARRAY
27207: ST_TO_ADDR
// if h + 7 < height then
27208: LD_VAR 0 13
27212: PUSH
27213: LD_INT 7
27215: PLUS
27216: PUSH
27217: LD_VAR 0 15
27221: LESS
27222: IFFALSE 27251
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27224: LD_ADDR_VAR 0 18
27228: PUSH
27229: LD_INT 7
27231: PUSH
27232: LD_INT 28
27234: PUSH
27235: LD_INT 45
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: PUSH
27243: LD_VAR 0 12
27247: ARRAY
27248: ST_TO_ADDR
// break ;
27249: GO 27253
// end ; end ; end ;
27251: GO 27082
27253: POP
27254: POP
// end ; if not weapon then
27255: LD_VAR 0 18
27259: NOT
27260: IFFALSE 27320
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27262: LD_ADDR_VAR 0 5
27266: PUSH
27267: LD_VAR 0 5
27271: PUSH
27272: LD_INT 11
27274: PUSH
27275: LD_INT 30
27277: PUSH
27278: LD_INT 49
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: DIFF
27286: ST_TO_ADDR
// if not list then
27287: LD_VAR 0 5
27291: NOT
27292: IFFALSE 27296
// exit ;
27294: GO 27442
// weapon := list [ rand ( 1 , list ) ] ;
27296: LD_ADDR_VAR 0 18
27300: PUSH
27301: LD_VAR 0 5
27305: PUSH
27306: LD_INT 1
27308: PPUSH
27309: LD_VAR 0 5
27313: PPUSH
27314: CALL_OW 12
27318: ARRAY
27319: ST_TO_ADDR
// end ; if weapon then
27320: LD_VAR 0 18
27324: IFFALSE 27442
// begin tmp := CostOfWeapon ( weapon ) ;
27326: LD_ADDR_VAR 0 14
27330: PUSH
27331: LD_VAR 0 18
27335: PPUSH
27336: CALL_OW 451
27340: ST_TO_ADDR
// j := GetBase ( tower ) ;
27341: LD_ADDR_VAR 0 9
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 274
27355: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27356: LD_VAR 0 9
27360: PPUSH
27361: LD_INT 1
27363: PPUSH
27364: CALL_OW 275
27368: PUSH
27369: LD_VAR 0 14
27373: PUSH
27374: LD_INT 1
27376: ARRAY
27377: GREATEREQUAL
27378: IFFALSE 27404
27380: PUSH
27381: LD_VAR 0 9
27385: PPUSH
27386: LD_INT 2
27388: PPUSH
27389: CALL_OW 275
27393: PUSH
27394: LD_VAR 0 14
27398: PUSH
27399: LD_INT 2
27401: ARRAY
27402: GREATEREQUAL
27403: AND
27404: IFFALSE 27430
27406: PUSH
27407: LD_VAR 0 9
27411: PPUSH
27412: LD_INT 3
27414: PPUSH
27415: CALL_OW 275
27419: PUSH
27420: LD_VAR 0 14
27424: PUSH
27425: LD_INT 3
27427: ARRAY
27428: GREATEREQUAL
27429: AND
27430: IFFALSE 27442
// result := weapon ;
27432: LD_ADDR_VAR 0 3
27436: PUSH
27437: LD_VAR 0 18
27441: ST_TO_ADDR
// end ; end ;
27442: LD_VAR 0 3
27446: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27447: LD_INT 0
27449: PPUSH
27450: PPUSH
// result := true ;
27451: LD_ADDR_VAR 0 3
27455: PUSH
27456: LD_INT 1
27458: ST_TO_ADDR
// if array1 = array2 then
27459: LD_VAR 0 1
27463: PUSH
27464: LD_VAR 0 2
27468: EQUAL
27469: IFFALSE 27529
// begin for i = 1 to array1 do
27471: LD_ADDR_VAR 0 4
27475: PUSH
27476: DOUBLE
27477: LD_INT 1
27479: DEC
27480: ST_TO_ADDR
27481: LD_VAR 0 1
27485: PUSH
27486: FOR_TO
27487: IFFALSE 27525
// if array1 [ i ] <> array2 [ i ] then
27489: LD_VAR 0 1
27493: PUSH
27494: LD_VAR 0 4
27498: ARRAY
27499: PUSH
27500: LD_VAR 0 2
27504: PUSH
27505: LD_VAR 0 4
27509: ARRAY
27510: NONEQUAL
27511: IFFALSE 27523
// begin result := false ;
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_INT 0
27520: ST_TO_ADDR
// break ;
27521: GO 27525
// end ;
27523: GO 27486
27525: POP
27526: POP
// end else
27527: GO 27537
// result := false ;
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_INT 0
27536: ST_TO_ADDR
// end ;
27537: LD_VAR 0 3
27541: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27542: LD_INT 0
27544: PPUSH
27545: PPUSH
// if not array1 or not array2 then
27546: LD_VAR 0 1
27550: NOT
27551: IFTRUE 27560
27553: PUSH
27554: LD_VAR 0 2
27558: NOT
27559: OR
27560: IFFALSE 27564
// exit ;
27562: GO 27628
// result := true ;
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_INT 1
27571: ST_TO_ADDR
// for i = 1 to array1 do
27572: LD_ADDR_VAR 0 4
27576: PUSH
27577: DOUBLE
27578: LD_INT 1
27580: DEC
27581: ST_TO_ADDR
27582: LD_VAR 0 1
27586: PUSH
27587: FOR_TO
27588: IFFALSE 27626
// if array1 [ i ] <> array2 [ i ] then
27590: LD_VAR 0 1
27594: PUSH
27595: LD_VAR 0 4
27599: ARRAY
27600: PUSH
27601: LD_VAR 0 2
27605: PUSH
27606: LD_VAR 0 4
27610: ARRAY
27611: NONEQUAL
27612: IFFALSE 27624
// begin result := false ;
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_INT 0
27621: ST_TO_ADDR
// break ;
27622: GO 27626
// end ;
27624: GO 27587
27626: POP
27627: POP
// end ;
27628: LD_VAR 0 3
27632: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27633: LD_INT 0
27635: PPUSH
27636: PPUSH
27637: PPUSH
// pom := GetBase ( fac ) ;
27638: LD_ADDR_VAR 0 5
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 274
27652: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27653: LD_ADDR_VAR 0 4
27657: PUSH
27658: LD_VAR 0 2
27662: PUSH
27663: LD_INT 1
27665: ARRAY
27666: PPUSH
27667: LD_VAR 0 2
27671: PUSH
27672: LD_INT 2
27674: ARRAY
27675: PPUSH
27676: LD_VAR 0 2
27680: PUSH
27681: LD_INT 3
27683: ARRAY
27684: PPUSH
27685: LD_VAR 0 2
27689: PUSH
27690: LD_INT 4
27692: ARRAY
27693: PPUSH
27694: CALL_OW 449
27698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27699: LD_ADDR_VAR 0 3
27703: PUSH
27704: LD_VAR 0 5
27708: PPUSH
27709: LD_INT 1
27711: PPUSH
27712: CALL_OW 275
27716: PUSH
27717: LD_VAR 0 4
27721: PUSH
27722: LD_INT 1
27724: ARRAY
27725: GREATEREQUAL
27726: IFFALSE 27752
27728: PUSH
27729: LD_VAR 0 5
27733: PPUSH
27734: LD_INT 2
27736: PPUSH
27737: CALL_OW 275
27741: PUSH
27742: LD_VAR 0 4
27746: PUSH
27747: LD_INT 2
27749: ARRAY
27750: GREATEREQUAL
27751: AND
27752: IFFALSE 27778
27754: PUSH
27755: LD_VAR 0 5
27759: PPUSH
27760: LD_INT 3
27762: PPUSH
27763: CALL_OW 275
27767: PUSH
27768: LD_VAR 0 4
27772: PUSH
27773: LD_INT 3
27775: ARRAY
27776: GREATEREQUAL
27777: AND
27778: ST_TO_ADDR
// end ;
27779: LD_VAR 0 3
27783: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27784: LD_INT 0
27786: PPUSH
27787: PPUSH
27788: PPUSH
27789: PPUSH
// pom := GetBase ( building ) ;
27790: LD_ADDR_VAR 0 3
27794: PUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 274
27804: ST_TO_ADDR
// if not pom then
27805: LD_VAR 0 3
27809: NOT
27810: IFFALSE 27814
// exit ;
27812: GO 27988
// btype := GetBType ( building ) ;
27814: LD_ADDR_VAR 0 5
27818: PUSH
27819: LD_VAR 0 1
27823: PPUSH
27824: CALL_OW 266
27828: ST_TO_ADDR
// if btype = b_armoury then
27829: LD_VAR 0 5
27833: PUSH
27834: LD_INT 4
27836: EQUAL
27837: IFFALSE 27847
// btype := b_barracks ;
27839: LD_ADDR_VAR 0 5
27843: PUSH
27844: LD_INT 5
27846: ST_TO_ADDR
// if btype = b_depot then
27847: LD_VAR 0 5
27851: PUSH
27852: LD_INT 0
27854: EQUAL
27855: IFFALSE 27865
// btype := b_warehouse ;
27857: LD_ADDR_VAR 0 5
27861: PUSH
27862: LD_INT 1
27864: ST_TO_ADDR
// if btype = b_workshop then
27865: LD_VAR 0 5
27869: PUSH
27870: LD_INT 2
27872: EQUAL
27873: IFFALSE 27883
// btype := b_factory ;
27875: LD_ADDR_VAR 0 5
27879: PUSH
27880: LD_INT 3
27882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL_OW 248
27902: PPUSH
27903: CALL_OW 450
27907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27908: LD_ADDR_VAR 0 2
27912: PUSH
27913: LD_VAR 0 3
27917: PPUSH
27918: LD_INT 1
27920: PPUSH
27921: CALL_OW 275
27925: PUSH
27926: LD_VAR 0 4
27930: PUSH
27931: LD_INT 1
27933: ARRAY
27934: GREATEREQUAL
27935: IFFALSE 27961
27937: PUSH
27938: LD_VAR 0 3
27942: PPUSH
27943: LD_INT 2
27945: PPUSH
27946: CALL_OW 275
27950: PUSH
27951: LD_VAR 0 4
27955: PUSH
27956: LD_INT 2
27958: ARRAY
27959: GREATEREQUAL
27960: AND
27961: IFFALSE 27987
27963: PUSH
27964: LD_VAR 0 3
27968: PPUSH
27969: LD_INT 3
27971: PPUSH
27972: CALL_OW 275
27976: PUSH
27977: LD_VAR 0 4
27981: PUSH
27982: LD_INT 3
27984: ARRAY
27985: GREATEREQUAL
27986: AND
27987: ST_TO_ADDR
// end ;
27988: LD_VAR 0 2
27992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27993: LD_INT 0
27995: PPUSH
27996: PPUSH
27997: PPUSH
// pom := GetBase ( building ) ;
27998: LD_ADDR_VAR 0 4
28002: PUSH
28003: LD_VAR 0 1
28007: PPUSH
28008: CALL_OW 274
28012: ST_TO_ADDR
// if not pom then
28013: LD_VAR 0 4
28017: NOT
28018: IFFALSE 28022
// exit ;
28020: GO 28127
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28022: LD_ADDR_VAR 0 5
28026: PUSH
28027: LD_VAR 0 2
28031: PPUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 248
28041: PPUSH
28042: CALL_OW 450
28046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_VAR 0 4
28056: PPUSH
28057: LD_INT 1
28059: PPUSH
28060: CALL_OW 275
28064: PUSH
28065: LD_VAR 0 5
28069: PUSH
28070: LD_INT 1
28072: ARRAY
28073: GREATEREQUAL
28074: IFFALSE 28100
28076: PUSH
28077: LD_VAR 0 4
28081: PPUSH
28082: LD_INT 2
28084: PPUSH
28085: CALL_OW 275
28089: PUSH
28090: LD_VAR 0 5
28094: PUSH
28095: LD_INT 2
28097: ARRAY
28098: GREATEREQUAL
28099: AND
28100: IFFALSE 28126
28102: PUSH
28103: LD_VAR 0 4
28107: PPUSH
28108: LD_INT 3
28110: PPUSH
28111: CALL_OW 275
28115: PUSH
28116: LD_VAR 0 5
28120: PUSH
28121: LD_INT 3
28123: ARRAY
28124: GREATEREQUAL
28125: AND
28126: ST_TO_ADDR
// end ;
28127: LD_VAR 0 3
28131: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28132: LD_INT 0
28134: PPUSH
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
28144: PPUSH
// result := false ;
28145: LD_ADDR_VAR 0 8
28149: PUSH
28150: LD_INT 0
28152: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28153: LD_VAR 0 5
28157: NOT
28158: IFTRUE 28167
28160: PUSH
28161: LD_VAR 0 1
28165: NOT
28166: OR
28167: IFTRUE 28176
28169: PUSH
28170: LD_VAR 0 2
28174: NOT
28175: OR
28176: IFTRUE 28185
28178: PUSH
28179: LD_VAR 0 3
28183: NOT
28184: OR
28185: IFFALSE 28189
// exit ;
28187: GO 29015
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28189: LD_ADDR_VAR 0 14
28193: PUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_VAR 0 2
28203: PPUSH
28204: LD_VAR 0 3
28208: PPUSH
28209: LD_VAR 0 4
28213: PPUSH
28214: LD_VAR 0 5
28218: PUSH
28219: LD_INT 1
28221: ARRAY
28222: PPUSH
28223: CALL_OW 248
28227: PPUSH
28228: LD_INT 0
28230: PPUSH
28231: CALL 30296 0 6
28235: ST_TO_ADDR
// if not hexes then
28236: LD_VAR 0 14
28240: NOT
28241: IFFALSE 28245
// exit ;
28243: GO 29015
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28245: LD_ADDR_VAR 0 17
28249: PUSH
28250: LD_VAR 0 5
28254: PPUSH
28255: LD_INT 22
28257: PUSH
28258: LD_VAR 0 13
28262: PPUSH
28263: CALL_OW 255
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 30
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 30
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PPUSH
28304: CALL_OW 72
28308: ST_TO_ADDR
// for i = 1 to hexes do
28309: LD_ADDR_VAR 0 9
28313: PUSH
28314: DOUBLE
28315: LD_INT 1
28317: DEC
28318: ST_TO_ADDR
28319: LD_VAR 0 14
28323: PUSH
28324: FOR_TO
28325: IFFALSE 29013
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28327: LD_ADDR_VAR 0 13
28331: PUSH
28332: LD_VAR 0 14
28336: PUSH
28337: LD_VAR 0 9
28341: ARRAY
28342: PUSH
28343: LD_INT 1
28345: ARRAY
28346: PPUSH
28347: LD_VAR 0 14
28351: PUSH
28352: LD_VAR 0 9
28356: ARRAY
28357: PUSH
28358: LD_INT 2
28360: ARRAY
28361: PPUSH
28362: CALL_OW 428
28366: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28367: LD_VAR 0 14
28371: PUSH
28372: LD_VAR 0 9
28376: ARRAY
28377: PUSH
28378: LD_INT 1
28380: ARRAY
28381: PPUSH
28382: LD_VAR 0 14
28386: PUSH
28387: LD_VAR 0 9
28391: ARRAY
28392: PUSH
28393: LD_INT 2
28395: ARRAY
28396: PPUSH
28397: CALL_OW 351
28401: IFTRUE 28440
28403: PUSH
28404: LD_VAR 0 14
28408: PUSH
28409: LD_VAR 0 9
28413: ARRAY
28414: PUSH
28415: LD_INT 1
28417: ARRAY
28418: PPUSH
28419: LD_VAR 0 14
28423: PUSH
28424: LD_VAR 0 9
28428: ARRAY
28429: PUSH
28430: LD_INT 2
28432: ARRAY
28433: PPUSH
28434: CALL_OW 488
28438: NOT
28439: OR
28440: IFTRUE 28457
28442: PUSH
28443: LD_VAR 0 13
28447: PPUSH
28448: CALL_OW 247
28452: PUSH
28453: LD_INT 3
28455: EQUAL
28456: OR
28457: IFFALSE 28463
// exit ;
28459: POP
28460: POP
28461: GO 29015
// if not tmp then
28463: LD_VAR 0 13
28467: NOT
28468: IFFALSE 28472
// continue ;
28470: GO 28324
// result := true ;
28472: LD_ADDR_VAR 0 8
28476: PUSH
28477: LD_INT 1
28479: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28480: LD_VAR 0 6
28484: IFFALSE 28501
28486: PUSH
28487: LD_VAR 0 13
28491: PPUSH
28492: CALL_OW 247
28496: PUSH
28497: LD_INT 2
28499: EQUAL
28500: AND
28501: IFFALSE 28518
28503: PUSH
28504: LD_VAR 0 13
28508: PPUSH
28509: CALL_OW 263
28513: PUSH
28514: LD_INT 1
28516: EQUAL
28517: AND
28518: IFFALSE 28682
// begin if IsDrivenBy ( tmp ) then
28520: LD_VAR 0 13
28524: PPUSH
28525: CALL_OW 311
28529: IFFALSE 28533
// continue ;
28531: GO 28324
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28533: LD_VAR 0 6
28537: PPUSH
28538: LD_INT 3
28540: PUSH
28541: LD_INT 60
28543: PUSH
28544: EMPTY
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: LD_INT 55
28556: PUSH
28557: EMPTY
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PPUSH
28568: CALL_OW 72
28572: IFFALSE 28680
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28574: LD_ADDR_VAR 0 18
28578: PUSH
28579: LD_VAR 0 6
28583: PPUSH
28584: LD_INT 3
28586: PUSH
28587: LD_INT 60
28589: PUSH
28590: EMPTY
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: LD_INT 55
28602: PUSH
28603: EMPTY
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PPUSH
28614: CALL_OW 72
28618: PUSH
28619: LD_INT 1
28621: ARRAY
28622: ST_TO_ADDR
// if IsInUnit ( driver ) then
28623: LD_VAR 0 18
28627: PPUSH
28628: CALL_OW 310
28632: IFFALSE 28643
// ComExit ( driver ) ;
28634: LD_VAR 0 18
28638: PPUSH
28639: CALL 54296 0 1
// AddComEnterUnit ( driver , tmp ) ;
28643: LD_VAR 0 18
28647: PPUSH
28648: LD_VAR 0 13
28652: PPUSH
28653: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28657: LD_VAR 0 18
28661: PPUSH
28662: LD_VAR 0 7
28666: PPUSH
28667: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28671: LD_VAR 0 18
28675: PPUSH
28676: CALL_OW 181
// end ; continue ;
28680: GO 28324
// end ; if not cleaners or not tmp in cleaners then
28682: LD_VAR 0 6
28686: NOT
28687: IFTRUE 28702
28689: PUSH
28690: LD_VAR 0 13
28694: PUSH
28695: LD_VAR 0 6
28699: IN
28700: NOT
28701: OR
28702: IFFALSE 29011
// begin if dep then
28704: LD_VAR 0 17
28708: IFFALSE 28844
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28710: LD_ADDR_VAR 0 16
28714: PUSH
28715: LD_VAR 0 17
28719: PUSH
28720: LD_INT 1
28722: ARRAY
28723: PPUSH
28724: CALL_OW 250
28728: PPUSH
28729: LD_VAR 0 17
28733: PUSH
28734: LD_INT 1
28736: ARRAY
28737: PPUSH
28738: CALL_OW 254
28742: PPUSH
28743: LD_INT 5
28745: PPUSH
28746: CALL_OW 272
28750: PUSH
28751: LD_VAR 0 17
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: CALL_OW 251
28764: PPUSH
28765: LD_VAR 0 17
28769: PUSH
28770: LD_INT 1
28772: ARRAY
28773: PPUSH
28774: CALL_OW 254
28778: PPUSH
28779: LD_INT 5
28781: PPUSH
28782: CALL_OW 273
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28791: LD_VAR 0 16
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 16
28804: PUSH
28805: LD_INT 2
28807: ARRAY
28808: PPUSH
28809: CALL_OW 488
28813: IFFALSE 28844
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28815: LD_VAR 0 13
28819: PPUSH
28820: LD_VAR 0 16
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: PPUSH
28829: LD_VAR 0 16
28833: PUSH
28834: LD_INT 2
28836: ARRAY
28837: PPUSH
28838: CALL_OW 111
// continue ;
28842: GO 28324
// end ; end ; r := GetDir ( tmp ) ;
28844: LD_ADDR_VAR 0 15
28848: PUSH
28849: LD_VAR 0 13
28853: PPUSH
28854: CALL_OW 254
28858: ST_TO_ADDR
// if r = 5 then
28859: LD_VAR 0 15
28863: PUSH
28864: LD_INT 5
28866: EQUAL
28867: IFFALSE 28877
// r := 0 ;
28869: LD_ADDR_VAR 0 15
28873: PUSH
28874: LD_INT 0
28876: ST_TO_ADDR
// for j = r to 5 do
28877: LD_ADDR_VAR 0 10
28881: PUSH
28882: DOUBLE
28883: LD_VAR 0 15
28887: DEC
28888: ST_TO_ADDR
28889: LD_INT 5
28891: PUSH
28892: FOR_TO
28893: IFFALSE 29009
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28895: LD_ADDR_VAR 0 11
28899: PUSH
28900: LD_VAR 0 13
28904: PPUSH
28905: CALL_OW 250
28909: PPUSH
28910: LD_VAR 0 10
28914: PPUSH
28915: LD_INT 2
28917: PPUSH
28918: CALL_OW 272
28922: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28923: LD_ADDR_VAR 0 12
28927: PUSH
28928: LD_VAR 0 13
28932: PPUSH
28933: CALL_OW 251
28937: PPUSH
28938: LD_VAR 0 10
28942: PPUSH
28943: LD_INT 2
28945: PPUSH
28946: CALL_OW 273
28950: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28951: LD_VAR 0 11
28955: PPUSH
28956: LD_VAR 0 12
28960: PPUSH
28961: CALL_OW 488
28965: IFFALSE 28984
28967: PUSH
28968: LD_VAR 0 11
28972: PPUSH
28973: LD_VAR 0 12
28977: PPUSH
28978: CALL_OW 428
28982: NOT
28983: AND
28984: IFFALSE 29007
// begin ComMoveXY ( tmp , _x , _y ) ;
28986: LD_VAR 0 13
28990: PPUSH
28991: LD_VAR 0 11
28995: PPUSH
28996: LD_VAR 0 12
29000: PPUSH
29001: CALL_OW 111
// break ;
29005: GO 29009
// end ; end ;
29007: GO 28892
29009: POP
29010: POP
// end ; end ;
29011: GO 28324
29013: POP
29014: POP
// end ;
29015: LD_VAR 0 8
29019: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29020: LD_INT 0
29022: PPUSH
// result := true ;
29023: LD_ADDR_VAR 0 3
29027: PUSH
29028: LD_INT 1
29030: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29031: LD_VAR 0 2
29035: PUSH
29036: LD_INT 24
29038: DOUBLE
29039: EQUAL
29040: IFTRUE 29050
29042: LD_INT 33
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29075
29050: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29051: LD_ADDR_VAR 0 3
29055: PUSH
29056: LD_INT 32
29058: PPUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 321
29068: PUSH
29069: LD_INT 2
29071: EQUAL
29072: ST_TO_ADDR
29073: GO 29391
29075: LD_INT 20
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29108
29083: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 6
29091: PPUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 321
29101: PUSH
29102: LD_INT 2
29104: EQUAL
29105: ST_TO_ADDR
29106: GO 29391
29108: LD_INT 22
29110: DOUBLE
29111: EQUAL
29112: IFTRUE 29122
29114: LD_INT 36
29116: DOUBLE
29117: EQUAL
29118: IFTRUE 29122
29120: GO 29147
29122: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29123: LD_ADDR_VAR 0 3
29127: PUSH
29128: LD_INT 15
29130: PPUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL_OW 321
29140: PUSH
29141: LD_INT 2
29143: EQUAL
29144: ST_TO_ADDR
29145: GO 29391
29147: LD_INT 30
29149: DOUBLE
29150: EQUAL
29151: IFTRUE 29155
29153: GO 29180
29155: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_INT 20
29163: PPUSH
29164: LD_VAR 0 1
29168: PPUSH
29169: CALL_OW 321
29173: PUSH
29174: LD_INT 2
29176: EQUAL
29177: ST_TO_ADDR
29178: GO 29391
29180: LD_INT 28
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29194
29186: LD_INT 21
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29219
29194: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 21
29202: PPUSH
29203: LD_VAR 0 1
29207: PPUSH
29208: CALL_OW 321
29212: PUSH
29213: LD_INT 2
29215: EQUAL
29216: ST_TO_ADDR
29217: GO 29391
29219: LD_INT 16
29221: DOUBLE
29222: EQUAL
29223: IFTRUE 29227
29225: GO 29252
29227: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29228: LD_ADDR_VAR 0 3
29232: PUSH
29233: LD_INT 84
29235: PPUSH
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL_OW 321
29245: PUSH
29246: LD_INT 2
29248: EQUAL
29249: ST_TO_ADDR
29250: GO 29391
29252: LD_INT 19
29254: DOUBLE
29255: EQUAL
29256: IFTRUE 29266
29258: LD_INT 23
29260: DOUBLE
29261: EQUAL
29262: IFTRUE 29266
29264: GO 29291
29266: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29267: LD_ADDR_VAR 0 3
29271: PUSH
29272: LD_INT 83
29274: PPUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 321
29284: PUSH
29285: LD_INT 2
29287: EQUAL
29288: ST_TO_ADDR
29289: GO 29391
29291: LD_INT 17
29293: DOUBLE
29294: EQUAL
29295: IFTRUE 29299
29297: GO 29324
29299: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29300: LD_ADDR_VAR 0 3
29304: PUSH
29305: LD_INT 39
29307: PPUSH
29308: LD_VAR 0 1
29312: PPUSH
29313: CALL_OW 321
29317: PUSH
29318: LD_INT 2
29320: EQUAL
29321: ST_TO_ADDR
29322: GO 29391
29324: LD_INT 18
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29332
29330: GO 29357
29332: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 40
29340: PPUSH
29341: LD_VAR 0 1
29345: PPUSH
29346: CALL_OW 321
29350: PUSH
29351: LD_INT 2
29353: EQUAL
29354: ST_TO_ADDR
29355: GO 29391
29357: LD_INT 27
29359: DOUBLE
29360: EQUAL
29361: IFTRUE 29365
29363: GO 29390
29365: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29366: LD_ADDR_VAR 0 3
29370: PUSH
29371: LD_INT 35
29373: PPUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 321
29383: PUSH
29384: LD_INT 2
29386: EQUAL
29387: ST_TO_ADDR
29388: GO 29391
29390: POP
// end ;
29391: LD_VAR 0 3
29395: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29396: LD_INT 0
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
// result := false ;
29409: LD_ADDR_VAR 0 6
29413: PUSH
29414: LD_INT 0
29416: ST_TO_ADDR
// if btype = b_depot then
29417: LD_VAR 0 2
29421: PUSH
29422: LD_INT 0
29424: EQUAL
29425: IFFALSE 29437
// begin result := true ;
29427: LD_ADDR_VAR 0 6
29431: PUSH
29432: LD_INT 1
29434: ST_TO_ADDR
// exit ;
29435: GO 30291
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29437: LD_VAR 0 1
29441: NOT
29442: IFTRUE 29467
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 266
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: IN
29465: NOT
29466: OR
29467: IFTRUE 29476
29469: PUSH
29470: LD_VAR 0 2
29474: NOT
29475: OR
29476: IFTRUE 29512
29478: PUSH
29479: LD_VAR 0 5
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 3
29495: PUSH
29496: LD_INT 4
29498: PUSH
29499: LD_INT 5
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: IN
29510: NOT
29511: OR
29512: IFTRUE 29531
29514: PUSH
29515: LD_VAR 0 3
29519: PPUSH
29520: LD_VAR 0 4
29524: PPUSH
29525: CALL_OW 488
29529: NOT
29530: OR
29531: IFFALSE 29535
// exit ;
29533: GO 30291
// side := GetSide ( depot ) ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_VAR 0 1
29544: PPUSH
29545: CALL_OW 255
29549: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29550: LD_VAR 0 9
29554: PPUSH
29555: LD_VAR 0 2
29559: PPUSH
29560: CALL 29020 0 2
29564: NOT
29565: IFFALSE 29569
// exit ;
29567: GO 30291
// pom := GetBase ( depot ) ;
29569: LD_ADDR_VAR 0 10
29573: PUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 274
29583: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29584: LD_ADDR_VAR 0 11
29588: PUSH
29589: LD_VAR 0 2
29593: PPUSH
29594: LD_VAR 0 1
29598: PPUSH
29599: CALL_OW 248
29603: PPUSH
29604: CALL_OW 450
29608: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29609: LD_VAR 0 10
29613: PPUSH
29614: LD_INT 1
29616: PPUSH
29617: CALL_OW 275
29621: PUSH
29622: LD_VAR 0 11
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: GREATEREQUAL
29631: IFFALSE 29657
29633: PUSH
29634: LD_VAR 0 10
29638: PPUSH
29639: LD_INT 2
29641: PPUSH
29642: CALL_OW 275
29646: PUSH
29647: LD_VAR 0 11
29651: PUSH
29652: LD_INT 2
29654: ARRAY
29655: GREATEREQUAL
29656: AND
29657: IFFALSE 29683
29659: PUSH
29660: LD_VAR 0 10
29664: PPUSH
29665: LD_INT 3
29667: PPUSH
29668: CALL_OW 275
29672: PUSH
29673: LD_VAR 0 11
29677: PUSH
29678: LD_INT 3
29680: ARRAY
29681: GREATEREQUAL
29682: AND
29683: NOT
29684: IFFALSE 29688
// exit ;
29686: GO 30291
// if GetBType ( depot ) = b_depot then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 266
29697: PUSH
29698: LD_INT 0
29700: EQUAL
29701: IFFALSE 29713
// dist := 28 else
29703: LD_ADDR_VAR 0 14
29707: PUSH
29708: LD_INT 28
29710: ST_TO_ADDR
29711: GO 29721
// dist := 36 ;
29713: LD_ADDR_VAR 0 14
29717: PUSH
29718: LD_INT 36
29720: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: CALL_OW 297
29740: PUSH
29741: LD_VAR 0 14
29745: GREATER
29746: IFFALSE 29750
// exit ;
29748: GO 30291
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29750: LD_ADDR_VAR 0 12
29754: PUSH
29755: LD_VAR 0 2
29759: PPUSH
29760: LD_VAR 0 3
29764: PPUSH
29765: LD_VAR 0 4
29769: PPUSH
29770: LD_VAR 0 5
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 248
29784: PPUSH
29785: LD_INT 0
29787: PPUSH
29788: CALL 30296 0 6
29792: ST_TO_ADDR
// if not hexes then
29793: LD_VAR 0 12
29797: NOT
29798: IFFALSE 29802
// exit ;
29800: GO 30291
// hex := GetHexInfo ( x , y ) ;
29802: LD_ADDR_VAR 0 15
29806: PUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: LD_VAR 0 4
29816: PPUSH
29817: CALL_OW 546
29821: ST_TO_ADDR
// if hex [ 1 ] then
29822: LD_VAR 0 15
29826: PUSH
29827: LD_INT 1
29829: ARRAY
29830: IFFALSE 29834
// exit ;
29832: GO 30291
// height := hex [ 2 ] ;
29834: LD_ADDR_VAR 0 13
29838: PUSH
29839: LD_VAR 0 15
29843: PUSH
29844: LD_INT 2
29846: ARRAY
29847: ST_TO_ADDR
// for i = 1 to hexes do
29848: LD_ADDR_VAR 0 7
29852: PUSH
29853: DOUBLE
29854: LD_INT 1
29856: DEC
29857: ST_TO_ADDR
29858: LD_VAR 0 12
29862: PUSH
29863: FOR_TO
29864: IFFALSE 30208
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29866: LD_VAR 0 12
29870: PUSH
29871: LD_VAR 0 7
29875: ARRAY
29876: PUSH
29877: LD_INT 1
29879: ARRAY
29880: PPUSH
29881: LD_VAR 0 12
29885: PUSH
29886: LD_VAR 0 7
29890: ARRAY
29891: PUSH
29892: LD_INT 2
29894: ARRAY
29895: PPUSH
29896: CALL_OW 488
29900: NOT
29901: IFTRUE 29943
29903: PUSH
29904: LD_VAR 0 12
29908: PUSH
29909: LD_VAR 0 7
29913: ARRAY
29914: PUSH
29915: LD_INT 1
29917: ARRAY
29918: PPUSH
29919: LD_VAR 0 12
29923: PUSH
29924: LD_VAR 0 7
29928: ARRAY
29929: PUSH
29930: LD_INT 2
29932: ARRAY
29933: PPUSH
29934: CALL_OW 428
29938: PUSH
29939: LD_INT 0
29941: GREATER
29942: OR
29943: IFTRUE 29981
29945: PUSH
29946: LD_VAR 0 12
29950: PUSH
29951: LD_VAR 0 7
29955: ARRAY
29956: PUSH
29957: LD_INT 1
29959: ARRAY
29960: PPUSH
29961: LD_VAR 0 12
29965: PUSH
29966: LD_VAR 0 7
29970: ARRAY
29971: PUSH
29972: LD_INT 2
29974: ARRAY
29975: PPUSH
29976: CALL_OW 351
29980: OR
29981: IFFALSE 29987
// exit ;
29983: POP
29984: POP
29985: GO 30291
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29987: LD_ADDR_VAR 0 8
29991: PUSH
29992: LD_VAR 0 12
29996: PUSH
29997: LD_VAR 0 7
30001: ARRAY
30002: PUSH
30003: LD_INT 1
30005: ARRAY
30006: PPUSH
30007: LD_VAR 0 12
30011: PUSH
30012: LD_VAR 0 7
30016: ARRAY
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: PPUSH
30022: CALL_OW 546
30026: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30027: LD_VAR 0 8
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: IFTRUE 30057
30037: PUSH
30038: LD_VAR 0 8
30042: PUSH
30043: LD_INT 2
30045: ARRAY
30046: PUSH
30047: LD_VAR 0 13
30051: PUSH
30052: LD_INT 2
30054: PLUS
30055: GREATER
30056: OR
30057: IFTRUE 30079
30059: PUSH
30060: LD_VAR 0 8
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: PUSH
30069: LD_VAR 0 13
30073: PUSH
30074: LD_INT 2
30076: MINUS
30077: LESS
30078: OR
30079: IFTRUE 30147
30081: PUSH
30082: LD_VAR 0 8
30086: PUSH
30087: LD_INT 3
30089: ARRAY
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 8
30096: PUSH
30097: LD_INT 9
30099: PUSH
30100: LD_INT 10
30102: PUSH
30103: LD_INT 11
30105: PUSH
30106: LD_INT 12
30108: PUSH
30109: LD_INT 13
30111: PUSH
30112: LD_INT 16
30114: PUSH
30115: LD_INT 17
30117: PUSH
30118: LD_INT 18
30120: PUSH
30121: LD_INT 19
30123: PUSH
30124: LD_INT 20
30126: PUSH
30127: LD_INT 21
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: IN
30145: NOT
30146: OR
30147: IFTRUE 30160
30149: PUSH
30150: LD_VAR 0 8
30154: PUSH
30155: LD_INT 5
30157: ARRAY
30158: NOT
30159: OR
30160: IFTRUE 30200
30162: PUSH
30163: LD_VAR 0 8
30167: PUSH
30168: LD_INT 6
30170: ARRAY
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 2
30177: PUSH
30178: LD_INT 7
30180: PUSH
30181: LD_INT 9
30183: PUSH
30184: LD_INT 10
30186: PUSH
30187: LD_INT 11
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: IN
30198: NOT
30199: OR
30200: IFFALSE 30206
// exit ;
30202: POP
30203: POP
30204: GO 30291
// end ;
30206: GO 29863
30208: POP
30209: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30210: LD_VAR 0 9
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: LD_VAR 0 4
30224: PPUSH
30225: LD_INT 20
30227: PPUSH
30228: CALL 22110 0 4
30232: PUSH
30233: LD_INT 4
30235: ARRAY
30236: IFFALSE 30240
// exit ;
30238: GO 30291
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30240: LD_VAR 0 2
30244: PUSH
30245: LD_INT 29
30247: PUSH
30248: LD_INT 30
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: IN
30255: IFFALSE 30279
30257: PUSH
30258: LD_VAR 0 3
30262: PPUSH
30263: LD_VAR 0 4
30267: PPUSH
30268: LD_VAR 0 9
30272: PPUSH
30273: CALL_OW 440
30277: NOT
30278: AND
30279: IFFALSE 30283
// exit ;
30281: GO 30291
// result := true ;
30283: LD_ADDR_VAR 0 6
30287: PUSH
30288: LD_INT 1
30290: ST_TO_ADDR
// end ;
30291: LD_VAR 0 6
30295: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
// result = [ ] ;
30356: LD_ADDR_VAR 0 7
30360: PUSH
30361: EMPTY
30362: ST_TO_ADDR
// temp_list = [ ] ;
30363: LD_ADDR_VAR 0 9
30367: PUSH
30368: EMPTY
30369: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30370: LD_VAR 0 4
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: LD_INT 5
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: IN
30401: NOT
30402: IFTRUE 30445
30404: PUSH
30405: LD_VAR 0 1
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: IN
30420: IFFALSE 30444
30422: PUSH
30423: LD_VAR 0 5
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: IN
30442: NOT
30443: AND
30444: OR
30445: IFFALSE 30449
// exit ;
30447: GO 48848
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30449: LD_VAR 0 1
30453: PUSH
30454: LD_INT 6
30456: PUSH
30457: LD_INT 7
30459: PUSH
30460: LD_INT 8
30462: PUSH
30463: LD_INT 13
30465: PUSH
30466: LD_INT 12
30468: PUSH
30469: LD_INT 15
30471: PUSH
30472: LD_INT 11
30474: PUSH
30475: LD_INT 14
30477: PUSH
30478: LD_INT 10
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: IN
30492: IFFALSE 30502
// btype = b_lab ;
30494: LD_ADDR_VAR 0 1
30498: PUSH
30499: LD_INT 6
30501: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30502: LD_VAR 0 6
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: IN
30521: NOT
30522: IFTRUE 30590
30524: PUSH
30525: LD_VAR 0 1
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 6
30544: PUSH
30545: LD_INT 36
30547: PUSH
30548: LD_INT 4
30550: PUSH
30551: LD_INT 5
30553: PUSH
30554: LD_INT 31
30556: PUSH
30557: LD_INT 32
30559: PUSH
30560: LD_INT 33
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: IN
30576: NOT
30577: IFFALSE 30589
30579: PUSH
30580: LD_VAR 0 6
30584: PUSH
30585: LD_INT 1
30587: EQUAL
30588: AND
30589: OR
30590: IFTRUE 30622
30592: PUSH
30593: LD_VAR 0 1
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: IN
30608: NOT
30609: IFFALSE 30621
30611: PUSH
30612: LD_VAR 0 6
30616: PUSH
30617: LD_INT 2
30619: EQUAL
30620: AND
30621: OR
30622: IFFALSE 30632
// mode = 0 ;
30624: LD_ADDR_VAR 0 6
30628: PUSH
30629: LD_INT 0
30631: ST_TO_ADDR
// case mode of 0 :
30632: LD_VAR 0 6
30636: PUSH
30637: LD_INT 0
30639: DOUBLE
30640: EQUAL
30641: IFTRUE 30645
30643: GO 42098
30645: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30646: LD_ADDR_VAR 0 11
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30839: LD_ADDR_VAR 0 12
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 2
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: NEG
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31035: LD_ADDR_VAR 0 13
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: LD_INT 3
31186: NEG
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 3
31194: NEG
31195: PUSH
31196: LD_INT 2
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: NEG
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31234: LD_ADDR_VAR 0 14
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: NEG
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 3
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 2
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31430: LD_ADDR_VAR 0 15
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: LD_INT 1
31503: NEG
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31623: LD_ADDR_VAR 0 16
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: LD_INT 2
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 3
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31816: LD_ADDR_VAR 0 17
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32046: LD_ADDR_VAR 0 18
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: NEG
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32276: LD_ADDR_VAR 0 19
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 1
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 2
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 2
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32506: LD_ADDR_VAR 0 20
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32736: LD_ADDR_VAR 0 21
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 2
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 2
32935: NEG
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32966: LD_ADDR_VAR 0 22
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 1
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 2
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33196: LD_ADDR_VAR 0 23
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 2
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 2
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 3
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33476: LD_ADDR_VAR 0 24
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 2
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 3
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33752: LD_ADDR_VAR 0 25
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 2
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 3
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34026: LD_ADDR_VAR 0 26
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 1
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 3
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34302: LD_ADDR_VAR 0 27
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 3
34535: NEG
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: NEG
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34582: LD_ADDR_VAR 0 28
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 3
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34864: LD_ADDR_VAR 0 29
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 2
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: LD_INT 3
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 3
35108: NEG
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35143: LD_ADDR_VAR 0 30
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 3
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35421: LD_ADDR_VAR 0 31
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: NEG
35665: PUSH
35666: LD_INT 2
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35699: LD_ADDR_VAR 0 32
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 2
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 3
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35977: LD_ADDR_VAR 0 33
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: LD_INT 3
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 3
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: NEG
36222: PUSH
36223: LD_INT 2
36225: NEG
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36256: LD_ADDR_VAR 0 34
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 2
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 1
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 3
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 3
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36536: LD_ADDR_VAR 0 35
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36648: LD_ADDR_VAR 0 36
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36760: LD_ADDR_VAR 0 37
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36872: LD_ADDR_VAR 0 38
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36984: LD_ADDR_VAR 0 39
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37096: LD_ADDR_VAR 0 40
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37208: LD_ADDR_VAR 0 41
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: LD_INT 3
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 3
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 3
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 3
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 3
37505: NEG
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 3
37517: NEG
37518: PUSH
37519: LD_INT 3
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37558: LD_ADDR_VAR 0 42
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: LD_INT 2
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 3
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 3
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 3
37855: NEG
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 3
37867: NEG
37868: PUSH
37869: LD_INT 3
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37908: LD_ADDR_VAR 0 43
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 2
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 1
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: NEG
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: LD_INT 3
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: LD_INT 3
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 3
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38256: LD_ADDR_VAR 0 44
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 2
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 3
38530: NEG
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 3
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 3
38565: NEG
38566: PUSH
38567: LD_INT 3
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38606: LD_ADDR_VAR 0 45
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: LD_INT 3
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 3
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: LD_INT 3
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 3
38903: NEG
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: NEG
38916: PUSH
38917: LD_INT 3
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38956: LD_ADDR_VAR 0 46
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 3
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 3
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 3
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39304: LD_ADDR_VAR 0 47
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 2
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39455: LD_ADDR_VAR 0 48
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39602: LD_ADDR_VAR 0 49
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39746: LD_ADDR_VAR 0 50
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39890: LD_ADDR_VAR 0 51
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40037: LD_ADDR_VAR 0 52
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40188: LD_ADDR_VAR 0 53
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40418: LD_ADDR_VAR 0 54
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: NEG
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40648: LD_ADDR_VAR 0 55
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40878: LD_ADDR_VAR 0 56
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41108: LD_ADDR_VAR 0 57
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41338: LD_ADDR_VAR 0 58
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41568: LD_ADDR_VAR 0 59
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41656: LD_ADDR_VAR 0 60
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41744: LD_ADDR_VAR 0 61
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41832: LD_ADDR_VAR 0 62
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41920: LD_ADDR_VAR 0 63
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42008: LD_ADDR_VAR 0 64
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: ST_TO_ADDR
// end ; 1 :
42096: GO 47993
42098: LD_INT 1
42100: DOUBLE
42101: EQUAL
42102: IFTRUE 42106
42104: GO 44729
42106: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 11
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 3
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 3
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42151: LD_ADDR_VAR 0 12
42155: PUSH
42156: LD_INT 2
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42192: LD_ADDR_VAR 0 13
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42232: LD_ADDR_VAR 0 14
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42273: LD_ADDR_VAR 0 15
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42317: LD_ADDR_VAR 0 16
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 3
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 3
42336: NEG
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: NEG
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42363: LD_ADDR_VAR 0 17
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42407: LD_ADDR_VAR 0 18
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42448: LD_ADDR_VAR 0 19
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42488: LD_ADDR_VAR 0 20
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 3
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42529: LD_ADDR_VAR 0 21
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42573: LD_ADDR_VAR 0 22
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: LD_INT 3
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 3
42604: NEG
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42619: LD_ADDR_VAR 0 23
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 3
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 4
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42663: LD_ADDR_VAR 0 24
42667: PUSH
42668: LD_INT 3
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 4
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42704: LD_ADDR_VAR 0 25
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 4
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: LD_INT 4
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42744: LD_ADDR_VAR 0 26
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 3
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 4
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42785: LD_ADDR_VAR 0 27
42789: PUSH
42790: LD_INT 3
42792: NEG
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 4
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42829: LD_ADDR_VAR 0 28
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: NEG
42849: PUSH
42850: LD_INT 4
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 4
42860: NEG
42861: PUSH
42862: LD_INT 3
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42875: LD_ADDR_VAR 0 29
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 3
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 4
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 4
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 5
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 5
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: LD_INT 4
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 6
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 6
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 5
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43030: LD_ADDR_VAR 0 30
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 4
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 4
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 4
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 5
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 5
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 5
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 6
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 6
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43173: LD_ADDR_VAR 0 31
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 4
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 4
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 4
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 5
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: LD_INT 5
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 4
43260: PUSH
43261: LD_INT 5
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 6
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 6
43280: PUSH
43281: LD_INT 6
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: LD_INT 6
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43312: LD_ADDR_VAR 0 32
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 3
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 3
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 4
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 5
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 5
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 4
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 6
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 6
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 5
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43455: LD_ADDR_VAR 0 33
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 4
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 4
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 4
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 5
43541: NEG
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 5
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 5
43564: NEG
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 6
43575: NEG
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 6
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43610: LD_ADDR_VAR 0 34
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: LD_INT 3
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: NEG
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 3
43653: NEG
43654: PUSH
43655: LD_INT 4
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 4
43665: NEG
43666: PUSH
43667: LD_INT 3
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 4
43677: NEG
43678: PUSH
43679: LD_INT 4
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 4
43689: NEG
43690: PUSH
43691: LD_INT 5
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 5
43701: NEG
43702: PUSH
43703: LD_INT 4
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 5
43713: NEG
43714: PUSH
43715: LD_INT 5
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 5
43725: NEG
43726: PUSH
43727: LD_INT 6
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 6
43737: NEG
43738: PUSH
43739: LD_INT 5
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 6
43749: NEG
43750: PUSH
43751: LD_INT 6
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43773: LD_ADDR_VAR 0 41
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43817: LD_ADDR_VAR 0 42
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 3
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43858: LD_ADDR_VAR 0 43
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 3
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43898: LD_ADDR_VAR 0 44
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43939: LD_ADDR_VAR 0 45
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 3
43968: NEG
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: LIST
43982: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43983: LD_ADDR_VAR 0 46
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: LD_INT 2
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 3
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 3
44014: NEG
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44029: LD_ADDR_VAR 0 47
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44062: LD_ADDR_VAR 0 48
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44093: LD_ADDR_VAR 0 49
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44122: LD_ADDR_VAR 0 50
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 3
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44151: LD_ADDR_VAR 0 51
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44182: LD_ADDR_VAR 0 52
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44215: LD_ADDR_VAR 0 53
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 3
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 3
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 2
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44259: LD_ADDR_VAR 0 54
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44300: LD_ADDR_VAR 0 55
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 2
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44340: LD_ADDR_VAR 0 56
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 3
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44381: LD_ADDR_VAR 0 57
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: NEG
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 3
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44425: LD_ADDR_VAR 0 58
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44471: LD_ADDR_VAR 0 59
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44515: LD_ADDR_VAR 0 60
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44556: LD_ADDR_VAR 0 61
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44596: LD_ADDR_VAR 0 62
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44637: LD_ADDR_VAR 0 63
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44681: LD_ADDR_VAR 0 64
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: ST_TO_ADDR
// end ; 2 :
44727: GO 47993
44729: LD_INT 2
44731: DOUBLE
44732: EQUAL
44733: IFTRUE 44737
44735: GO 47992
44737: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44738: LD_ADDR_VAR 0 29
44742: PUSH
44743: LD_INT 4
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 4
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 4
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 5
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 4
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: LD_INT 4
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 4
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 4
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 5
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 5
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 4
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 5
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 3
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 4
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 4
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 4
45123: NEG
45124: PUSH
45125: LD_INT 4
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 4
45135: NEG
45136: PUSH
45137: LD_INT 5
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: NEG
45148: PUSH
45149: LD_INT 4
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: LD_INT 3
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 5
45183: NEG
45184: PUSH
45185: LD_INT 4
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 5
45195: NEG
45196: PUSH
45197: LD_INT 5
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: NEG
45208: PUSH
45209: LD_INT 5
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 5
45219: NEG
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45276: LD_ADDR_VAR 0 30
45280: PUSH
45281: LD_INT 4
45283: PUSH
45284: LD_INT 4
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 4
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: LD_INT 4
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 5
45313: PUSH
45314: LD_INT 5
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 4
45323: PUSH
45324: LD_INT 5
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: LD_INT 4
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 3
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 5
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 4
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 4
45466: NEG
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 4
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 3
45500: NEG
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 4
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 5
45522: NEG
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 5
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 3
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 4
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: LD_INT 4
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 4
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 4
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 5
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 4
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 4
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 5
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: LD_INT 5
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45823: LD_ADDR_VAR 0 31
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 4
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 5
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 5
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 4
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 5
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 4
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 4
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 4
46025: NEG
46026: PUSH
46027: LD_INT 4
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 4
46037: NEG
46038: PUSH
46039: LD_INT 5
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 4
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 4
46073: NEG
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 5
46085: NEG
46086: PUSH
46087: LD_INT 4
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 5
46097: NEG
46098: PUSH
46099: LD_INT 5
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: LD_INT 5
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 5
46121: NEG
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 4
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 4
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 5
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 5
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 4
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 5
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46373: LD_ADDR_VAR 0 32
46377: PUSH
46378: LD_INT 4
46380: NEG
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 4
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 5
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 5
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 5
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: LD_INT 4
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 4
46554: NEG
46555: PUSH
46556: LD_INT 4
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 4
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 4
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 4
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 5
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 4
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 3
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 5
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 4
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 4
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 4
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: LD_INT 4
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 5
46805: PUSH
46806: LD_INT 4
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: LD_INT 5
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 4
46825: PUSH
46826: LD_INT 5
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: LD_INT 4
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 5
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 3
46865: PUSH
46866: LD_INT 5
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46920: LD_ADDR_VAR 0 33
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: LD_INT 5
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 4
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 5
46987: NEG
46988: PUSH
46989: LD_INT 4
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: NEG
47000: PUSH
47001: LD_INT 5
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 5
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: NEG
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 4
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 4
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 4
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 5
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 5
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 4
47260: PUSH
47261: LD_INT 4
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 4
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 4
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 5
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 4
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 3
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 5
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47458: LD_ADDR_VAR 0 34
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 4
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 5
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 4
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 5
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 4
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 4
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 4
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 4
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 4
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 5
47680: PUSH
47681: LD_INT 4
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: LD_INT 5
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: LD_INT 5
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 5
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 4
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 4
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 4
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 4
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 5
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 5
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 5
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// end ; end ;
47990: GO 47993
47992: POP
// case btype of b_depot , b_warehouse :
47993: LD_VAR 0 1
47997: PUSH
47998: LD_INT 0
48000: DOUBLE
48001: EQUAL
48002: IFTRUE 48012
48004: LD_INT 1
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48213
48012: POP
// case nation of nation_american :
48013: LD_VAR 0 5
48017: PUSH
48018: LD_INT 1
48020: DOUBLE
48021: EQUAL
48022: IFTRUE 48026
48024: GO 48082
48026: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48027: LD_ADDR_VAR 0 9
48031: PUSH
48032: LD_VAR 0 11
48036: PUSH
48037: LD_VAR 0 12
48041: PUSH
48042: LD_VAR 0 13
48046: PUSH
48047: LD_VAR 0 14
48051: PUSH
48052: LD_VAR 0 15
48056: PUSH
48057: LD_VAR 0 16
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: PUSH
48070: LD_VAR 0 4
48074: PUSH
48075: LD_INT 1
48077: PLUS
48078: ARRAY
48079: ST_TO_ADDR
48080: GO 48211
48082: LD_INT 2
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 48146
48090: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48091: LD_ADDR_VAR 0 9
48095: PUSH
48096: LD_VAR 0 17
48100: PUSH
48101: LD_VAR 0 18
48105: PUSH
48106: LD_VAR 0 19
48110: PUSH
48111: LD_VAR 0 20
48115: PUSH
48116: LD_VAR 0 21
48120: PUSH
48121: LD_VAR 0 22
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: PUSH
48134: LD_VAR 0 4
48138: PUSH
48139: LD_INT 1
48141: PLUS
48142: ARRAY
48143: ST_TO_ADDR
48144: GO 48211
48146: LD_INT 3
48148: DOUBLE
48149: EQUAL
48150: IFTRUE 48154
48152: GO 48210
48154: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48155: LD_ADDR_VAR 0 9
48159: PUSH
48160: LD_VAR 0 23
48164: PUSH
48165: LD_VAR 0 24
48169: PUSH
48170: LD_VAR 0 25
48174: PUSH
48175: LD_VAR 0 26
48179: PUSH
48180: LD_VAR 0 27
48184: PUSH
48185: LD_VAR 0 28
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: PUSH
48198: LD_VAR 0 4
48202: PUSH
48203: LD_INT 1
48205: PLUS
48206: ARRAY
48207: ST_TO_ADDR
48208: GO 48211
48210: POP
48211: GO 48766
48213: LD_INT 2
48215: DOUBLE
48216: EQUAL
48217: IFTRUE 48227
48219: LD_INT 3
48221: DOUBLE
48222: EQUAL
48223: IFTRUE 48227
48225: GO 48283
48227: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48228: LD_ADDR_VAR 0 9
48232: PUSH
48233: LD_VAR 0 29
48237: PUSH
48238: LD_VAR 0 30
48242: PUSH
48243: LD_VAR 0 31
48247: PUSH
48248: LD_VAR 0 32
48252: PUSH
48253: LD_VAR 0 33
48257: PUSH
48258: LD_VAR 0 34
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: PUSH
48271: LD_VAR 0 4
48275: PUSH
48276: LD_INT 1
48278: PLUS
48279: ARRAY
48280: ST_TO_ADDR
48281: GO 48766
48283: LD_INT 16
48285: DOUBLE
48286: EQUAL
48287: IFTRUE 48345
48289: LD_INT 17
48291: DOUBLE
48292: EQUAL
48293: IFTRUE 48345
48295: LD_INT 18
48297: DOUBLE
48298: EQUAL
48299: IFTRUE 48345
48301: LD_INT 19
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48345
48307: LD_INT 22
48309: DOUBLE
48310: EQUAL
48311: IFTRUE 48345
48313: LD_INT 20
48315: DOUBLE
48316: EQUAL
48317: IFTRUE 48345
48319: LD_INT 21
48321: DOUBLE
48322: EQUAL
48323: IFTRUE 48345
48325: LD_INT 23
48327: DOUBLE
48328: EQUAL
48329: IFTRUE 48345
48331: LD_INT 24
48333: DOUBLE
48334: EQUAL
48335: IFTRUE 48345
48337: LD_INT 25
48339: DOUBLE
48340: EQUAL
48341: IFTRUE 48345
48343: GO 48401
48345: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48346: LD_ADDR_VAR 0 9
48350: PUSH
48351: LD_VAR 0 35
48355: PUSH
48356: LD_VAR 0 36
48360: PUSH
48361: LD_VAR 0 37
48365: PUSH
48366: LD_VAR 0 38
48370: PUSH
48371: LD_VAR 0 39
48375: PUSH
48376: LD_VAR 0 40
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: PUSH
48389: LD_VAR 0 4
48393: PUSH
48394: LD_INT 1
48396: PLUS
48397: ARRAY
48398: ST_TO_ADDR
48399: GO 48766
48401: LD_INT 6
48403: DOUBLE
48404: EQUAL
48405: IFTRUE 48457
48407: LD_INT 7
48409: DOUBLE
48410: EQUAL
48411: IFTRUE 48457
48413: LD_INT 8
48415: DOUBLE
48416: EQUAL
48417: IFTRUE 48457
48419: LD_INT 13
48421: DOUBLE
48422: EQUAL
48423: IFTRUE 48457
48425: LD_INT 12
48427: DOUBLE
48428: EQUAL
48429: IFTRUE 48457
48431: LD_INT 15
48433: DOUBLE
48434: EQUAL
48435: IFTRUE 48457
48437: LD_INT 11
48439: DOUBLE
48440: EQUAL
48441: IFTRUE 48457
48443: LD_INT 14
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48457
48449: LD_INT 10
48451: DOUBLE
48452: EQUAL
48453: IFTRUE 48457
48455: GO 48513
48457: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48458: LD_ADDR_VAR 0 9
48462: PUSH
48463: LD_VAR 0 41
48467: PUSH
48468: LD_VAR 0 42
48472: PUSH
48473: LD_VAR 0 43
48477: PUSH
48478: LD_VAR 0 44
48482: PUSH
48483: LD_VAR 0 45
48487: PUSH
48488: LD_VAR 0 46
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: PUSH
48501: LD_VAR 0 4
48505: PUSH
48506: LD_INT 1
48508: PLUS
48509: ARRAY
48510: ST_TO_ADDR
48511: GO 48766
48513: LD_INT 36
48515: DOUBLE
48516: EQUAL
48517: IFTRUE 48521
48519: GO 48577
48521: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48522: LD_ADDR_VAR 0 9
48526: PUSH
48527: LD_VAR 0 47
48531: PUSH
48532: LD_VAR 0 48
48536: PUSH
48537: LD_VAR 0 49
48541: PUSH
48542: LD_VAR 0 50
48546: PUSH
48547: LD_VAR 0 51
48551: PUSH
48552: LD_VAR 0 52
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: PUSH
48565: LD_VAR 0 4
48569: PUSH
48570: LD_INT 1
48572: PLUS
48573: ARRAY
48574: ST_TO_ADDR
48575: GO 48766
48577: LD_INT 4
48579: DOUBLE
48580: EQUAL
48581: IFTRUE 48603
48583: LD_INT 5
48585: DOUBLE
48586: EQUAL
48587: IFTRUE 48603
48589: LD_INT 34
48591: DOUBLE
48592: EQUAL
48593: IFTRUE 48603
48595: LD_INT 37
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 48659
48603: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48604: LD_ADDR_VAR 0 9
48608: PUSH
48609: LD_VAR 0 53
48613: PUSH
48614: LD_VAR 0 54
48618: PUSH
48619: LD_VAR 0 55
48623: PUSH
48624: LD_VAR 0 56
48628: PUSH
48629: LD_VAR 0 57
48633: PUSH
48634: LD_VAR 0 58
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: PUSH
48647: LD_VAR 0 4
48651: PUSH
48652: LD_INT 1
48654: PLUS
48655: ARRAY
48656: ST_TO_ADDR
48657: GO 48766
48659: LD_INT 31
48661: DOUBLE
48662: EQUAL
48663: IFTRUE 48709
48665: LD_INT 32
48667: DOUBLE
48668: EQUAL
48669: IFTRUE 48709
48671: LD_INT 33
48673: DOUBLE
48674: EQUAL
48675: IFTRUE 48709
48677: LD_INT 27
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48709
48683: LD_INT 26
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48709
48689: LD_INT 28
48691: DOUBLE
48692: EQUAL
48693: IFTRUE 48709
48695: LD_INT 29
48697: DOUBLE
48698: EQUAL
48699: IFTRUE 48709
48701: LD_INT 30
48703: DOUBLE
48704: EQUAL
48705: IFTRUE 48709
48707: GO 48765
48709: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48710: LD_ADDR_VAR 0 9
48714: PUSH
48715: LD_VAR 0 59
48719: PUSH
48720: LD_VAR 0 60
48724: PUSH
48725: LD_VAR 0 61
48729: PUSH
48730: LD_VAR 0 62
48734: PUSH
48735: LD_VAR 0 63
48739: PUSH
48740: LD_VAR 0 64
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: PUSH
48753: LD_VAR 0 4
48757: PUSH
48758: LD_INT 1
48760: PLUS
48761: ARRAY
48762: ST_TO_ADDR
48763: GO 48766
48765: POP
// temp_list2 = [ ] ;
48766: LD_ADDR_VAR 0 10
48770: PUSH
48771: EMPTY
48772: ST_TO_ADDR
// for i in temp_list do
48773: LD_ADDR_VAR 0 8
48777: PUSH
48778: LD_VAR 0 9
48782: PUSH
48783: FOR_IN
48784: IFFALSE 48836
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48786: LD_ADDR_VAR 0 10
48790: PUSH
48791: LD_VAR 0 10
48795: PUSH
48796: LD_VAR 0 8
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PUSH
48805: LD_VAR 0 2
48809: PLUS
48810: PUSH
48811: LD_VAR 0 8
48815: PUSH
48816: LD_INT 2
48818: ARRAY
48819: PUSH
48820: LD_VAR 0 3
48824: PLUS
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: ADD
48833: ST_TO_ADDR
48834: GO 48783
48836: POP
48837: POP
// result = temp_list2 ;
48838: LD_ADDR_VAR 0 7
48842: PUSH
48843: LD_VAR 0 10
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 7
48852: RET
// export function EnemyInRange ( unit , dist ) ; begin
48853: LD_INT 0
48855: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48856: LD_ADDR_VAR 0 3
48860: PUSH
48861: LD_VAR 0 1
48865: PPUSH
48866: CALL_OW 255
48870: PPUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: CALL_OW 250
48880: PPUSH
48881: LD_VAR 0 1
48885: PPUSH
48886: CALL_OW 251
48890: PPUSH
48891: LD_VAR 0 2
48895: PPUSH
48896: CALL 22110 0 4
48900: PUSH
48901: LD_INT 4
48903: ARRAY
48904: ST_TO_ADDR
// end ;
48905: LD_VAR 0 3
48909: RET
// export function PlayerSeeMe ( unit ) ; begin
48910: LD_INT 0
48912: PPUSH
// result := See ( your_side , unit ) ;
48913: LD_ADDR_VAR 0 2
48917: PUSH
48918: LD_OWVAR 2
48922: PPUSH
48923: LD_VAR 0 1
48927: PPUSH
48928: CALL_OW 292
48932: ST_TO_ADDR
// end ;
48933: LD_VAR 0 2
48937: RET
// export function ReverseDir ( unit ) ; begin
48938: LD_INT 0
48940: PPUSH
// if not unit then
48941: LD_VAR 0 1
48945: NOT
48946: IFFALSE 48950
// exit ;
48948: GO 48973
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48950: LD_ADDR_VAR 0 2
48954: PUSH
48955: LD_VAR 0 1
48959: PPUSH
48960: CALL_OW 254
48964: PUSH
48965: LD_INT 3
48967: PLUS
48968: PUSH
48969: LD_INT 6
48971: MOD
48972: ST_TO_ADDR
// end ;
48973: LD_VAR 0 2
48977: RET
// export function ReverseArray ( array ) ; var i ; begin
48978: LD_INT 0
48980: PPUSH
48981: PPUSH
// if not array then
48982: LD_VAR 0 1
48986: NOT
48987: IFFALSE 48991
// exit ;
48989: GO 49046
// result := [ ] ;
48991: LD_ADDR_VAR 0 2
48995: PUSH
48996: EMPTY
48997: ST_TO_ADDR
// for i := array downto 1 do
48998: LD_ADDR_VAR 0 3
49002: PUSH
49003: DOUBLE
49004: LD_VAR 0 1
49008: INC
49009: ST_TO_ADDR
49010: LD_INT 1
49012: PUSH
49013: FOR_DOWNTO
49014: IFFALSE 49044
// result := Join ( result , array [ i ] ) ;
49016: LD_ADDR_VAR 0 2
49020: PUSH
49021: LD_VAR 0 2
49025: PPUSH
49026: LD_VAR 0 1
49030: PUSH
49031: LD_VAR 0 3
49035: ARRAY
49036: PPUSH
49037: CALL 53898 0 2
49041: ST_TO_ADDR
49042: GO 49013
49044: POP
49045: POP
// end ;
49046: LD_VAR 0 2
49050: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49051: LD_INT 0
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
// if not unit or not hexes then
49059: LD_VAR 0 1
49063: NOT
49064: IFTRUE 49073
49066: PUSH
49067: LD_VAR 0 2
49071: NOT
49072: OR
49073: IFFALSE 49077
// exit ;
49075: GO 49200
// dist := 9999 ;
49077: LD_ADDR_VAR 0 5
49081: PUSH
49082: LD_INT 9999
49084: ST_TO_ADDR
// for i = 1 to hexes do
49085: LD_ADDR_VAR 0 4
49089: PUSH
49090: DOUBLE
49091: LD_INT 1
49093: DEC
49094: ST_TO_ADDR
49095: LD_VAR 0 2
49099: PUSH
49100: FOR_TO
49101: IFFALSE 49188
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49103: LD_ADDR_VAR 0 6
49107: PUSH
49108: LD_VAR 0 1
49112: PPUSH
49113: LD_VAR 0 2
49117: PUSH
49118: LD_VAR 0 4
49122: ARRAY
49123: PUSH
49124: LD_INT 1
49126: ARRAY
49127: PPUSH
49128: LD_VAR 0 2
49132: PUSH
49133: LD_VAR 0 4
49137: ARRAY
49138: PUSH
49139: LD_INT 2
49141: ARRAY
49142: PPUSH
49143: CALL_OW 297
49147: ST_TO_ADDR
// if tdist < dist then
49148: LD_VAR 0 6
49152: PUSH
49153: LD_VAR 0 5
49157: LESS
49158: IFFALSE 49186
// begin hex := hexes [ i ] ;
49160: LD_ADDR_VAR 0 8
49164: PUSH
49165: LD_VAR 0 2
49169: PUSH
49170: LD_VAR 0 4
49174: ARRAY
49175: ST_TO_ADDR
// dist := tdist ;
49176: LD_ADDR_VAR 0 5
49180: PUSH
49181: LD_VAR 0 6
49185: ST_TO_ADDR
// end ; end ;
49186: GO 49100
49188: POP
49189: POP
// result := hex ;
49190: LD_ADDR_VAR 0 3
49194: PUSH
49195: LD_VAR 0 8
49199: ST_TO_ADDR
// end ;
49200: LD_VAR 0 3
49204: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49205: LD_INT 0
49207: PPUSH
49208: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49209: LD_VAR 0 1
49213: NOT
49214: IFTRUE 49253
49216: PUSH
49217: LD_VAR 0 1
49221: PUSH
49222: LD_INT 21
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 23
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PPUSH
49246: CALL_OW 69
49250: IN
49251: NOT
49252: OR
49253: IFFALSE 49257
// exit ;
49255: GO 49304
// for i = 1 to 3 do
49257: LD_ADDR_VAR 0 3
49261: PUSH
49262: DOUBLE
49263: LD_INT 1
49265: DEC
49266: ST_TO_ADDR
49267: LD_INT 3
49269: PUSH
49270: FOR_TO
49271: IFFALSE 49302
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49273: LD_VAR 0 1
49277: PPUSH
49278: CALL_OW 250
49282: PPUSH
49283: LD_VAR 0 1
49287: PPUSH
49288: CALL_OW 251
49292: PPUSH
49293: LD_INT 1
49295: PPUSH
49296: CALL_OW 453
49300: GO 49270
49302: POP
49303: POP
// end ;
49304: LD_VAR 0 2
49308: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49309: LD_INT 0
49311: PPUSH
49312: PPUSH
49313: PPUSH
49314: PPUSH
49315: PPUSH
49316: PPUSH
// if not unit or not enemy_unit then
49317: LD_VAR 0 1
49321: NOT
49322: IFTRUE 49331
49324: PUSH
49325: LD_VAR 0 2
49329: NOT
49330: OR
49331: IFFALSE 49335
// exit ;
49333: GO 49816
// if GetLives ( i ) < 250 then
49335: LD_VAR 0 4
49339: PPUSH
49340: CALL_OW 256
49344: PUSH
49345: LD_INT 250
49347: LESS
49348: IFFALSE 49361
// begin ComAutodestruct ( i ) ;
49350: LD_VAR 0 4
49354: PPUSH
49355: CALL 49205 0 1
// exit ;
49359: GO 49816
// end ; x := GetX ( enemy_unit ) ;
49361: LD_ADDR_VAR 0 7
49365: PUSH
49366: LD_VAR 0 2
49370: PPUSH
49371: CALL_OW 250
49375: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49376: LD_ADDR_VAR 0 8
49380: PUSH
49381: LD_VAR 0 2
49385: PPUSH
49386: CALL_OW 251
49390: ST_TO_ADDR
// if not x or not y then
49391: LD_VAR 0 7
49395: NOT
49396: IFTRUE 49405
49398: PUSH
49399: LD_VAR 0 8
49403: NOT
49404: OR
49405: IFFALSE 49409
// exit ;
49407: GO 49816
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49409: LD_ADDR_VAR 0 6
49413: PUSH
49414: LD_VAR 0 7
49418: PPUSH
49419: LD_INT 0
49421: PPUSH
49422: LD_INT 4
49424: PPUSH
49425: CALL_OW 272
49429: PUSH
49430: LD_VAR 0 8
49434: PPUSH
49435: LD_INT 0
49437: PPUSH
49438: LD_INT 4
49440: PPUSH
49441: CALL_OW 273
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_VAR 0 7
49454: PPUSH
49455: LD_INT 1
49457: PPUSH
49458: LD_INT 4
49460: PPUSH
49461: CALL_OW 272
49465: PUSH
49466: LD_VAR 0 8
49470: PPUSH
49471: LD_INT 1
49473: PPUSH
49474: LD_INT 4
49476: PPUSH
49477: CALL_OW 273
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_VAR 0 7
49490: PPUSH
49491: LD_INT 2
49493: PPUSH
49494: LD_INT 4
49496: PPUSH
49497: CALL_OW 272
49501: PUSH
49502: LD_VAR 0 8
49506: PPUSH
49507: LD_INT 2
49509: PPUSH
49510: LD_INT 4
49512: PPUSH
49513: CALL_OW 273
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_VAR 0 7
49526: PPUSH
49527: LD_INT 3
49529: PPUSH
49530: LD_INT 4
49532: PPUSH
49533: CALL_OW 272
49537: PUSH
49538: LD_VAR 0 8
49542: PPUSH
49543: LD_INT 3
49545: PPUSH
49546: LD_INT 4
49548: PPUSH
49549: CALL_OW 273
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_VAR 0 7
49562: PPUSH
49563: LD_INT 4
49565: PPUSH
49566: LD_INT 4
49568: PPUSH
49569: CALL_OW 272
49573: PUSH
49574: LD_VAR 0 8
49578: PPUSH
49579: LD_INT 4
49581: PPUSH
49582: LD_INT 4
49584: PPUSH
49585: CALL_OW 273
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_VAR 0 7
49598: PPUSH
49599: LD_INT 5
49601: PPUSH
49602: LD_INT 4
49604: PPUSH
49605: CALL_OW 272
49609: PUSH
49610: LD_VAR 0 8
49614: PPUSH
49615: LD_INT 5
49617: PPUSH
49618: LD_INT 4
49620: PPUSH
49621: CALL_OW 273
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// for i = tmp downto 1 do
49638: LD_ADDR_VAR 0 4
49642: PUSH
49643: DOUBLE
49644: LD_VAR 0 6
49648: INC
49649: ST_TO_ADDR
49650: LD_INT 1
49652: PUSH
49653: FOR_DOWNTO
49654: IFFALSE 49757
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49656: LD_VAR 0 6
49660: PUSH
49661: LD_VAR 0 4
49665: ARRAY
49666: PUSH
49667: LD_INT 1
49669: ARRAY
49670: PPUSH
49671: LD_VAR 0 6
49675: PUSH
49676: LD_VAR 0 4
49680: ARRAY
49681: PUSH
49682: LD_INT 2
49684: ARRAY
49685: PPUSH
49686: CALL_OW 488
49690: NOT
49691: IFTRUE 49733
49693: PUSH
49694: LD_VAR 0 6
49698: PUSH
49699: LD_VAR 0 4
49703: ARRAY
49704: PUSH
49705: LD_INT 1
49707: ARRAY
49708: PPUSH
49709: LD_VAR 0 6
49713: PUSH
49714: LD_VAR 0 4
49718: ARRAY
49719: PUSH
49720: LD_INT 2
49722: ARRAY
49723: PPUSH
49724: CALL_OW 428
49728: PUSH
49729: LD_INT 0
49731: NONEQUAL
49732: OR
49733: IFFALSE 49755
// tmp := Delete ( tmp , i ) ;
49735: LD_ADDR_VAR 0 6
49739: PUSH
49740: LD_VAR 0 6
49744: PPUSH
49745: LD_VAR 0 4
49749: PPUSH
49750: CALL_OW 3
49754: ST_TO_ADDR
49755: GO 49653
49757: POP
49758: POP
// j := GetClosestHex ( unit , tmp ) ;
49759: LD_ADDR_VAR 0 5
49763: PUSH
49764: LD_VAR 0 1
49768: PPUSH
49769: LD_VAR 0 6
49773: PPUSH
49774: CALL 49051 0 2
49778: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49779: LD_VAR 0 1
49783: PPUSH
49784: LD_VAR 0 5
49788: PUSH
49789: LD_INT 1
49791: ARRAY
49792: PPUSH
49793: LD_VAR 0 5
49797: PUSH
49798: LD_INT 2
49800: ARRAY
49801: PPUSH
49802: CALL_OW 111
// result := j ;
49806: LD_ADDR_VAR 0 3
49810: PUSH
49811: LD_VAR 0 5
49815: ST_TO_ADDR
// end ;
49816: LD_VAR 0 3
49820: RET
// export function PrepareApemanSoldier ( ) ; begin
49821: LD_INT 0
49823: PPUSH
// uc_nation := 0 ;
49824: LD_ADDR_OWVAR 21
49828: PUSH
49829: LD_INT 0
49831: ST_TO_ADDR
// hc_sex := sex_male ;
49832: LD_ADDR_OWVAR 27
49836: PUSH
49837: LD_INT 1
49839: ST_TO_ADDR
// hc_name :=  ;
49840: LD_ADDR_OWVAR 26
49844: PUSH
49845: LD_STRING 
49847: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49848: LD_ADDR_OWVAR 28
49852: PUSH
49853: LD_INT 15
49855: ST_TO_ADDR
// hc_gallery :=  ;
49856: LD_ADDR_OWVAR 33
49860: PUSH
49861: LD_STRING 
49863: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49864: LD_ADDR_OWVAR 31
49868: PUSH
49869: LD_INT 0
49871: PPUSH
49872: LD_INT 3
49874: PPUSH
49875: CALL_OW 12
49879: PUSH
49880: LD_INT 0
49882: PPUSH
49883: LD_INT 3
49885: PPUSH
49886: CALL_OW 12
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49903: LD_ADDR_OWVAR 29
49907: PUSH
49908: LD_INT 10
49910: PUSH
49911: LD_INT 12
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: ST_TO_ADDR
// end ;
49918: LD_VAR 0 1
49922: RET
// export function PrepareApemanEngineer ( ) ; begin
49923: LD_INT 0
49925: PPUSH
// uc_nation := 0 ;
49926: LD_ADDR_OWVAR 21
49930: PUSH
49931: LD_INT 0
49933: ST_TO_ADDR
// hc_sex := sex_male ;
49934: LD_ADDR_OWVAR 27
49938: PUSH
49939: LD_INT 1
49941: ST_TO_ADDR
// hc_name :=  ;
49942: LD_ADDR_OWVAR 26
49946: PUSH
49947: LD_STRING 
49949: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49950: LD_ADDR_OWVAR 28
49954: PUSH
49955: LD_INT 16
49957: ST_TO_ADDR
// hc_gallery :=  ;
49958: LD_ADDR_OWVAR 33
49962: PUSH
49963: LD_STRING 
49965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49966: LD_ADDR_OWVAR 31
49970: PUSH
49971: LD_INT 0
49973: PPUSH
49974: LD_INT 3
49976: PPUSH
49977: CALL_OW 12
49981: PUSH
49982: LD_INT 0
49984: PPUSH
49985: LD_INT 3
49987: PPUSH
49988: CALL_OW 12
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50005: LD_ADDR_OWVAR 29
50009: PUSH
50010: LD_INT 10
50012: PUSH
50013: LD_INT 12
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// end ;
50020: LD_VAR 0 1
50024: RET
// export function PrepareApeman ( agressivity ) ; begin
50025: LD_INT 0
50027: PPUSH
// uc_side := 0 ;
50028: LD_ADDR_OWVAR 20
50032: PUSH
50033: LD_INT 0
50035: ST_TO_ADDR
// uc_nation := 0 ;
50036: LD_ADDR_OWVAR 21
50040: PUSH
50041: LD_INT 0
50043: ST_TO_ADDR
// hc_sex := sex_male ;
50044: LD_ADDR_OWVAR 27
50048: PUSH
50049: LD_INT 1
50051: ST_TO_ADDR
// hc_class := class_apeman ;
50052: LD_ADDR_OWVAR 28
50056: PUSH
50057: LD_INT 12
50059: ST_TO_ADDR
// hc_gallery :=  ;
50060: LD_ADDR_OWVAR 33
50064: PUSH
50065: LD_STRING 
50067: ST_TO_ADDR
// hc_name :=  ;
50068: LD_ADDR_OWVAR 26
50072: PUSH
50073: LD_STRING 
50075: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50076: LD_ADDR_OWVAR 29
50080: PUSH
50081: LD_INT 10
50083: PUSH
50084: LD_INT 12
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// if agressivity = 0 then
50091: LD_VAR 0 1
50095: PUSH
50096: LD_INT 0
50098: EQUAL
50099: IFFALSE 50111
// hc_agressivity := 0 else
50101: LD_ADDR_OWVAR 35
50105: PUSH
50106: LD_INT 0
50108: ST_TO_ADDR
50109: GO 50132
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50111: LD_ADDR_OWVAR 35
50115: PUSH
50116: LD_VAR 0 1
50120: NEG
50121: PPUSH
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 12
50131: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50132: LD_ADDR_OWVAR 31
50136: PUSH
50137: LD_INT 0
50139: PPUSH
50140: LD_INT 3
50142: PPUSH
50143: CALL_OW 12
50147: PUSH
50148: LD_INT 0
50150: PPUSH
50151: LD_INT 3
50153: PPUSH
50154: CALL_OW 12
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: ST_TO_ADDR
// end ;
50171: LD_VAR 0 2
50175: RET
// export function PrepareTiger ( agressivity ) ; begin
50176: LD_INT 0
50178: PPUSH
// uc_side := 0 ;
50179: LD_ADDR_OWVAR 20
50183: PUSH
50184: LD_INT 0
50186: ST_TO_ADDR
// uc_nation := 0 ;
50187: LD_ADDR_OWVAR 21
50191: PUSH
50192: LD_INT 0
50194: ST_TO_ADDR
// InitHc ;
50195: CALL_OW 19
// hc_class := class_tiger ;
50199: LD_ADDR_OWVAR 28
50203: PUSH
50204: LD_INT 14
50206: ST_TO_ADDR
// hc_gallery :=  ;
50207: LD_ADDR_OWVAR 33
50211: PUSH
50212: LD_STRING 
50214: ST_TO_ADDR
// hc_name :=  ;
50215: LD_ADDR_OWVAR 26
50219: PUSH
50220: LD_STRING 
50222: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50223: LD_ADDR_OWVAR 35
50227: PUSH
50228: LD_VAR 0 1
50232: NEG
50233: PPUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 12
50243: ST_TO_ADDR
// end ;
50244: LD_VAR 0 2
50248: RET
// export function PrepareEnchidna ( ) ; begin
50249: LD_INT 0
50251: PPUSH
// uc_side := 0 ;
50252: LD_ADDR_OWVAR 20
50256: PUSH
50257: LD_INT 0
50259: ST_TO_ADDR
// uc_nation := 0 ;
50260: LD_ADDR_OWVAR 21
50264: PUSH
50265: LD_INT 0
50267: ST_TO_ADDR
// InitHc ;
50268: CALL_OW 19
// hc_class := class_baggie ;
50272: LD_ADDR_OWVAR 28
50276: PUSH
50277: LD_INT 13
50279: ST_TO_ADDR
// hc_gallery :=  ;
50280: LD_ADDR_OWVAR 33
50284: PUSH
50285: LD_STRING 
50287: ST_TO_ADDR
// hc_name :=  ;
50288: LD_ADDR_OWVAR 26
50292: PUSH
50293: LD_STRING 
50295: ST_TO_ADDR
// end ;
50296: LD_VAR 0 1
50300: RET
// export function PrepareFrog ( ) ; begin
50301: LD_INT 0
50303: PPUSH
// uc_side := 0 ;
50304: LD_ADDR_OWVAR 20
50308: PUSH
50309: LD_INT 0
50311: ST_TO_ADDR
// uc_nation := 0 ;
50312: LD_ADDR_OWVAR 21
50316: PUSH
50317: LD_INT 0
50319: ST_TO_ADDR
// InitHc ;
50320: CALL_OW 19
// hc_class := class_frog ;
50324: LD_ADDR_OWVAR 28
50328: PUSH
50329: LD_INT 19
50331: ST_TO_ADDR
// hc_gallery :=  ;
50332: LD_ADDR_OWVAR 33
50336: PUSH
50337: LD_STRING 
50339: ST_TO_ADDR
// hc_name :=  ;
50340: LD_ADDR_OWVAR 26
50344: PUSH
50345: LD_STRING 
50347: ST_TO_ADDR
// end ;
50348: LD_VAR 0 1
50352: RET
// export function PrepareFish ( ) ; begin
50353: LD_INT 0
50355: PPUSH
// uc_side := 0 ;
50356: LD_ADDR_OWVAR 20
50360: PUSH
50361: LD_INT 0
50363: ST_TO_ADDR
// uc_nation := 0 ;
50364: LD_ADDR_OWVAR 21
50368: PUSH
50369: LD_INT 0
50371: ST_TO_ADDR
// InitHc ;
50372: CALL_OW 19
// hc_class := class_fish ;
50376: LD_ADDR_OWVAR 28
50380: PUSH
50381: LD_INT 20
50383: ST_TO_ADDR
// hc_gallery :=  ;
50384: LD_ADDR_OWVAR 33
50388: PUSH
50389: LD_STRING 
50391: ST_TO_ADDR
// hc_name :=  ;
50392: LD_ADDR_OWVAR 26
50396: PUSH
50397: LD_STRING 
50399: ST_TO_ADDR
// end ;
50400: LD_VAR 0 1
50404: RET
// export function PrepareBird ( ) ; begin
50405: LD_INT 0
50407: PPUSH
// uc_side := 0 ;
50408: LD_ADDR_OWVAR 20
50412: PUSH
50413: LD_INT 0
50415: ST_TO_ADDR
// uc_nation := 0 ;
50416: LD_ADDR_OWVAR 21
50420: PUSH
50421: LD_INT 0
50423: ST_TO_ADDR
// InitHc ;
50424: CALL_OW 19
// hc_class := class_phororhacos ;
50428: LD_ADDR_OWVAR 28
50432: PUSH
50433: LD_INT 18
50435: ST_TO_ADDR
// hc_gallery :=  ;
50436: LD_ADDR_OWVAR 33
50440: PUSH
50441: LD_STRING 
50443: ST_TO_ADDR
// hc_name :=  ;
50444: LD_ADDR_OWVAR 26
50448: PUSH
50449: LD_STRING 
50451: ST_TO_ADDR
// end ;
50452: LD_VAR 0 1
50456: RET
// export function PrepareHorse ( ) ; begin
50457: LD_INT 0
50459: PPUSH
// uc_side := 0 ;
50460: LD_ADDR_OWVAR 20
50464: PUSH
50465: LD_INT 0
50467: ST_TO_ADDR
// uc_nation := 0 ;
50468: LD_ADDR_OWVAR 21
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// InitHc ;
50476: CALL_OW 19
// hc_class := class_horse ;
50480: LD_ADDR_OWVAR 28
50484: PUSH
50485: LD_INT 21
50487: ST_TO_ADDR
// hc_gallery :=  ;
50488: LD_ADDR_OWVAR 33
50492: PUSH
50493: LD_STRING 
50495: ST_TO_ADDR
// hc_name :=  ;
50496: LD_ADDR_OWVAR 26
50500: PUSH
50501: LD_STRING 
50503: ST_TO_ADDR
// end ;
50504: LD_VAR 0 1
50508: RET
// export function PrepareMastodont ( ) ; begin
50509: LD_INT 0
50511: PPUSH
// uc_side := 0 ;
50512: LD_ADDR_OWVAR 20
50516: PUSH
50517: LD_INT 0
50519: ST_TO_ADDR
// uc_nation := 0 ;
50520: LD_ADDR_OWVAR 21
50524: PUSH
50525: LD_INT 0
50527: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50528: LD_ADDR_OWVAR 37
50532: PUSH
50533: LD_INT 31
50535: ST_TO_ADDR
// vc_control := control_rider ;
50536: LD_ADDR_OWVAR 38
50540: PUSH
50541: LD_INT 4
50543: ST_TO_ADDR
// end ;
50544: LD_VAR 0 1
50548: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50549: LD_INT 0
50551: PPUSH
50552: PPUSH
50553: PPUSH
// uc_side = 0 ;
50554: LD_ADDR_OWVAR 20
50558: PUSH
50559: LD_INT 0
50561: ST_TO_ADDR
// uc_nation = 0 ;
50562: LD_ADDR_OWVAR 21
50566: PUSH
50567: LD_INT 0
50569: ST_TO_ADDR
// InitHc_All ( ) ;
50570: CALL_OW 584
// InitVc ;
50574: CALL_OW 20
// if mastodonts then
50578: LD_VAR 0 6
50582: IFFALSE 50649
// for i = 1 to mastodonts do
50584: LD_ADDR_VAR 0 11
50588: PUSH
50589: DOUBLE
50590: LD_INT 1
50592: DEC
50593: ST_TO_ADDR
50594: LD_VAR 0 6
50598: PUSH
50599: FOR_TO
50600: IFFALSE 50647
// begin vc_chassis := 31 ;
50602: LD_ADDR_OWVAR 37
50606: PUSH
50607: LD_INT 31
50609: ST_TO_ADDR
// vc_control := control_rider ;
50610: LD_ADDR_OWVAR 38
50614: PUSH
50615: LD_INT 4
50617: ST_TO_ADDR
// animal := CreateVehicle ;
50618: LD_ADDR_VAR 0 12
50622: PUSH
50623: CALL_OW 45
50627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50628: LD_VAR 0 12
50632: PPUSH
50633: LD_VAR 0 8
50637: PPUSH
50638: LD_INT 0
50640: PPUSH
50641: CALL 52791 0 3
// end ;
50645: GO 50599
50647: POP
50648: POP
// if horses then
50649: LD_VAR 0 5
50653: IFFALSE 50720
// for i = 1 to horses do
50655: LD_ADDR_VAR 0 11
50659: PUSH
50660: DOUBLE
50661: LD_INT 1
50663: DEC
50664: ST_TO_ADDR
50665: LD_VAR 0 5
50669: PUSH
50670: FOR_TO
50671: IFFALSE 50718
// begin hc_class := 21 ;
50673: LD_ADDR_OWVAR 28
50677: PUSH
50678: LD_INT 21
50680: ST_TO_ADDR
// hc_gallery :=  ;
50681: LD_ADDR_OWVAR 33
50685: PUSH
50686: LD_STRING 
50688: ST_TO_ADDR
// animal := CreateHuman ;
50689: LD_ADDR_VAR 0 12
50693: PUSH
50694: CALL_OW 44
50698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50699: LD_VAR 0 12
50703: PPUSH
50704: LD_VAR 0 8
50708: PPUSH
50709: LD_INT 0
50711: PPUSH
50712: CALL 52791 0 3
// end ;
50716: GO 50670
50718: POP
50719: POP
// if birds then
50720: LD_VAR 0 1
50724: IFFALSE 50791
// for i = 1 to birds do
50726: LD_ADDR_VAR 0 11
50730: PUSH
50731: DOUBLE
50732: LD_INT 1
50734: DEC
50735: ST_TO_ADDR
50736: LD_VAR 0 1
50740: PUSH
50741: FOR_TO
50742: IFFALSE 50789
// begin hc_class := 18 ;
50744: LD_ADDR_OWVAR 28
50748: PUSH
50749: LD_INT 18
50751: ST_TO_ADDR
// hc_gallery =  ;
50752: LD_ADDR_OWVAR 33
50756: PUSH
50757: LD_STRING 
50759: ST_TO_ADDR
// animal := CreateHuman ;
50760: LD_ADDR_VAR 0 12
50764: PUSH
50765: CALL_OW 44
50769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50770: LD_VAR 0 12
50774: PPUSH
50775: LD_VAR 0 8
50779: PPUSH
50780: LD_INT 0
50782: PPUSH
50783: CALL 52791 0 3
// end ;
50787: GO 50741
50789: POP
50790: POP
// if tigers then
50791: LD_VAR 0 2
50795: IFFALSE 50879
// for i = 1 to tigers do
50797: LD_ADDR_VAR 0 11
50801: PUSH
50802: DOUBLE
50803: LD_INT 1
50805: DEC
50806: ST_TO_ADDR
50807: LD_VAR 0 2
50811: PUSH
50812: FOR_TO
50813: IFFALSE 50877
// begin hc_class = class_tiger ;
50815: LD_ADDR_OWVAR 28
50819: PUSH
50820: LD_INT 14
50822: ST_TO_ADDR
// hc_gallery =  ;
50823: LD_ADDR_OWVAR 33
50827: PUSH
50828: LD_STRING 
50830: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50831: LD_ADDR_OWVAR 35
50835: PUSH
50836: LD_INT 7
50838: NEG
50839: PPUSH
50840: LD_INT 7
50842: PPUSH
50843: CALL_OW 12
50847: ST_TO_ADDR
// animal := CreateHuman ;
50848: LD_ADDR_VAR 0 12
50852: PUSH
50853: CALL_OW 44
50857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50858: LD_VAR 0 12
50862: PPUSH
50863: LD_VAR 0 8
50867: PPUSH
50868: LD_INT 0
50870: PPUSH
50871: CALL 52791 0 3
// end ;
50875: GO 50812
50877: POP
50878: POP
// if apemans then
50879: LD_VAR 0 3
50883: IFFALSE 51006
// for i = 1 to apemans do
50885: LD_ADDR_VAR 0 11
50889: PUSH
50890: DOUBLE
50891: LD_INT 1
50893: DEC
50894: ST_TO_ADDR
50895: LD_VAR 0 3
50899: PUSH
50900: FOR_TO
50901: IFFALSE 51004
// begin hc_class = class_apeman ;
50903: LD_ADDR_OWVAR 28
50907: PUSH
50908: LD_INT 12
50910: ST_TO_ADDR
// hc_gallery =  ;
50911: LD_ADDR_OWVAR 33
50915: PUSH
50916: LD_STRING 
50918: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50919: LD_ADDR_OWVAR 35
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PPUSH
50928: LD_INT 2
50930: PPUSH
50931: CALL_OW 12
50935: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50936: LD_ADDR_OWVAR 31
50940: PUSH
50941: LD_INT 1
50943: PPUSH
50944: LD_INT 3
50946: PPUSH
50947: CALL_OW 12
50951: PUSH
50952: LD_INT 1
50954: PPUSH
50955: LD_INT 3
50957: PPUSH
50958: CALL_OW 12
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: ST_TO_ADDR
// animal := CreateHuman ;
50975: LD_ADDR_VAR 0 12
50979: PUSH
50980: CALL_OW 44
50984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50985: LD_VAR 0 12
50989: PPUSH
50990: LD_VAR 0 8
50994: PPUSH
50995: LD_INT 0
50997: PPUSH
50998: CALL 52791 0 3
// end ;
51002: GO 50900
51004: POP
51005: POP
// if enchidnas then
51006: LD_VAR 0 4
51010: IFFALSE 51077
// for i = 1 to enchidnas do
51012: LD_ADDR_VAR 0 11
51016: PUSH
51017: DOUBLE
51018: LD_INT 1
51020: DEC
51021: ST_TO_ADDR
51022: LD_VAR 0 4
51026: PUSH
51027: FOR_TO
51028: IFFALSE 51075
// begin hc_class = 13 ;
51030: LD_ADDR_OWVAR 28
51034: PUSH
51035: LD_INT 13
51037: ST_TO_ADDR
// hc_gallery =  ;
51038: LD_ADDR_OWVAR 33
51042: PUSH
51043: LD_STRING 
51045: ST_TO_ADDR
// animal := CreateHuman ;
51046: LD_ADDR_VAR 0 12
51050: PUSH
51051: CALL_OW 44
51055: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51056: LD_VAR 0 12
51060: PPUSH
51061: LD_VAR 0 8
51065: PPUSH
51066: LD_INT 0
51068: PPUSH
51069: CALL 52791 0 3
// end ;
51073: GO 51027
51075: POP
51076: POP
// if fishes then
51077: LD_VAR 0 7
51081: IFFALSE 51148
// for i = 1 to fishes do
51083: LD_ADDR_VAR 0 11
51087: PUSH
51088: DOUBLE
51089: LD_INT 1
51091: DEC
51092: ST_TO_ADDR
51093: LD_VAR 0 7
51097: PUSH
51098: FOR_TO
51099: IFFALSE 51146
// begin hc_class = 20 ;
51101: LD_ADDR_OWVAR 28
51105: PUSH
51106: LD_INT 20
51108: ST_TO_ADDR
// hc_gallery =  ;
51109: LD_ADDR_OWVAR 33
51113: PUSH
51114: LD_STRING 
51116: ST_TO_ADDR
// animal := CreateHuman ;
51117: LD_ADDR_VAR 0 12
51121: PUSH
51122: CALL_OW 44
51126: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51127: LD_VAR 0 12
51131: PPUSH
51132: LD_VAR 0 9
51136: PPUSH
51137: LD_INT 0
51139: PPUSH
51140: CALL 52791 0 3
// end ;
51144: GO 51098
51146: POP
51147: POP
// end ;
51148: LD_VAR 0 10
51152: RET
// export function WantHeal ( sci , unit ) ; begin
51153: LD_INT 0
51155: PPUSH
// if GetTaskList ( sci ) > 0 then
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 437
51165: PUSH
51166: LD_INT 0
51168: GREATER
51169: IFFALSE 51241
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 437
51180: PUSH
51181: LD_INT 1
51183: ARRAY
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PUSH
51189: LD_STRING l
51191: EQUAL
51192: IFFALSE 51219
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 437
51204: PUSH
51205: LD_INT 1
51207: ARRAY
51208: PUSH
51209: LD_INT 4
51211: ARRAY
51212: PUSH
51213: LD_VAR 0 2
51217: EQUAL
51218: AND
51219: IFFALSE 51231
// result := true else
51221: LD_ADDR_VAR 0 3
51225: PUSH
51226: LD_INT 1
51228: ST_TO_ADDR
51229: GO 51239
// result := false ;
51231: LD_ADDR_VAR 0 3
51235: PUSH
51236: LD_INT 0
51238: ST_TO_ADDR
// end else
51239: GO 51249
// result := false ;
51241: LD_ADDR_VAR 0 3
51245: PUSH
51246: LD_INT 0
51248: ST_TO_ADDR
// end ;
51249: LD_VAR 0 3
51253: RET
// export function HealTarget ( sci ) ; begin
51254: LD_INT 0
51256: PPUSH
// if not sci then
51257: LD_VAR 0 1
51261: NOT
51262: IFFALSE 51266
// exit ;
51264: GO 51331
// result := 0 ;
51266: LD_ADDR_VAR 0 2
51270: PUSH
51271: LD_INT 0
51273: ST_TO_ADDR
// if GetTaskList ( sci ) then
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 437
51283: IFFALSE 51331
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51285: LD_VAR 0 1
51289: PPUSH
51290: CALL_OW 437
51294: PUSH
51295: LD_INT 1
51297: ARRAY
51298: PUSH
51299: LD_INT 1
51301: ARRAY
51302: PUSH
51303: LD_STRING l
51305: EQUAL
51306: IFFALSE 51331
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51308: LD_ADDR_VAR 0 2
51312: PUSH
51313: LD_VAR 0 1
51317: PPUSH
51318: CALL_OW 437
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: PUSH
51327: LD_INT 4
51329: ARRAY
51330: ST_TO_ADDR
// end ;
51331: LD_VAR 0 2
51335: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51336: LD_INT 0
51338: PPUSH
51339: PPUSH
51340: PPUSH
51341: PPUSH
// if not base_units then
51342: LD_VAR 0 1
51346: NOT
51347: IFFALSE 51351
// exit ;
51349: GO 51438
// result := false ;
51351: LD_ADDR_VAR 0 2
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: LD_INT 21
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PPUSH
51379: CALL_OW 72
51383: ST_TO_ADDR
// if not tmp then
51384: LD_VAR 0 5
51388: NOT
51389: IFFALSE 51393
// exit ;
51391: GO 51438
// for i in tmp do
51393: LD_ADDR_VAR 0 3
51397: PUSH
51398: LD_VAR 0 5
51402: PUSH
51403: FOR_IN
51404: IFFALSE 51436
// begin result := EnemyInRange ( i , 22 ) ;
51406: LD_ADDR_VAR 0 2
51410: PUSH
51411: LD_VAR 0 3
51415: PPUSH
51416: LD_INT 22
51418: PPUSH
51419: CALL 48853 0 2
51423: ST_TO_ADDR
// if result then
51424: LD_VAR 0 2
51428: IFFALSE 51434
// exit ;
51430: POP
51431: POP
51432: GO 51438
// end ;
51434: GO 51403
51436: POP
51437: POP
// end ;
51438: LD_VAR 0 2
51442: RET
// export function FilterByTag ( units , tag ) ; begin
51443: LD_INT 0
51445: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51446: LD_ADDR_VAR 0 3
51450: PUSH
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_INT 120
51458: PUSH
51459: LD_VAR 0 2
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PPUSH
51468: CALL_OW 72
51472: ST_TO_ADDR
// end ;
51473: LD_VAR 0 3
51477: RET
// export function IsDriver ( un ) ; begin
51478: LD_INT 0
51480: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51481: LD_ADDR_VAR 0 2
51485: PUSH
51486: LD_VAR 0 1
51490: PUSH
51491: LD_INT 55
51493: PUSH
51494: EMPTY
51495: LIST
51496: PPUSH
51497: CALL_OW 69
51501: IN
51502: ST_TO_ADDR
// end ;
51503: LD_VAR 0 2
51507: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51508: LD_INT 0
51510: PPUSH
51511: PPUSH
// list := [ ] ;
51512: LD_ADDR_VAR 0 5
51516: PUSH
51517: EMPTY
51518: ST_TO_ADDR
// case d of 0 :
51519: LD_VAR 0 3
51523: PUSH
51524: LD_INT 0
51526: DOUBLE
51527: EQUAL
51528: IFTRUE 51532
51530: GO 51665
51532: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51533: LD_ADDR_VAR 0 5
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_INT 4
51545: MINUS
51546: PUSH
51547: LD_VAR 0 2
51551: PUSH
51552: LD_INT 4
51554: MINUS
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: PUSH
51564: LD_VAR 0 1
51568: PUSH
51569: LD_INT 3
51571: MINUS
51572: PUSH
51573: LD_VAR 0 2
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: PUSH
51586: LD_VAR 0 1
51590: PUSH
51591: LD_INT 4
51593: PLUS
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 4
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PUSH
51608: LD_VAR 0 1
51612: PUSH
51613: LD_INT 3
51615: PLUS
51616: PUSH
51617: LD_VAR 0 2
51621: PUSH
51622: LD_INT 3
51624: PLUS
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: LD_VAR 0 1
51638: PUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_INT 4
51646: PLUS
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// end ; 1 :
51663: GO 52363
51665: LD_INT 1
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51806
51673: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51674: LD_ADDR_VAR 0 5
51678: PUSH
51679: LD_VAR 0 1
51683: PUSH
51684: LD_VAR 0 2
51688: PUSH
51689: LD_INT 4
51691: MINUS
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_VAR 0 1
51705: PUSH
51706: LD_INT 3
51708: MINUS
51709: PUSH
51710: LD_VAR 0 2
51714: PUSH
51715: LD_INT 3
51717: MINUS
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: PUSH
51727: LD_VAR 0 1
51731: PUSH
51732: LD_INT 4
51734: MINUS
51735: PUSH
51736: LD_VAR 0 2
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: PUSH
51749: LD_VAR 0 1
51753: PUSH
51754: LD_VAR 0 2
51758: PUSH
51759: LD_INT 3
51761: PLUS
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: LD_VAR 0 1
51775: PUSH
51776: LD_INT 4
51778: PLUS
51779: PUSH
51780: LD_VAR 0 2
51784: PUSH
51785: LD_INT 4
51787: PLUS
51788: PUSH
51789: LD_INT 5
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// end ; 2 :
51804: GO 52363
51806: LD_INT 2
51808: DOUBLE
51809: EQUAL
51810: IFTRUE 51814
51812: GO 51943
51814: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51815: LD_ADDR_VAR 0 5
51819: PUSH
51820: LD_VAR 0 1
51824: PUSH
51825: LD_VAR 0 2
51829: PUSH
51830: LD_INT 3
51832: MINUS
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_INT 4
51849: PLUS
51850: PUSH
51851: LD_VAR 0 2
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: LD_VAR 0 1
51868: PUSH
51869: LD_VAR 0 2
51873: PUSH
51874: LD_INT 4
51876: PLUS
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: LD_VAR 0 1
51890: PUSH
51891: LD_INT 3
51893: MINUS
51894: PUSH
51895: LD_VAR 0 2
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_VAR 0 1
51912: PUSH
51913: LD_INT 4
51915: MINUS
51916: PUSH
51917: LD_VAR 0 2
51921: PUSH
51922: LD_INT 4
51924: MINUS
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// end ; 3 :
51941: GO 52363
51943: LD_INT 3
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51951
51949: GO 52084
51951: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51952: LD_ADDR_VAR 0 5
51956: PUSH
51957: LD_VAR 0 1
51961: PUSH
51962: LD_INT 3
51964: PLUS
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 4
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: LIST
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 4
51986: PLUS
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 4
51995: PLUS
51996: PUSH
51997: LD_INT 5
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 1
52009: PUSH
52010: LD_INT 4
52012: MINUS
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_INT 4
52039: MINUS
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: LD_VAR 0 1
52053: PUSH
52054: LD_INT 3
52056: MINUS
52057: PUSH
52058: LD_VAR 0 2
52062: PUSH
52063: LD_INT 3
52065: MINUS
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: ST_TO_ADDR
// end ; 4 :
52082: GO 52363
52084: LD_INT 4
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52092
52090: GO 52225
52092: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52093: LD_ADDR_VAR 0 5
52097: PUSH
52098: LD_VAR 0 1
52102: PUSH
52103: LD_VAR 0 2
52107: PUSH
52108: LD_INT 4
52110: PLUS
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_INT 3
52127: PLUS
52128: PUSH
52129: LD_VAR 0 2
52133: PUSH
52134: LD_INT 3
52136: PLUS
52137: PUSH
52138: LD_INT 5
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: PUSH
52146: LD_VAR 0 1
52150: PUSH
52151: LD_INT 4
52153: PLUS
52154: PUSH
52155: LD_VAR 0 2
52159: PUSH
52160: LD_INT 4
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: LD_VAR 0 1
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_INT 3
52180: MINUS
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_INT 4
52197: MINUS
52198: PUSH
52199: LD_VAR 0 2
52203: PUSH
52204: LD_INT 4
52206: MINUS
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// end ; 5 :
52223: GO 52363
52225: LD_INT 5
52227: DOUBLE
52228: EQUAL
52229: IFTRUE 52233
52231: GO 52362
52233: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52234: LD_ADDR_VAR 0 5
52238: PUSH
52239: LD_VAR 0 1
52243: PUSH
52244: LD_INT 4
52246: MINUS
52247: PUSH
52248: LD_VAR 0 2
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: LIST
52260: PUSH
52261: LD_VAR 0 1
52265: PUSH
52266: LD_VAR 0 2
52270: PUSH
52271: LD_INT 4
52273: MINUS
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_INT 4
52290: PLUS
52291: PUSH
52292: LD_VAR 0 2
52296: PUSH
52297: LD_INT 4
52299: PLUS
52300: PUSH
52301: LD_INT 5
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: PUSH
52309: LD_VAR 0 1
52313: PUSH
52314: LD_INT 3
52316: PLUS
52317: PUSH
52318: LD_VAR 0 2
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: PUSH
52331: LD_VAR 0 1
52335: PUSH
52336: LD_VAR 0 2
52340: PUSH
52341: LD_INT 3
52343: PLUS
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// end ; end ;
52360: GO 52363
52362: POP
// result := list ;
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: LD_VAR 0 5
52372: ST_TO_ADDR
// end ;
52373: LD_VAR 0 4
52377: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52378: LD_INT 0
52380: PPUSH
52381: PPUSH
52382: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52383: LD_VAR 0 1
52387: NOT
52388: IFTRUE 52416
52390: PUSH
52391: LD_VAR 0 2
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: LD_INT 4
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: IN
52414: NOT
52415: OR
52416: IFFALSE 52420
// exit ;
52418: GO 52503
// tmp := [ ] ;
52420: LD_ADDR_VAR 0 5
52424: PUSH
52425: EMPTY
52426: ST_TO_ADDR
// for i in units do
52427: LD_ADDR_VAR 0 4
52431: PUSH
52432: LD_VAR 0 1
52436: PUSH
52437: FOR_IN
52438: IFFALSE 52472
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52440: LD_ADDR_VAR 0 5
52444: PUSH
52445: LD_VAR 0 5
52449: PPUSH
52450: LD_VAR 0 4
52454: PPUSH
52455: LD_VAR 0 2
52459: PPUSH
52460: CALL_OW 259
52464: PPUSH
52465: CALL 53898 0 2
52469: ST_TO_ADDR
52470: GO 52437
52472: POP
52473: POP
// if not tmp then
52474: LD_VAR 0 5
52478: NOT
52479: IFFALSE 52483
// exit ;
52481: GO 52503
// result := SortListByListDesc ( units , tmp ) ;
52483: LD_ADDR_VAR 0 3
52487: PUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: LD_VAR 0 5
52497: PPUSH
52498: CALL_OW 77
52502: ST_TO_ADDR
// end ;
52503: LD_VAR 0 3
52507: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52508: LD_INT 0
52510: PPUSH
52511: PPUSH
52512: PPUSH
// result := false ;
52513: LD_ADDR_VAR 0 3
52517: PUSH
52518: LD_INT 0
52520: ST_TO_ADDR
// if not building then
52521: LD_VAR 0 2
52525: NOT
52526: IFFALSE 52530
// exit ;
52528: GO 52674
// x := GetX ( building ) ;
52530: LD_ADDR_VAR 0 4
52534: PUSH
52535: LD_VAR 0 2
52539: PPUSH
52540: CALL_OW 250
52544: ST_TO_ADDR
// y := GetY ( building ) ;
52545: LD_ADDR_VAR 0 5
52549: PUSH
52550: LD_VAR 0 2
52554: PPUSH
52555: CALL_OW 251
52559: ST_TO_ADDR
// if not x or not y then
52560: LD_VAR 0 4
52564: NOT
52565: IFTRUE 52574
52567: PUSH
52568: LD_VAR 0 5
52572: NOT
52573: OR
52574: IFFALSE 52578
// exit ;
52576: GO 52674
// if GetTaskList ( unit ) then
52578: LD_VAR 0 1
52582: PPUSH
52583: CALL_OW 437
52587: IFFALSE 52674
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52589: LD_STRING e
52591: PUSH
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL_OW 437
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: EQUAL
52610: IFFALSE 52637
52612: PUSH
52613: LD_VAR 0 4
52617: PUSH
52618: LD_VAR 0 1
52622: PPUSH
52623: CALL_OW 437
52627: PUSH
52628: LD_INT 1
52630: ARRAY
52631: PUSH
52632: LD_INT 2
52634: ARRAY
52635: EQUAL
52636: AND
52637: IFFALSE 52664
52639: PUSH
52640: LD_VAR 0 5
52644: PUSH
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 437
52654: PUSH
52655: LD_INT 1
52657: ARRAY
52658: PUSH
52659: LD_INT 3
52661: ARRAY
52662: EQUAL
52663: AND
52664: IFFALSE 52674
// result := true end ;
52666: LD_ADDR_VAR 0 3
52670: PUSH
52671: LD_INT 1
52673: ST_TO_ADDR
// end ;
52674: LD_VAR 0 3
52678: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52679: LD_INT 0
52681: PPUSH
// result := false ;
52682: LD_ADDR_VAR 0 4
52686: PUSH
52687: LD_INT 0
52689: ST_TO_ADDR
// if GetTaskList ( unit ) then
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 437
52699: IFFALSE 52786
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52701: LD_STRING M
52703: PUSH
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 437
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: EQUAL
52722: IFFALSE 52749
52724: PUSH
52725: LD_VAR 0 2
52729: PUSH
52730: LD_VAR 0 1
52734: PPUSH
52735: CALL_OW 437
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PUSH
52744: LD_INT 2
52746: ARRAY
52747: EQUAL
52748: AND
52749: IFFALSE 52776
52751: PUSH
52752: LD_VAR 0 3
52756: PUSH
52757: LD_VAR 0 1
52761: PPUSH
52762: CALL_OW 437
52766: PUSH
52767: LD_INT 1
52769: ARRAY
52770: PUSH
52771: LD_INT 3
52773: ARRAY
52774: EQUAL
52775: AND
52776: IFFALSE 52786
// result := true ;
52778: LD_ADDR_VAR 0 4
52782: PUSH
52783: LD_INT 1
52785: ST_TO_ADDR
// end ; end ;
52786: LD_VAR 0 4
52790: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52791: LD_INT 0
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
// if not unit or not area then
52797: LD_VAR 0 1
52801: NOT
52802: IFTRUE 52811
52804: PUSH
52805: LD_VAR 0 2
52809: NOT
52810: OR
52811: IFFALSE 52815
// exit ;
52813: GO 52991
// tmp := AreaToList ( area , i ) ;
52815: LD_ADDR_VAR 0 6
52819: PUSH
52820: LD_VAR 0 2
52824: PPUSH
52825: LD_VAR 0 5
52829: PPUSH
52830: CALL_OW 517
52834: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52835: LD_ADDR_VAR 0 5
52839: PUSH
52840: DOUBLE
52841: LD_INT 1
52843: DEC
52844: ST_TO_ADDR
52845: LD_VAR 0 6
52849: PUSH
52850: LD_INT 1
52852: ARRAY
52853: PUSH
52854: FOR_TO
52855: IFFALSE 52989
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52857: LD_ADDR_VAR 0 7
52861: PUSH
52862: LD_VAR 0 6
52866: PUSH
52867: LD_INT 1
52869: ARRAY
52870: PUSH
52871: LD_VAR 0 5
52875: ARRAY
52876: PUSH
52877: LD_VAR 0 6
52881: PUSH
52882: LD_INT 2
52884: ARRAY
52885: PUSH
52886: LD_VAR 0 5
52890: ARRAY
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52896: LD_INT 92
52898: PUSH
52899: LD_VAR 0 7
52903: PUSH
52904: LD_INT 1
52906: ARRAY
52907: PUSH
52908: LD_VAR 0 7
52912: PUSH
52913: LD_INT 2
52915: ARRAY
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: PPUSH
52926: CALL_OW 69
52930: PUSH
52931: LD_INT 0
52933: EQUAL
52934: IFFALSE 52987
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52936: LD_VAR 0 1
52940: PPUSH
52941: LD_VAR 0 7
52945: PUSH
52946: LD_INT 1
52948: ARRAY
52949: PPUSH
52950: LD_VAR 0 7
52954: PUSH
52955: LD_INT 2
52957: ARRAY
52958: PPUSH
52959: LD_VAR 0 3
52963: PPUSH
52964: CALL_OW 48
// result := IsPlaced ( unit ) ;
52968: LD_ADDR_VAR 0 4
52972: PUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 305
52982: ST_TO_ADDR
// exit ;
52983: POP
52984: POP
52985: GO 52991
// end ; end ;
52987: GO 52854
52989: POP
52990: POP
// end ;
52991: LD_VAR 0 4
52995: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52996: LD_INT 0
52998: PPUSH
52999: PPUSH
53000: PPUSH
// if not side or side > 8 then
53001: LD_VAR 0 1
53005: NOT
53006: IFTRUE 53018
53008: PUSH
53009: LD_VAR 0 1
53013: PUSH
53014: LD_INT 8
53016: GREATER
53017: OR
53018: IFFALSE 53022
// exit ;
53020: GO 53209
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53022: LD_ADDR_VAR 0 4
53026: PUSH
53027: LD_INT 22
53029: PUSH
53030: LD_VAR 0 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 21
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PPUSH
53053: CALL_OW 69
53057: ST_TO_ADDR
// if not tmp then
53058: LD_VAR 0 4
53062: NOT
53063: IFFALSE 53067
// exit ;
53065: GO 53209
// enable_addtolog := true ;
53067: LD_ADDR_OWVAR 81
53071: PUSH
53072: LD_INT 1
53074: ST_TO_ADDR
// AddToLog ( [ ) ;
53075: LD_STRING [
53077: PPUSH
53078: CALL_OW 561
// for i in tmp do
53082: LD_ADDR_VAR 0 3
53086: PUSH
53087: LD_VAR 0 4
53091: PUSH
53092: FOR_IN
53093: IFFALSE 53200
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53095: LD_STRING [
53097: PUSH
53098: LD_VAR 0 3
53102: PPUSH
53103: CALL_OW 266
53107: STR
53108: PUSH
53109: LD_STRING , 
53111: STR
53112: PUSH
53113: LD_VAR 0 3
53117: PPUSH
53118: CALL_OW 250
53122: STR
53123: PUSH
53124: LD_STRING , 
53126: STR
53127: PUSH
53128: LD_VAR 0 3
53132: PPUSH
53133: CALL_OW 251
53137: STR
53138: PUSH
53139: LD_STRING , 
53141: STR
53142: PUSH
53143: LD_VAR 0 3
53147: PPUSH
53148: CALL_OW 254
53152: STR
53153: PUSH
53154: LD_STRING , 
53156: STR
53157: PUSH
53158: LD_VAR 0 3
53162: PPUSH
53163: LD_INT 1
53165: PPUSH
53166: CALL_OW 268
53170: STR
53171: PUSH
53172: LD_STRING , 
53174: STR
53175: PUSH
53176: LD_VAR 0 3
53180: PPUSH
53181: LD_INT 2
53183: PPUSH
53184: CALL_OW 268
53188: STR
53189: PUSH
53190: LD_STRING ],
53192: STR
53193: PPUSH
53194: CALL_OW 561
// end ;
53198: GO 53092
53200: POP
53201: POP
// AddToLog ( ]; ) ;
53202: LD_STRING ];
53204: PPUSH
53205: CALL_OW 561
// end ;
53209: LD_VAR 0 2
53213: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
// if not area or not rate or not max then
53221: LD_VAR 0 1
53225: NOT
53226: IFTRUE 53235
53228: PUSH
53229: LD_VAR 0 2
53233: NOT
53234: OR
53235: IFTRUE 53244
53237: PUSH
53238: LD_VAR 0 4
53242: NOT
53243: OR
53244: IFFALSE 53248
// exit ;
53246: GO 53437
// while 1 do
53248: LD_INT 1
53250: IFFALSE 53437
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53252: LD_ADDR_VAR 0 9
53256: PUSH
53257: LD_VAR 0 1
53261: PPUSH
53262: LD_INT 1
53264: PPUSH
53265: CALL_OW 287
53269: PUSH
53270: LD_INT 10
53272: MUL
53273: ST_TO_ADDR
// r := rate / 10 ;
53274: LD_ADDR_VAR 0 7
53278: PUSH
53279: LD_VAR 0 2
53283: PUSH
53284: LD_INT 10
53286: DIVREAL
53287: ST_TO_ADDR
// time := 1 1$00 ;
53288: LD_ADDR_VAR 0 8
53292: PUSH
53293: LD_INT 2100
53295: ST_TO_ADDR
// if amount < min then
53296: LD_VAR 0 9
53300: PUSH
53301: LD_VAR 0 3
53305: LESS
53306: IFFALSE 53324
// r := r * 2 else
53308: LD_ADDR_VAR 0 7
53312: PUSH
53313: LD_VAR 0 7
53317: PUSH
53318: LD_INT 2
53320: MUL
53321: ST_TO_ADDR
53322: GO 53350
// if amount > max then
53324: LD_VAR 0 9
53328: PUSH
53329: LD_VAR 0 4
53333: GREATER
53334: IFFALSE 53350
// r := r / 2 ;
53336: LD_ADDR_VAR 0 7
53340: PUSH
53341: LD_VAR 0 7
53345: PUSH
53346: LD_INT 2
53348: DIVREAL
53349: ST_TO_ADDR
// time := time / r ;
53350: LD_ADDR_VAR 0 8
53354: PUSH
53355: LD_VAR 0 8
53359: PUSH
53360: LD_VAR 0 7
53364: DIVREAL
53365: ST_TO_ADDR
// if time < 0 then
53366: LD_VAR 0 8
53370: PUSH
53371: LD_INT 0
53373: LESS
53374: IFFALSE 53391
// time := time * - 1 ;
53376: LD_ADDR_VAR 0 8
53380: PUSH
53381: LD_VAR 0 8
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: MUL
53390: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53391: LD_VAR 0 8
53395: PUSH
53396: LD_INT 35
53398: PPUSH
53399: LD_INT 875
53401: PPUSH
53402: CALL_OW 12
53406: PLUS
53407: PPUSH
53408: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53412: LD_INT 1
53414: PPUSH
53415: LD_INT 5
53417: PPUSH
53418: CALL_OW 12
53422: PPUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: LD_INT 1
53430: PPUSH
53431: CALL_OW 55
// end ;
53435: GO 53248
// end ;
53437: LD_VAR 0 5
53441: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53442: LD_INT 0
53444: PPUSH
53445: PPUSH
53446: PPUSH
53447: PPUSH
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
// if not turrets or not factories then
53452: LD_VAR 0 1
53456: NOT
53457: IFTRUE 53466
53459: PUSH
53460: LD_VAR 0 2
53464: NOT
53465: OR
53466: IFFALSE 53470
// exit ;
53468: GO 53777
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53470: LD_ADDR_VAR 0 10
53474: PUSH
53475: LD_INT 5
53477: PUSH
53478: LD_INT 6
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: LD_INT 5
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 24
53512: PUSH
53513: LD_INT 25
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 23
53522: PUSH
53523: LD_INT 27
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 42
53536: PUSH
53537: LD_INT 43
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 44
53546: PUSH
53547: LD_INT 46
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 45
53556: PUSH
53557: LD_INT 47
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
// result := [ ] ;
53574: LD_ADDR_VAR 0 3
53578: PUSH
53579: EMPTY
53580: ST_TO_ADDR
// for i in turrets do
53581: LD_ADDR_VAR 0 4
53585: PUSH
53586: LD_VAR 0 1
53590: PUSH
53591: FOR_IN
53592: IFFALSE 53775
// begin nat := GetNation ( i ) ;
53594: LD_ADDR_VAR 0 7
53598: PUSH
53599: LD_VAR 0 4
53603: PPUSH
53604: CALL_OW 248
53608: ST_TO_ADDR
// weapon := 0 ;
53609: LD_ADDR_VAR 0 8
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
// if not nat then
53617: LD_VAR 0 7
53621: NOT
53622: IFFALSE 53626
// continue ;
53624: GO 53591
// for j in list [ nat ] do
53626: LD_ADDR_VAR 0 5
53630: PUSH
53631: LD_VAR 0 10
53635: PUSH
53636: LD_VAR 0 7
53640: ARRAY
53641: PUSH
53642: FOR_IN
53643: IFFALSE 53684
// if GetBWeapon ( i ) = j [ 1 ] then
53645: LD_VAR 0 4
53649: PPUSH
53650: CALL_OW 269
53654: PUSH
53655: LD_VAR 0 5
53659: PUSH
53660: LD_INT 1
53662: ARRAY
53663: EQUAL
53664: IFFALSE 53682
// begin weapon := j [ 2 ] ;
53666: LD_ADDR_VAR 0 8
53670: PUSH
53671: LD_VAR 0 5
53675: PUSH
53676: LD_INT 2
53678: ARRAY
53679: ST_TO_ADDR
// break ;
53680: GO 53684
// end ;
53682: GO 53642
53684: POP
53685: POP
// if not weapon then
53686: LD_VAR 0 8
53690: NOT
53691: IFFALSE 53695
// continue ;
53693: GO 53591
// for k in factories do
53695: LD_ADDR_VAR 0 6
53699: PUSH
53700: LD_VAR 0 2
53704: PUSH
53705: FOR_IN
53706: IFFALSE 53771
// begin weapons := AvailableWeaponList ( k ) ;
53708: LD_ADDR_VAR 0 9
53712: PUSH
53713: LD_VAR 0 6
53717: PPUSH
53718: CALL_OW 478
53722: ST_TO_ADDR
// if not weapons then
53723: LD_VAR 0 9
53727: NOT
53728: IFFALSE 53732
// continue ;
53730: GO 53705
// if weapon in weapons then
53732: LD_VAR 0 8
53736: PUSH
53737: LD_VAR 0 9
53741: IN
53742: IFFALSE 53769
// begin result := [ i , weapon ] ;
53744: LD_ADDR_VAR 0 3
53748: PUSH
53749: LD_VAR 0 4
53753: PUSH
53754: LD_VAR 0 8
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// exit ;
53763: POP
53764: POP
53765: POP
53766: POP
53767: GO 53777
// end ; end ;
53769: GO 53705
53771: POP
53772: POP
// end ;
53773: GO 53591
53775: POP
53776: POP
// end ;
53777: LD_VAR 0 3
53781: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53782: LD_INT 0
53784: PPUSH
// if not side or side > 8 then
53785: LD_VAR 0 3
53789: NOT
53790: IFTRUE 53802
53792: PUSH
53793: LD_VAR 0 3
53797: PUSH
53798: LD_INT 8
53800: GREATER
53801: OR
53802: IFFALSE 53806
// exit ;
53804: GO 53865
// if not range then
53806: LD_VAR 0 4
53810: NOT
53811: IFFALSE 53822
// range := - 12 ;
53813: LD_ADDR_VAR 0 4
53817: PUSH
53818: LD_INT 12
53820: NEG
53821: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53822: LD_VAR 0 1
53826: PPUSH
53827: LD_VAR 0 2
53831: PPUSH
53832: LD_VAR 0 3
53836: PPUSH
53837: LD_VAR 0 4
53841: PPUSH
53842: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53846: LD_VAR 0 1
53850: PPUSH
53851: LD_VAR 0 2
53855: PPUSH
53856: LD_VAR 0 3
53860: PPUSH
53861: CALL_OW 331
// end ;
53865: LD_VAR 0 5
53869: RET
// export function Video ( mode ) ; begin
53870: LD_INT 0
53872: PPUSH
// ingame_video = mode ;
53873: LD_ADDR_OWVAR 52
53877: PUSH
53878: LD_VAR 0 1
53882: ST_TO_ADDR
// interface_hidden = mode ;
53883: LD_ADDR_OWVAR 54
53887: PUSH
53888: LD_VAR 0 1
53892: ST_TO_ADDR
// end ;
53893: LD_VAR 0 2
53897: RET
// export function Join ( array , element ) ; begin
53898: LD_INT 0
53900: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53901: LD_ADDR_VAR 0 3
53905: PUSH
53906: LD_VAR 0 1
53910: PPUSH
53911: LD_VAR 0 1
53915: PUSH
53916: LD_INT 1
53918: PLUS
53919: PPUSH
53920: LD_VAR 0 2
53924: PPUSH
53925: CALL_OW 1
53929: ST_TO_ADDR
// end ;
53930: LD_VAR 0 3
53934: RET
// export function JoinUnion ( array , element ) ; begin
53935: LD_INT 0
53937: PPUSH
// result := array union element ;
53938: LD_ADDR_VAR 0 3
53942: PUSH
53943: LD_VAR 0 1
53947: PUSH
53948: LD_VAR 0 2
53952: UNION
53953: ST_TO_ADDR
// end ;
53954: LD_VAR 0 3
53958: RET
// export function GetBehemoths ( side ) ; begin
53959: LD_INT 0
53961: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53962: LD_ADDR_VAR 0 2
53966: PUSH
53967: LD_INT 22
53969: PUSH
53970: LD_VAR 0 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 31
53981: PUSH
53982: LD_INT 25
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PPUSH
53993: CALL_OW 69
53997: ST_TO_ADDR
// end ;
53998: LD_VAR 0 2
54002: RET
// export function Shuffle ( array ) ; var i , index ; begin
54003: LD_INT 0
54005: PPUSH
54006: PPUSH
54007: PPUSH
// result := [ ] ;
54008: LD_ADDR_VAR 0 2
54012: PUSH
54013: EMPTY
54014: ST_TO_ADDR
// if not array then
54015: LD_VAR 0 1
54019: NOT
54020: IFFALSE 54024
// exit ;
54022: GO 54123
// Randomize ;
54024: CALL_OW 10
// for i = array downto 1 do
54028: LD_ADDR_VAR 0 3
54032: PUSH
54033: DOUBLE
54034: LD_VAR 0 1
54038: INC
54039: ST_TO_ADDR
54040: LD_INT 1
54042: PUSH
54043: FOR_DOWNTO
54044: IFFALSE 54121
// begin index := rand ( 1 , array ) ;
54046: LD_ADDR_VAR 0 4
54050: PUSH
54051: LD_INT 1
54053: PPUSH
54054: LD_VAR 0 1
54058: PPUSH
54059: CALL_OW 12
54063: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54064: LD_ADDR_VAR 0 2
54068: PUSH
54069: LD_VAR 0 2
54073: PPUSH
54074: LD_VAR 0 2
54078: PUSH
54079: LD_INT 1
54081: PLUS
54082: PPUSH
54083: LD_VAR 0 1
54087: PUSH
54088: LD_VAR 0 4
54092: ARRAY
54093: PPUSH
54094: CALL_OW 2
54098: ST_TO_ADDR
// array := Delete ( array , index ) ;
54099: LD_ADDR_VAR 0 1
54103: PUSH
54104: LD_VAR 0 1
54108: PPUSH
54109: LD_VAR 0 4
54113: PPUSH
54114: CALL_OW 3
54118: ST_TO_ADDR
// end ;
54119: GO 54043
54121: POP
54122: POP
// end ;
54123: LD_VAR 0 2
54127: RET
// export function GetBaseMaterials ( base ) ; begin
54128: LD_INT 0
54130: PPUSH
// result := [ 0 , 0 , 0 ] ;
54131: LD_ADDR_VAR 0 2
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// if not base then
54150: LD_VAR 0 1
54154: NOT
54155: IFFALSE 54159
// exit ;
54157: GO 54208
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54159: LD_ADDR_VAR 0 2
54163: PUSH
54164: LD_VAR 0 1
54168: PPUSH
54169: LD_INT 1
54171: PPUSH
54172: CALL_OW 275
54176: PUSH
54177: LD_VAR 0 1
54181: PPUSH
54182: LD_INT 2
54184: PPUSH
54185: CALL_OW 275
54189: PUSH
54190: LD_VAR 0 1
54194: PPUSH
54195: LD_INT 3
54197: PPUSH
54198: CALL_OW 275
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// end ;
54208: LD_VAR 0 2
54212: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54213: LD_INT 0
54215: PPUSH
54216: PPUSH
// result := array ;
54217: LD_ADDR_VAR 0 3
54221: PUSH
54222: LD_VAR 0 1
54226: ST_TO_ADDR
// if size >= result then
54227: LD_VAR 0 2
54231: PUSH
54232: LD_VAR 0 3
54236: GREATEREQUAL
54237: IFFALSE 54241
// exit ;
54239: GO 54291
// if size then
54241: LD_VAR 0 2
54245: IFFALSE 54291
// for i := array downto size do
54247: LD_ADDR_VAR 0 4
54251: PUSH
54252: DOUBLE
54253: LD_VAR 0 1
54257: INC
54258: ST_TO_ADDR
54259: LD_VAR 0 2
54263: PUSH
54264: FOR_DOWNTO
54265: IFFALSE 54289
// result := Delete ( result , result ) ;
54267: LD_ADDR_VAR 0 3
54271: PUSH
54272: LD_VAR 0 3
54276: PPUSH
54277: LD_VAR 0 3
54281: PPUSH
54282: CALL_OW 3
54286: ST_TO_ADDR
54287: GO 54264
54289: POP
54290: POP
// end ;
54291: LD_VAR 0 3
54295: RET
// export function ComExit ( unit ) ; var tmp ; begin
54296: LD_INT 0
54298: PPUSH
54299: PPUSH
// if not IsInUnit ( unit ) then
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 310
54309: NOT
54310: IFFALSE 54314
// exit ;
54312: GO 54374
// tmp := IsInUnit ( unit ) ;
54314: LD_ADDR_VAR 0 3
54318: PUSH
54319: LD_VAR 0 1
54323: PPUSH
54324: CALL_OW 310
54328: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54329: LD_VAR 0 3
54333: PPUSH
54334: CALL_OW 247
54338: PUSH
54339: LD_INT 2
54341: EQUAL
54342: IFFALSE 54355
// ComExitVehicle ( unit ) else
54344: LD_VAR 0 1
54348: PPUSH
54349: CALL_OW 121
54353: GO 54364
// ComExitBuilding ( unit ) ;
54355: LD_VAR 0 1
54359: PPUSH
54360: CALL_OW 122
// result := tmp ;
54364: LD_ADDR_VAR 0 2
54368: PUSH
54369: LD_VAR 0 3
54373: ST_TO_ADDR
// end ;
54374: LD_VAR 0 2
54378: RET
// export function ComExitAll ( units ) ; var i ; begin
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
// if not units then
54383: LD_VAR 0 1
54387: NOT
54388: IFFALSE 54392
// exit ;
54390: GO 54418
// for i in units do
54392: LD_ADDR_VAR 0 3
54396: PUSH
54397: LD_VAR 0 1
54401: PUSH
54402: FOR_IN
54403: IFFALSE 54416
// ComExit ( i ) ;
54405: LD_VAR 0 3
54409: PPUSH
54410: CALL 54296 0 1
54414: GO 54402
54416: POP
54417: POP
// end ;
54418: LD_VAR 0 2
54422: RET
// export function ResetHc ; begin
54423: LD_INT 0
54425: PPUSH
// InitHc ;
54426: CALL_OW 19
// hc_importance := 0 ;
54430: LD_ADDR_OWVAR 32
54434: PUSH
54435: LD_INT 0
54437: ST_TO_ADDR
// end ;
54438: LD_VAR 0 1
54442: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54443: LD_INT 0
54445: PPUSH
54446: PPUSH
54447: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54448: LD_ADDR_VAR 0 6
54452: PUSH
54453: LD_VAR 0 1
54457: PUSH
54458: LD_VAR 0 3
54462: PLUS
54463: PUSH
54464: LD_INT 2
54466: DIV
54467: ST_TO_ADDR
// if _x < 0 then
54468: LD_VAR 0 6
54472: PUSH
54473: LD_INT 0
54475: LESS
54476: IFFALSE 54493
// _x := _x * - 1 ;
54478: LD_ADDR_VAR 0 6
54482: PUSH
54483: LD_VAR 0 6
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: MUL
54492: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54493: LD_ADDR_VAR 0 7
54497: PUSH
54498: LD_VAR 0 2
54502: PUSH
54503: LD_VAR 0 4
54507: PLUS
54508: PUSH
54509: LD_INT 2
54511: DIV
54512: ST_TO_ADDR
// if _y < 0 then
54513: LD_VAR 0 7
54517: PUSH
54518: LD_INT 0
54520: LESS
54521: IFFALSE 54538
// _y := _y * - 1 ;
54523: LD_ADDR_VAR 0 7
54527: PUSH
54528: LD_VAR 0 7
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: MUL
54537: ST_TO_ADDR
// result := [ _x , _y ] ;
54538: LD_ADDR_VAR 0 5
54542: PUSH
54543: LD_VAR 0 6
54547: PUSH
54548: LD_VAR 0 7
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// end ;
54557: LD_VAR 0 5
54561: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54562: LD_INT 0
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
// task := GetTaskList ( unit ) ;
54568: LD_ADDR_VAR 0 7
54572: PUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: CALL_OW 437
54582: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54583: LD_VAR 0 7
54587: NOT
54588: IFFALSE 54607
54590: PUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: LD_VAR 0 2
54600: PPUSH
54601: CALL_OW 308
54605: NOT
54606: AND
54607: IFFALSE 54611
// exit ;
54609: GO 54729
// if IsInArea ( unit , area ) then
54611: LD_VAR 0 1
54615: PPUSH
54616: LD_VAR 0 2
54620: PPUSH
54621: CALL_OW 308
54625: IFFALSE 54643
// begin ComMoveToArea ( unit , goAway ) ;
54627: LD_VAR 0 1
54631: PPUSH
54632: LD_VAR 0 3
54636: PPUSH
54637: CALL_OW 113
// exit ;
54641: GO 54729
// end ; if task [ 1 ] [ 1 ] <> M then
54643: LD_VAR 0 7
54647: PUSH
54648: LD_INT 1
54650: ARRAY
54651: PUSH
54652: LD_INT 1
54654: ARRAY
54655: PUSH
54656: LD_STRING M
54658: NONEQUAL
54659: IFFALSE 54663
// exit ;
54661: GO 54729
// x := task [ 1 ] [ 2 ] ;
54663: LD_ADDR_VAR 0 5
54667: PUSH
54668: LD_VAR 0 7
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: PUSH
54677: LD_INT 2
54679: ARRAY
54680: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54681: LD_ADDR_VAR 0 6
54685: PUSH
54686: LD_VAR 0 7
54690: PUSH
54691: LD_INT 1
54693: ARRAY
54694: PUSH
54695: LD_INT 3
54697: ARRAY
54698: ST_TO_ADDR
// if InArea ( x , y , area ) then
54699: LD_VAR 0 5
54703: PPUSH
54704: LD_VAR 0 6
54708: PPUSH
54709: LD_VAR 0 2
54713: PPUSH
54714: CALL_OW 309
54718: IFFALSE 54729
// ComStop ( unit ) ;
54720: LD_VAR 0 1
54724: PPUSH
54725: CALL_OW 141
// end ;
54729: LD_VAR 0 4
54733: RET
// export function Abs ( value ) ; begin
54734: LD_INT 0
54736: PPUSH
// result := value ;
54737: LD_ADDR_VAR 0 2
54741: PUSH
54742: LD_VAR 0 1
54746: ST_TO_ADDR
// if value < 0 then
54747: LD_VAR 0 1
54751: PUSH
54752: LD_INT 0
54754: LESS
54755: IFFALSE 54772
// result := value * - 1 ;
54757: LD_ADDR_VAR 0 2
54761: PUSH
54762: LD_VAR 0 1
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: MUL
54771: ST_TO_ADDR
// end ;
54772: LD_VAR 0 2
54776: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54777: LD_INT 0
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
54783: PPUSH
54784: PPUSH
54785: PPUSH
54786: PPUSH
// if not unit or not building then
54787: LD_VAR 0 1
54791: NOT
54792: IFTRUE 54801
54794: PUSH
54795: LD_VAR 0 2
54799: NOT
54800: OR
54801: IFFALSE 54805
// exit ;
54803: GO 55033
// x := GetX ( building ) ;
54805: LD_ADDR_VAR 0 4
54809: PUSH
54810: LD_VAR 0 2
54814: PPUSH
54815: CALL_OW 250
54819: ST_TO_ADDR
// y := GetY ( building ) ;
54820: LD_ADDR_VAR 0 6
54824: PUSH
54825: LD_VAR 0 2
54829: PPUSH
54830: CALL_OW 251
54834: ST_TO_ADDR
// d := GetDir ( building ) ;
54835: LD_ADDR_VAR 0 8
54839: PUSH
54840: LD_VAR 0 2
54844: PPUSH
54845: CALL_OW 254
54849: ST_TO_ADDR
// r := 4 ;
54850: LD_ADDR_VAR 0 9
54854: PUSH
54855: LD_INT 4
54857: ST_TO_ADDR
// for i := 1 to 5 do
54858: LD_ADDR_VAR 0 10
54862: PUSH
54863: DOUBLE
54864: LD_INT 1
54866: DEC
54867: ST_TO_ADDR
54868: LD_INT 5
54870: PUSH
54871: FOR_TO
54872: IFFALSE 55031
// begin _x := ShiftX ( x , d , r + i ) ;
54874: LD_ADDR_VAR 0 5
54878: PUSH
54879: LD_VAR 0 4
54883: PPUSH
54884: LD_VAR 0 8
54888: PPUSH
54889: LD_VAR 0 9
54893: PUSH
54894: LD_VAR 0 10
54898: PLUS
54899: PPUSH
54900: CALL_OW 272
54904: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54905: LD_ADDR_VAR 0 7
54909: PUSH
54910: LD_VAR 0 6
54914: PPUSH
54915: LD_VAR 0 8
54919: PPUSH
54920: LD_VAR 0 9
54924: PUSH
54925: LD_VAR 0 10
54929: PLUS
54930: PPUSH
54931: CALL_OW 273
54935: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54936: LD_VAR 0 5
54940: PPUSH
54941: LD_VAR 0 7
54945: PPUSH
54946: CALL_OW 488
54950: IFFALSE 54985
54952: PUSH
54953: LD_VAR 0 5
54957: PPUSH
54958: LD_VAR 0 7
54962: PPUSH
54963: CALL_OW 428
54967: PPUSH
54968: CALL_OW 247
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: IN
54983: NOT
54984: AND
54985: IFFALSE 55029
// begin ComMoveXY ( unit , _x , _y ) ;
54987: LD_VAR 0 1
54991: PPUSH
54992: LD_VAR 0 5
54996: PPUSH
54997: LD_VAR 0 7
55001: PPUSH
55002: CALL_OW 111
// result := [ _x , _y ] ;
55006: LD_ADDR_VAR 0 3
55010: PUSH
55011: LD_VAR 0 5
55015: PUSH
55016: LD_VAR 0 7
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// exit ;
55025: POP
55026: POP
55027: GO 55033
// end ; end ;
55029: GO 54871
55031: POP
55032: POP
// end ;
55033: LD_VAR 0 3
55037: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55038: LD_INT 0
55040: PPUSH
55041: PPUSH
55042: PPUSH
// result := 0 ;
55043: LD_ADDR_VAR 0 3
55047: PUSH
55048: LD_INT 0
55050: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55051: LD_VAR 0 1
55055: PUSH
55056: LD_INT 0
55058: LESS
55059: IFTRUE 55071
55061: PUSH
55062: LD_VAR 0 1
55066: PUSH
55067: LD_INT 8
55069: GREATER
55070: OR
55071: IFTRUE 55083
55073: PUSH
55074: LD_VAR 0 2
55078: PUSH
55079: LD_INT 0
55081: LESS
55082: OR
55083: IFTRUE 55095
55085: PUSH
55086: LD_VAR 0 2
55090: PUSH
55091: LD_INT 8
55093: GREATER
55094: OR
55095: IFFALSE 55099
// exit ;
55097: GO 55174
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55099: LD_ADDR_VAR 0 4
55103: PUSH
55104: LD_INT 22
55106: PUSH
55107: LD_VAR 0 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PPUSH
55116: CALL_OW 69
55120: PUSH
55121: FOR_IN
55122: IFFALSE 55172
// begin un := UnitShoot ( i ) ;
55124: LD_ADDR_VAR 0 5
55128: PUSH
55129: LD_VAR 0 4
55133: PPUSH
55134: CALL_OW 504
55138: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55139: LD_VAR 0 5
55143: PPUSH
55144: CALL_OW 255
55148: PUSH
55149: LD_VAR 0 1
55153: EQUAL
55154: IFFALSE 55170
// begin result := un ;
55156: LD_ADDR_VAR 0 3
55160: PUSH
55161: LD_VAR 0 5
55165: ST_TO_ADDR
// exit ;
55166: POP
55167: POP
55168: GO 55174
// end ; end ;
55170: GO 55121
55172: POP
55173: POP
// end ;
55174: LD_VAR 0 3
55178: RET
// export function GetCargoBay ( units ) ; begin
55179: LD_INT 0
55181: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55182: LD_ADDR_VAR 0 2
55186: PUSH
55187: LD_VAR 0 1
55191: PPUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 34
55197: PUSH
55198: LD_INT 12
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 34
55207: PUSH
55208: LD_INT 51
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 34
55217: PUSH
55218: LD_INT 32
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 34
55227: PUSH
55228: LD_INT 89
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: PPUSH
55242: CALL_OW 72
55246: ST_TO_ADDR
// end ;
55247: LD_VAR 0 2
55251: RET
// export function Negate ( value ) ; begin
55252: LD_INT 0
55254: PPUSH
// result := not value ;
55255: LD_ADDR_VAR 0 2
55259: PUSH
55260: LD_VAR 0 1
55264: NOT
55265: ST_TO_ADDR
// end ;
55266: LD_VAR 0 2
55270: RET
// export function Inc ( value ) ; begin
55271: LD_INT 0
55273: PPUSH
// result := value + 1 ;
55274: LD_ADDR_VAR 0 2
55278: PUSH
55279: LD_VAR 0 1
55283: PUSH
55284: LD_INT 1
55286: PLUS
55287: ST_TO_ADDR
// end ;
55288: LD_VAR 0 2
55292: RET
// export function Dec ( value ) ; begin
55293: LD_INT 0
55295: PPUSH
// result := value - 1 ;
55296: LD_ADDR_VAR 0 2
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_INT 1
55308: MINUS
55309: ST_TO_ADDR
// end ;
55310: LD_VAR 0 2
55314: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55315: LD_INT 0
55317: PPUSH
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55325: LD_VAR 0 1
55329: PPUSH
55330: LD_VAR 0 2
55334: PPUSH
55335: CALL_OW 488
55339: NOT
55340: IFTRUE 55359
55342: PUSH
55343: LD_VAR 0 3
55347: PPUSH
55348: LD_VAR 0 4
55352: PPUSH
55353: CALL_OW 488
55357: NOT
55358: OR
55359: IFFALSE 55372
// begin result := - 1 ;
55361: LD_ADDR_VAR 0 5
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: ST_TO_ADDR
// exit ;
55370: GO 55607
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55372: LD_ADDR_VAR 0 12
55376: PUSH
55377: LD_VAR 0 1
55381: PPUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_VAR 0 3
55391: PPUSH
55392: LD_VAR 0 4
55396: PPUSH
55397: CALL 54443 0 4
55401: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55402: LD_ADDR_VAR 0 11
55406: PUSH
55407: LD_VAR 0 1
55411: PPUSH
55412: LD_VAR 0 2
55416: PPUSH
55417: LD_VAR 0 12
55421: PUSH
55422: LD_INT 1
55424: ARRAY
55425: PPUSH
55426: LD_VAR 0 12
55430: PUSH
55431: LD_INT 2
55433: ARRAY
55434: PPUSH
55435: CALL_OW 298
55439: ST_TO_ADDR
// distance := 9999 ;
55440: LD_ADDR_VAR 0 10
55444: PUSH
55445: LD_INT 9999
55447: ST_TO_ADDR
// for i := 0 to 5 do
55448: LD_ADDR_VAR 0 6
55452: PUSH
55453: DOUBLE
55454: LD_INT 0
55456: DEC
55457: ST_TO_ADDR
55458: LD_INT 5
55460: PUSH
55461: FOR_TO
55462: IFFALSE 55605
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55464: LD_ADDR_VAR 0 7
55468: PUSH
55469: LD_VAR 0 1
55473: PPUSH
55474: LD_VAR 0 6
55478: PPUSH
55479: LD_VAR 0 11
55483: PPUSH
55484: CALL_OW 272
55488: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55489: LD_ADDR_VAR 0 8
55493: PUSH
55494: LD_VAR 0 2
55498: PPUSH
55499: LD_VAR 0 6
55503: PPUSH
55504: LD_VAR 0 11
55508: PPUSH
55509: CALL_OW 273
55513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55514: LD_VAR 0 7
55518: PPUSH
55519: LD_VAR 0 8
55523: PPUSH
55524: CALL_OW 488
55528: NOT
55529: IFFALSE 55533
// continue ;
55531: GO 55461
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55533: LD_ADDR_VAR 0 9
55537: PUSH
55538: LD_VAR 0 12
55542: PUSH
55543: LD_INT 1
55545: ARRAY
55546: PPUSH
55547: LD_VAR 0 12
55551: PUSH
55552: LD_INT 2
55554: ARRAY
55555: PPUSH
55556: LD_VAR 0 7
55560: PPUSH
55561: LD_VAR 0 8
55565: PPUSH
55566: CALL_OW 298
55570: ST_TO_ADDR
// if tmp < distance then
55571: LD_VAR 0 9
55575: PUSH
55576: LD_VAR 0 10
55580: LESS
55581: IFFALSE 55603
// begin result := i ;
55583: LD_ADDR_VAR 0 5
55587: PUSH
55588: LD_VAR 0 6
55592: ST_TO_ADDR
// distance := tmp ;
55593: LD_ADDR_VAR 0 10
55597: PUSH
55598: LD_VAR 0 9
55602: ST_TO_ADDR
// end ; end ;
55603: GO 55461
55605: POP
55606: POP
// end ;
55607: LD_VAR 0 5
55611: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55612: LD_INT 0
55614: PPUSH
55615: PPUSH
// if not driver or not IsInUnit ( driver ) then
55616: LD_VAR 0 1
55620: NOT
55621: IFTRUE 55635
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL_OW 310
55633: NOT
55634: OR
55635: IFFALSE 55639
// exit ;
55637: GO 55729
// vehicle := IsInUnit ( driver ) ;
55639: LD_ADDR_VAR 0 3
55643: PUSH
55644: LD_VAR 0 1
55648: PPUSH
55649: CALL_OW 310
55653: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_STRING \
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: PUSH
55689: LD_STRING E
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_VAR 0 3
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PPUSH
55725: CALL_OW 446
// end ;
55729: LD_VAR 0 2
55733: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55734: LD_INT 0
55736: PPUSH
55737: PPUSH
// if not driver or not IsInUnit ( driver ) then
55738: LD_VAR 0 1
55742: NOT
55743: IFTRUE 55757
55745: PUSH
55746: LD_VAR 0 1
55750: PPUSH
55751: CALL_OW 310
55755: NOT
55756: OR
55757: IFFALSE 55761
// exit ;
55759: GO 55851
// vehicle := IsInUnit ( driver ) ;
55761: LD_ADDR_VAR 0 3
55765: PUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: CALL_OW 310
55775: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55776: LD_VAR 0 1
55780: PPUSH
55781: LD_STRING \
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: PUSH
55811: LD_STRING E
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_VAR 0 3
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PPUSH
55847: CALL_OW 447
// end ;
55851: LD_VAR 0 2
55855: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55856: LD_INT 0
55858: PPUSH
55859: PPUSH
55860: PPUSH
// tmp := [ ] ;
55861: LD_ADDR_VAR 0 5
55865: PUSH
55866: EMPTY
55867: ST_TO_ADDR
// for i in units do
55868: LD_ADDR_VAR 0 4
55872: PUSH
55873: LD_VAR 0 1
55877: PUSH
55878: FOR_IN
55879: IFFALSE 55917
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55881: LD_ADDR_VAR 0 5
55885: PUSH
55886: LD_VAR 0 5
55890: PPUSH
55891: LD_VAR 0 5
55895: PUSH
55896: LD_INT 1
55898: PLUS
55899: PPUSH
55900: LD_VAR 0 4
55904: PPUSH
55905: CALL_OW 256
55909: PPUSH
55910: CALL_OW 2
55914: ST_TO_ADDR
55915: GO 55878
55917: POP
55918: POP
// if not tmp then
55919: LD_VAR 0 5
55923: NOT
55924: IFFALSE 55928
// exit ;
55926: GO 55976
// if asc then
55928: LD_VAR 0 2
55932: IFFALSE 55956
// result := SortListByListAsc ( units , tmp ) else
55934: LD_ADDR_VAR 0 3
55938: PUSH
55939: LD_VAR 0 1
55943: PPUSH
55944: LD_VAR 0 5
55948: PPUSH
55949: CALL_OW 76
55953: ST_TO_ADDR
55954: GO 55976
// result := SortListByListDesc ( units , tmp ) ;
55956: LD_ADDR_VAR 0 3
55960: PUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: LD_VAR 0 5
55970: PPUSH
55971: CALL_OW 77
55975: ST_TO_ADDR
// end ;
55976: LD_VAR 0 3
55980: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55981: LD_INT 0
55983: PPUSH
55984: PPUSH
// task := GetTaskList ( mech ) ;
55985: LD_ADDR_VAR 0 4
55989: PUSH
55990: LD_VAR 0 1
55994: PPUSH
55995: CALL_OW 437
55999: ST_TO_ADDR
// if not task then
56000: LD_VAR 0 4
56004: NOT
56005: IFFALSE 56009
// exit ;
56007: GO 56053
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56009: LD_ADDR_VAR 0 3
56013: PUSH
56014: LD_VAR 0 4
56018: PUSH
56019: LD_INT 1
56021: ARRAY
56022: PUSH
56023: LD_INT 1
56025: ARRAY
56026: PUSH
56027: LD_STRING r
56029: EQUAL
56030: IFFALSE 56052
56032: PUSH
56033: LD_VAR 0 4
56037: PUSH
56038: LD_INT 1
56040: ARRAY
56041: PUSH
56042: LD_INT 4
56044: ARRAY
56045: PUSH
56046: LD_VAR 0 2
56050: EQUAL
56051: AND
56052: ST_TO_ADDR
// end ;
56053: LD_VAR 0 3
56057: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56058: LD_INT 0
56060: PPUSH
// SetDir ( unit , d ) ;
56061: LD_VAR 0 1
56065: PPUSH
56066: LD_VAR 0 4
56070: PPUSH
56071: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56075: LD_ADDR_VAR 0 6
56079: PUSH
56080: LD_VAR 0 1
56084: PPUSH
56085: LD_VAR 0 2
56089: PPUSH
56090: LD_VAR 0 3
56094: PPUSH
56095: LD_VAR 0 5
56099: PPUSH
56100: CALL_OW 48
56104: ST_TO_ADDR
// end ;
56105: LD_VAR 0 6
56109: RET
// export function ToNaturalNumber ( number ) ; begin
56110: LD_INT 0
56112: PPUSH
// result := number div 1 ;
56113: LD_ADDR_VAR 0 2
56117: PUSH
56118: LD_VAR 0 1
56122: PUSH
56123: LD_INT 1
56125: DIV
56126: ST_TO_ADDR
// if number < 0 then
56127: LD_VAR 0 1
56131: PUSH
56132: LD_INT 0
56134: LESS
56135: IFFALSE 56145
// result := 0 ;
56137: LD_ADDR_VAR 0 2
56141: PUSH
56142: LD_INT 0
56144: ST_TO_ADDR
// end ;
56145: LD_VAR 0 2
56149: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56150: LD_INT 0
56152: PPUSH
56153: PPUSH
56154: PPUSH
// if not buildings then
56155: LD_VAR 0 1
56159: NOT
56160: IFFALSE 56164
// exit ;
56162: GO 56279
// tmp := [ ] ;
56164: LD_ADDR_VAR 0 5
56168: PUSH
56169: EMPTY
56170: ST_TO_ADDR
// for b in buildings do
56171: LD_ADDR_VAR 0 4
56175: PUSH
56176: LD_VAR 0 1
56180: PUSH
56181: FOR_IN
56182: IFFALSE 56220
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56184: LD_ADDR_VAR 0 5
56188: PUSH
56189: LD_VAR 0 5
56193: PPUSH
56194: LD_VAR 0 5
56198: PUSH
56199: LD_INT 1
56201: PLUS
56202: PPUSH
56203: LD_VAR 0 4
56207: PPUSH
56208: CALL_OW 266
56212: PPUSH
56213: CALL_OW 1
56217: ST_TO_ADDR
56218: GO 56181
56220: POP
56221: POP
// if not tmp then
56222: LD_VAR 0 5
56226: NOT
56227: IFFALSE 56231
// exit ;
56229: GO 56279
// if asc then
56231: LD_VAR 0 2
56235: IFFALSE 56259
// result := SortListByListAsc ( buildings , tmp ) else
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_VAR 0 1
56246: PPUSH
56247: LD_VAR 0 5
56251: PPUSH
56252: CALL_OW 76
56256: ST_TO_ADDR
56257: GO 56279
// result := SortListByListDesc ( buildings , tmp ) ;
56259: LD_ADDR_VAR 0 3
56263: PUSH
56264: LD_VAR 0 1
56268: PPUSH
56269: LD_VAR 0 5
56273: PPUSH
56274: CALL_OW 77
56278: ST_TO_ADDR
// end ;
56279: LD_VAR 0 3
56283: RET
// export function SortByClass ( units , class ) ; var un ; begin
56284: LD_INT 0
56286: PPUSH
56287: PPUSH
// if not units or not class then
56288: LD_VAR 0 1
56292: NOT
56293: IFTRUE 56302
56295: PUSH
56296: LD_VAR 0 2
56300: NOT
56301: OR
56302: IFFALSE 56306
// exit ;
56304: GO 56401
// result := [ ] ;
56306: LD_ADDR_VAR 0 3
56310: PUSH
56311: EMPTY
56312: ST_TO_ADDR
// for un in units do
56313: LD_ADDR_VAR 0 4
56317: PUSH
56318: LD_VAR 0 1
56322: PUSH
56323: FOR_IN
56324: IFFALSE 56399
// if GetClass ( un ) = class then
56326: LD_VAR 0 4
56330: PPUSH
56331: CALL_OW 257
56335: PUSH
56336: LD_VAR 0 2
56340: EQUAL
56341: IFFALSE 56368
// result := Insert ( result , 1 , un ) else
56343: LD_ADDR_VAR 0 3
56347: PUSH
56348: LD_VAR 0 3
56352: PPUSH
56353: LD_INT 1
56355: PPUSH
56356: LD_VAR 0 4
56360: PPUSH
56361: CALL_OW 2
56365: ST_TO_ADDR
56366: GO 56397
// result := Replace ( result , result + 1 , un ) ;
56368: LD_ADDR_VAR 0 3
56372: PUSH
56373: LD_VAR 0 3
56377: PPUSH
56378: LD_VAR 0 3
56382: PUSH
56383: LD_INT 1
56385: PLUS
56386: PPUSH
56387: LD_VAR 0 4
56391: PPUSH
56392: CALL_OW 1
56396: ST_TO_ADDR
56397: GO 56323
56399: POP
56400: POP
// end ;
56401: LD_VAR 0 3
56405: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56406: LD_INT 0
56408: PPUSH
56409: PPUSH
56410: PPUSH
56411: PPUSH
56412: PPUSH
56413: PPUSH
56414: PPUSH
// result := [ ] ;
56415: LD_ADDR_VAR 0 4
56419: PUSH
56420: EMPTY
56421: ST_TO_ADDR
// if x - r < 0 then
56422: LD_VAR 0 1
56426: PUSH
56427: LD_VAR 0 3
56431: MINUS
56432: PUSH
56433: LD_INT 0
56435: LESS
56436: IFFALSE 56448
// min_x := 0 else
56438: LD_ADDR_VAR 0 8
56442: PUSH
56443: LD_INT 0
56445: ST_TO_ADDR
56446: GO 56464
// min_x := x - r ;
56448: LD_ADDR_VAR 0 8
56452: PUSH
56453: LD_VAR 0 1
56457: PUSH
56458: LD_VAR 0 3
56462: MINUS
56463: ST_TO_ADDR
// if y - r < 0 then
56464: LD_VAR 0 2
56468: PUSH
56469: LD_VAR 0 3
56473: MINUS
56474: PUSH
56475: LD_INT 0
56477: LESS
56478: IFFALSE 56490
// min_y := 0 else
56480: LD_ADDR_VAR 0 7
56484: PUSH
56485: LD_INT 0
56487: ST_TO_ADDR
56488: GO 56506
// min_y := y - r ;
56490: LD_ADDR_VAR 0 7
56494: PUSH
56495: LD_VAR 0 2
56499: PUSH
56500: LD_VAR 0 3
56504: MINUS
56505: ST_TO_ADDR
// max_x := x + r ;
56506: LD_ADDR_VAR 0 9
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: LD_VAR 0 3
56520: PLUS
56521: ST_TO_ADDR
// max_y := y + r ;
56522: LD_ADDR_VAR 0 10
56526: PUSH
56527: LD_VAR 0 2
56531: PUSH
56532: LD_VAR 0 3
56536: PLUS
56537: ST_TO_ADDR
// for _x = min_x to max_x do
56538: LD_ADDR_VAR 0 5
56542: PUSH
56543: DOUBLE
56544: LD_VAR 0 8
56548: DEC
56549: ST_TO_ADDR
56550: LD_VAR 0 9
56554: PUSH
56555: FOR_TO
56556: IFFALSE 56657
// for _y = min_y to max_y do
56558: LD_ADDR_VAR 0 6
56562: PUSH
56563: DOUBLE
56564: LD_VAR 0 7
56568: DEC
56569: ST_TO_ADDR
56570: LD_VAR 0 10
56574: PUSH
56575: FOR_TO
56576: IFFALSE 56653
// begin if not ValidHex ( _x , _y ) then
56578: LD_VAR 0 5
56582: PPUSH
56583: LD_VAR 0 6
56587: PPUSH
56588: CALL_OW 488
56592: NOT
56593: IFFALSE 56597
// continue ;
56595: GO 56575
// if GetResourceTypeXY ( _x , _y ) then
56597: LD_VAR 0 5
56601: PPUSH
56602: LD_VAR 0 6
56606: PPUSH
56607: CALL_OW 283
56611: IFFALSE 56651
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56613: LD_ADDR_VAR 0 4
56617: PUSH
56618: LD_VAR 0 4
56622: PPUSH
56623: LD_VAR 0 4
56627: PUSH
56628: LD_INT 1
56630: PLUS
56631: PPUSH
56632: LD_VAR 0 5
56636: PUSH
56637: LD_VAR 0 6
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PPUSH
56646: CALL_OW 1
56650: ST_TO_ADDR
// end ;
56651: GO 56575
56653: POP
56654: POP
56655: GO 56555
56657: POP
56658: POP
// end ;
56659: LD_VAR 0 4
56663: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56664: LD_INT 0
56666: PPUSH
56667: PPUSH
56668: PPUSH
56669: PPUSH
56670: PPUSH
56671: PPUSH
56672: PPUSH
56673: PPUSH
// if not units then
56674: LD_VAR 0 1
56678: NOT
56679: IFFALSE 56683
// exit ;
56681: GO 57215
// result := UnitFilter ( units , [ f_ok ] ) ;
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: LD_INT 50
56695: PUSH
56696: EMPTY
56697: LIST
56698: PPUSH
56699: CALL_OW 72
56703: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56704: LD_ADDR_VAR 0 8
56708: PUSH
56709: LD_VAR 0 1
56713: PUSH
56714: LD_INT 1
56716: ARRAY
56717: PPUSH
56718: CALL_OW 255
56722: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56723: LD_ADDR_VAR 0 10
56727: PUSH
56728: LD_INT 29
56730: PUSH
56731: LD_INT 91
56733: PUSH
56734: LD_INT 49
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: ST_TO_ADDR
// if not result then
56742: LD_VAR 0 3
56746: NOT
56747: IFFALSE 56751
// exit ;
56749: GO 57215
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56751: LD_ADDR_VAR 0 5
56755: PUSH
56756: LD_INT 81
56758: PUSH
56759: LD_VAR 0 8
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PPUSH
56768: CALL_OW 69
56772: ST_TO_ADDR
// for i in result do
56773: LD_ADDR_VAR 0 4
56777: PUSH
56778: LD_VAR 0 3
56782: PUSH
56783: FOR_IN
56784: IFFALSE 57213
// begin tag := GetTag ( i ) + 1 ;
56786: LD_ADDR_VAR 0 9
56790: PUSH
56791: LD_VAR 0 4
56795: PPUSH
56796: CALL_OW 110
56800: PUSH
56801: LD_INT 1
56803: PLUS
56804: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56805: LD_ADDR_VAR 0 7
56809: PUSH
56810: LD_VAR 0 4
56814: PPUSH
56815: CALL_OW 250
56819: PPUSH
56820: LD_VAR 0 4
56824: PPUSH
56825: CALL_OW 251
56829: PPUSH
56830: LD_INT 4
56832: PPUSH
56833: CALL 56406 0 3
56837: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56838: LD_VAR 0 4
56842: PPUSH
56843: CALL_OW 247
56847: PUSH
56848: LD_INT 2
56850: EQUAL
56851: IFFALSE 56863
56853: PUSH
56854: LD_VAR 0 7
56858: PUSH
56859: LD_INT 2
56861: GREATER
56862: AND
56863: IFFALSE 56883
56865: PUSH
56866: LD_VAR 0 4
56870: PPUSH
56871: CALL_OW 264
56875: PUSH
56876: LD_VAR 0 10
56880: IN
56881: NOT
56882: AND
56883: IFFALSE 56922
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56885: LD_VAR 0 4
56889: PPUSH
56890: LD_VAR 0 7
56894: PUSH
56895: LD_INT 1
56897: ARRAY
56898: PUSH
56899: LD_INT 1
56901: ARRAY
56902: PPUSH
56903: LD_VAR 0 7
56907: PUSH
56908: LD_INT 1
56910: ARRAY
56911: PUSH
56912: LD_INT 2
56914: ARRAY
56915: PPUSH
56916: CALL_OW 116
56920: GO 57211
// if path > tag then
56922: LD_VAR 0 2
56926: PUSH
56927: LD_VAR 0 9
56931: GREATER
56932: IFFALSE 57140
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56934: LD_ADDR_VAR 0 6
56938: PUSH
56939: LD_VAR 0 5
56943: PPUSH
56944: LD_INT 91
56946: PUSH
56947: LD_VAR 0 4
56951: PUSH
56952: LD_INT 8
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: PPUSH
56960: CALL_OW 72
56964: ST_TO_ADDR
// if nearEnemy then
56965: LD_VAR 0 6
56969: IFFALSE 57038
// begin if GetWeapon ( i ) = ru_time_lapser then
56971: LD_VAR 0 4
56975: PPUSH
56976: CALL_OW 264
56980: PUSH
56981: LD_INT 49
56983: EQUAL
56984: IFFALSE 57012
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56986: LD_VAR 0 4
56990: PPUSH
56991: LD_VAR 0 6
56995: PPUSH
56996: LD_VAR 0 4
57000: PPUSH
57001: CALL_OW 74
57005: PPUSH
57006: CALL_OW 112
57010: GO 57036
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57012: LD_VAR 0 4
57016: PPUSH
57017: LD_VAR 0 6
57021: PPUSH
57022: LD_VAR 0 4
57026: PPUSH
57027: CALL_OW 74
57031: PPUSH
57032: CALL 58296 0 2
// end else
57036: GO 57138
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57038: LD_VAR 0 4
57042: PPUSH
57043: LD_VAR 0 2
57047: PUSH
57048: LD_VAR 0 9
57052: ARRAY
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_VAR 0 9
57067: ARRAY
57068: PUSH
57069: LD_INT 2
57071: ARRAY
57072: PPUSH
57073: CALL_OW 297
57077: PUSH
57078: LD_INT 6
57080: GREATER
57081: IFFALSE 57124
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57083: LD_VAR 0 4
57087: PPUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_VAR 0 9
57097: ARRAY
57098: PUSH
57099: LD_INT 1
57101: ARRAY
57102: PPUSH
57103: LD_VAR 0 2
57107: PUSH
57108: LD_VAR 0 9
57112: ARRAY
57113: PUSH
57114: LD_INT 2
57116: ARRAY
57117: PPUSH
57118: CALL_OW 114
57122: GO 57138
// SetTag ( i , tag ) ;
57124: LD_VAR 0 4
57128: PPUSH
57129: LD_VAR 0 9
57133: PPUSH
57134: CALL_OW 109
// end else
57138: GO 57211
// if enemy then
57140: LD_VAR 0 5
57144: IFFALSE 57211
// begin if GetWeapon ( i ) = ru_time_lapser then
57146: LD_VAR 0 4
57150: PPUSH
57151: CALL_OW 264
57155: PUSH
57156: LD_INT 49
57158: EQUAL
57159: IFFALSE 57187
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57161: LD_VAR 0 4
57165: PPUSH
57166: LD_VAR 0 5
57170: PPUSH
57171: LD_VAR 0 4
57175: PPUSH
57176: CALL_OW 74
57180: PPUSH
57181: CALL_OW 112
57185: GO 57211
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57187: LD_VAR 0 4
57191: PPUSH
57192: LD_VAR 0 5
57196: PPUSH
57197: LD_VAR 0 4
57201: PPUSH
57202: CALL_OW 74
57206: PPUSH
57207: CALL 58296 0 2
// end ; end ;
57211: GO 56783
57213: POP
57214: POP
// end ;
57215: LD_VAR 0 3
57219: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57220: LD_INT 0
57222: PPUSH
57223: PPUSH
57224: PPUSH
// if not unit or IsInUnit ( unit ) then
57225: LD_VAR 0 1
57229: NOT
57230: IFTRUE 57243
57232: PUSH
57233: LD_VAR 0 1
57237: PPUSH
57238: CALL_OW 310
57242: OR
57243: IFFALSE 57247
// exit ;
57245: GO 57338
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57247: LD_ADDR_VAR 0 4
57251: PUSH
57252: LD_VAR 0 1
57256: PPUSH
57257: CALL_OW 250
57261: PPUSH
57262: LD_VAR 0 2
57266: PPUSH
57267: LD_INT 1
57269: PPUSH
57270: CALL_OW 272
57274: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57275: LD_ADDR_VAR 0 5
57279: PUSH
57280: LD_VAR 0 1
57284: PPUSH
57285: CALL_OW 251
57289: PPUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: LD_INT 1
57297: PPUSH
57298: CALL_OW 273
57302: ST_TO_ADDR
// if ValidHex ( x , y ) then
57303: LD_VAR 0 4
57307: PPUSH
57308: LD_VAR 0 5
57312: PPUSH
57313: CALL_OW 488
57317: IFFALSE 57338
// ComTurnXY ( unit , x , y ) ;
57319: LD_VAR 0 1
57323: PPUSH
57324: LD_VAR 0 4
57328: PPUSH
57329: LD_VAR 0 5
57333: PPUSH
57334: CALL_OW 118
// end ;
57338: LD_VAR 0 3
57342: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57343: LD_INT 0
57345: PPUSH
57346: PPUSH
// result := false ;
57347: LD_ADDR_VAR 0 3
57351: PUSH
57352: LD_INT 0
57354: ST_TO_ADDR
// if not units then
57355: LD_VAR 0 2
57359: NOT
57360: IFFALSE 57364
// exit ;
57362: GO 57409
// for i in units do
57364: LD_ADDR_VAR 0 4
57368: PUSH
57369: LD_VAR 0 2
57373: PUSH
57374: FOR_IN
57375: IFFALSE 57407
// if See ( side , i ) then
57377: LD_VAR 0 1
57381: PPUSH
57382: LD_VAR 0 4
57386: PPUSH
57387: CALL_OW 292
57391: IFFALSE 57405
// begin result := true ;
57393: LD_ADDR_VAR 0 3
57397: PUSH
57398: LD_INT 1
57400: ST_TO_ADDR
// exit ;
57401: POP
57402: POP
57403: GO 57409
// end ;
57405: GO 57374
57407: POP
57408: POP
// end ;
57409: LD_VAR 0 3
57413: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57414: LD_INT 0
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
// if not unit or not points then
57420: LD_VAR 0 1
57424: NOT
57425: IFTRUE 57434
57427: PUSH
57428: LD_VAR 0 2
57432: NOT
57433: OR
57434: IFFALSE 57438
// exit ;
57436: GO 57528
// dist := 99999 ;
57438: LD_ADDR_VAR 0 5
57442: PUSH
57443: LD_INT 99999
57445: ST_TO_ADDR
// for i in points do
57446: LD_ADDR_VAR 0 4
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: FOR_IN
57457: IFFALSE 57526
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57459: LD_ADDR_VAR 0 6
57463: PUSH
57464: LD_VAR 0 1
57468: PPUSH
57469: LD_VAR 0 4
57473: PUSH
57474: LD_INT 1
57476: ARRAY
57477: PPUSH
57478: LD_VAR 0 4
57482: PUSH
57483: LD_INT 2
57485: ARRAY
57486: PPUSH
57487: CALL_OW 297
57491: ST_TO_ADDR
// if tmpDist < dist then
57492: LD_VAR 0 6
57496: PUSH
57497: LD_VAR 0 5
57501: LESS
57502: IFFALSE 57524
// begin result := i ;
57504: LD_ADDR_VAR 0 3
57508: PUSH
57509: LD_VAR 0 4
57513: ST_TO_ADDR
// dist := tmpDist ;
57514: LD_ADDR_VAR 0 5
57518: PUSH
57519: LD_VAR 0 6
57523: ST_TO_ADDR
// end ; end ;
57524: GO 57456
57526: POP
57527: POP
// end ;
57528: LD_VAR 0 3
57532: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57533: LD_INT 0
57535: PPUSH
// uc_side := side ;
57536: LD_ADDR_OWVAR 20
57540: PUSH
57541: LD_VAR 0 1
57545: ST_TO_ADDR
// uc_nation := 3 ;
57546: LD_ADDR_OWVAR 21
57550: PUSH
57551: LD_INT 3
57553: ST_TO_ADDR
// vc_chassis := 25 ;
57554: LD_ADDR_OWVAR 37
57558: PUSH
57559: LD_INT 25
57561: ST_TO_ADDR
// vc_engine := engine_siberite ;
57562: LD_ADDR_OWVAR 39
57566: PUSH
57567: LD_INT 3
57569: ST_TO_ADDR
// vc_control := control_computer ;
57570: LD_ADDR_OWVAR 38
57574: PUSH
57575: LD_INT 3
57577: ST_TO_ADDR
// vc_weapon := 59 ;
57578: LD_ADDR_OWVAR 40
57582: PUSH
57583: LD_INT 59
57585: ST_TO_ADDR
// result := CreateVehicle ;
57586: LD_ADDR_VAR 0 5
57590: PUSH
57591: CALL_OW 45
57595: ST_TO_ADDR
// SetDir ( result , d ) ;
57596: LD_VAR 0 5
57600: PPUSH
57601: LD_VAR 0 4
57605: PPUSH
57606: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57610: LD_VAR 0 5
57614: PPUSH
57615: LD_VAR 0 2
57619: PPUSH
57620: LD_VAR 0 3
57624: PPUSH
57625: LD_INT 0
57627: PPUSH
57628: CALL_OW 48
// end ;
57632: LD_VAR 0 5
57636: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57637: LD_INT 0
57639: PPUSH
57640: PPUSH
57641: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57642: LD_ADDR_VAR 0 2
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 0
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57665: LD_VAR 0 1
57669: NOT
57670: IFTRUE 57703
57672: PUSH
57673: LD_VAR 0 1
57677: PPUSH
57678: CALL_OW 264
57682: PUSH
57683: LD_INT 12
57685: PUSH
57686: LD_INT 51
57688: PUSH
57689: LD_INT 32
57691: PUSH
57692: LD_INT 89
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: IN
57701: NOT
57702: OR
57703: IFFALSE 57707
// exit ;
57705: GO 57805
// for i := 1 to 3 do
57707: LD_ADDR_VAR 0 3
57711: PUSH
57712: DOUBLE
57713: LD_INT 1
57715: DEC
57716: ST_TO_ADDR
57717: LD_INT 3
57719: PUSH
57720: FOR_TO
57721: IFFALSE 57803
// begin tmp := GetCargo ( cargo , i ) ;
57723: LD_ADDR_VAR 0 4
57727: PUSH
57728: LD_VAR 0 1
57732: PPUSH
57733: LD_VAR 0 3
57737: PPUSH
57738: CALL_OW 289
57742: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57743: LD_ADDR_VAR 0 2
57747: PUSH
57748: LD_VAR 0 2
57752: PPUSH
57753: LD_VAR 0 3
57757: PPUSH
57758: LD_VAR 0 4
57762: PPUSH
57763: CALL_OW 1
57767: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57768: LD_ADDR_VAR 0 2
57772: PUSH
57773: LD_VAR 0 2
57777: PPUSH
57778: LD_INT 4
57780: PPUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_INT 4
57788: ARRAY
57789: PUSH
57790: LD_VAR 0 4
57794: PLUS
57795: PPUSH
57796: CALL_OW 1
57800: ST_TO_ADDR
// end ;
57801: GO 57720
57803: POP
57804: POP
// end ;
57805: LD_VAR 0 2
57809: RET
// export function Length ( array ) ; begin
57810: LD_INT 0
57812: PPUSH
// result := array + 0 ;
57813: LD_ADDR_VAR 0 2
57817: PUSH
57818: LD_VAR 0 1
57822: PUSH
57823: LD_INT 0
57825: PLUS
57826: ST_TO_ADDR
// end ;
57827: LD_VAR 0 2
57831: RET
// export function PrepareArray ( array ) ; begin
57832: LD_INT 0
57834: PPUSH
// result := array diff 0 ;
57835: LD_ADDR_VAR 0 2
57839: PUSH
57840: LD_VAR 0 1
57844: PUSH
57845: LD_INT 0
57847: DIFF
57848: ST_TO_ADDR
// if not result [ 1 ] then
57849: LD_VAR 0 2
57853: PUSH
57854: LD_INT 1
57856: ARRAY
57857: NOT
57858: IFFALSE 57878
// result := Delete ( result , 1 ) ;
57860: LD_ADDR_VAR 0 2
57864: PUSH
57865: LD_VAR 0 2
57869: PPUSH
57870: LD_INT 1
57872: PPUSH
57873: CALL_OW 3
57877: ST_TO_ADDR
// end ;
57878: LD_VAR 0 2
57882: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57883: LD_INT 0
57885: PPUSH
57886: PPUSH
57887: PPUSH
57888: PPUSH
// sibRocketRange := 25 ;
57889: LD_ADDR_VAR 0 6
57893: PUSH
57894: LD_INT 25
57896: ST_TO_ADDR
// result := false ;
57897: LD_ADDR_VAR 0 4
57901: PUSH
57902: LD_INT 0
57904: ST_TO_ADDR
// for i := 0 to 5 do
57905: LD_ADDR_VAR 0 5
57909: PUSH
57910: DOUBLE
57911: LD_INT 0
57913: DEC
57914: ST_TO_ADDR
57915: LD_INT 5
57917: PUSH
57918: FOR_TO
57919: IFFALSE 57986
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57921: LD_VAR 0 1
57925: PPUSH
57926: LD_VAR 0 5
57930: PPUSH
57931: LD_VAR 0 6
57935: PPUSH
57936: CALL_OW 272
57940: PPUSH
57941: LD_VAR 0 2
57945: PPUSH
57946: LD_VAR 0 5
57950: PPUSH
57951: LD_VAR 0 6
57955: PPUSH
57956: CALL_OW 273
57960: PPUSH
57961: LD_VAR 0 3
57965: PPUSH
57966: CALL_OW 309
57970: IFFALSE 57984
// begin result := true ;
57972: LD_ADDR_VAR 0 4
57976: PUSH
57977: LD_INT 1
57979: ST_TO_ADDR
// exit ;
57980: POP
57981: POP
57982: GO 57988
// end ;
57984: GO 57918
57986: POP
57987: POP
// end ;
57988: LD_VAR 0 4
57992: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57993: LD_INT 0
57995: PPUSH
57996: PPUSH
57997: PPUSH
// if btype = b_depot then
57998: LD_VAR 0 2
58002: PUSH
58003: LD_INT 0
58005: EQUAL
58006: IFFALSE 58018
// begin result := true ;
58008: LD_ADDR_VAR 0 3
58012: PUSH
58013: LD_INT 1
58015: ST_TO_ADDR
// exit ;
58016: GO 58138
// end ; pom := GetBase ( depot ) ;
58018: LD_ADDR_VAR 0 4
58022: PUSH
58023: LD_VAR 0 1
58027: PPUSH
58028: CALL_OW 274
58032: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58033: LD_ADDR_VAR 0 5
58037: PUSH
58038: LD_VAR 0 2
58042: PPUSH
58043: LD_VAR 0 1
58047: PPUSH
58048: CALL_OW 248
58052: PPUSH
58053: CALL_OW 450
58057: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58058: LD_ADDR_VAR 0 3
58062: PUSH
58063: LD_VAR 0 4
58067: PPUSH
58068: LD_INT 1
58070: PPUSH
58071: CALL_OW 275
58075: PUSH
58076: LD_VAR 0 5
58080: PUSH
58081: LD_INT 1
58083: ARRAY
58084: GREATEREQUAL
58085: IFFALSE 58111
58087: PUSH
58088: LD_VAR 0 4
58092: PPUSH
58093: LD_INT 2
58095: PPUSH
58096: CALL_OW 275
58100: PUSH
58101: LD_VAR 0 5
58105: PUSH
58106: LD_INT 2
58108: ARRAY
58109: GREATEREQUAL
58110: AND
58111: IFFALSE 58137
58113: PUSH
58114: LD_VAR 0 4
58118: PPUSH
58119: LD_INT 3
58121: PPUSH
58122: CALL_OW 275
58126: PUSH
58127: LD_VAR 0 5
58131: PUSH
58132: LD_INT 3
58134: ARRAY
58135: GREATEREQUAL
58136: AND
58137: ST_TO_ADDR
// end ;
58138: LD_VAR 0 3
58142: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58143: LD_INT 0
58145: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58146: LD_VAR 0 1
58150: PPUSH
58151: LD_VAR 0 2
58155: PPUSH
58156: LD_INT 0
58158: PPUSH
58159: LD_INT 0
58161: PPUSH
58162: LD_INT 1
58164: PPUSH
58165: LD_INT 0
58167: PPUSH
58168: CALL_OW 587
// end ;
58172: LD_VAR 0 3
58176: RET
// export function CenterOnNow ( unit ) ; begin
58177: LD_INT 0
58179: PPUSH
// result := IsInUnit ( unit ) ;
58180: LD_ADDR_VAR 0 2
58184: PUSH
58185: LD_VAR 0 1
58189: PPUSH
58190: CALL_OW 310
58194: ST_TO_ADDR
// if not result then
58195: LD_VAR 0 2
58199: NOT
58200: IFFALSE 58212
// result := unit ;
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: LD_VAR 0 1
58211: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58212: LD_VAR 0 1
58216: PPUSH
58217: CALL_OW 87
// end ;
58221: LD_VAR 0 2
58225: RET
// export function ComMoveHex ( unit , hex ) ; begin
58226: LD_INT 0
58228: PPUSH
// if not hex then
58229: LD_VAR 0 2
58233: NOT
58234: IFFALSE 58238
// exit ;
58236: GO 58291
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58238: LD_VAR 0 2
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PPUSH
58247: LD_VAR 0 2
58251: PUSH
58252: LD_INT 2
58254: ARRAY
58255: PPUSH
58256: CALL_OW 428
58260: IFFALSE 58264
// exit ;
58262: GO 58291
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58264: LD_VAR 0 1
58268: PPUSH
58269: LD_VAR 0 2
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PPUSH
58278: LD_VAR 0 2
58282: PUSH
58283: LD_INT 2
58285: ARRAY
58286: PPUSH
58287: CALL_OW 111
// end ;
58291: LD_VAR 0 3
58295: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58296: LD_INT 0
58298: PPUSH
58299: PPUSH
58300: PPUSH
// if not unit or not enemy then
58301: LD_VAR 0 1
58305: NOT
58306: IFTRUE 58315
58308: PUSH
58309: LD_VAR 0 2
58313: NOT
58314: OR
58315: IFFALSE 58319
// exit ;
58317: GO 58445
// x := GetX ( enemy ) ;
58319: LD_ADDR_VAR 0 4
58323: PUSH
58324: LD_VAR 0 2
58328: PPUSH
58329: CALL_OW 250
58333: ST_TO_ADDR
// y := GetY ( enemy ) ;
58334: LD_ADDR_VAR 0 5
58338: PUSH
58339: LD_VAR 0 2
58343: PPUSH
58344: CALL_OW 251
58348: ST_TO_ADDR
// if ValidHex ( x , y ) then
58349: LD_VAR 0 4
58353: PPUSH
58354: LD_VAR 0 5
58358: PPUSH
58359: CALL_OW 488
58363: IFFALSE 58445
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58365: LD_VAR 0 2
58369: PPUSH
58370: CALL_OW 247
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: IN
58385: IFTRUE 58408
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: CALL_OW 255
58397: PPUSH
58398: LD_VAR 0 2
58402: PPUSH
58403: CALL_OW 292
58407: OR
58408: IFFALSE 58426
// ComAttackUnit ( unit , enemy ) else
58410: LD_VAR 0 1
58414: PPUSH
58415: LD_VAR 0 2
58419: PPUSH
58420: CALL_OW 115
58424: GO 58445
// ComAgressiveMove ( unit , x , y ) ;
58426: LD_VAR 0 1
58430: PPUSH
58431: LD_VAR 0 4
58435: PPUSH
58436: LD_VAR 0 5
58440: PPUSH
58441: CALL_OW 114
// end ;
58445: LD_VAR 0 3
58449: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58450: LD_INT 0
58452: PPUSH
58453: PPUSH
58454: PPUSH
// list := AreaToList ( area , 0 ) ;
58455: LD_ADDR_VAR 0 5
58459: PUSH
58460: LD_VAR 0 1
58464: PPUSH
58465: LD_INT 0
58467: PPUSH
58468: CALL_OW 517
58472: ST_TO_ADDR
// if not list then
58473: LD_VAR 0 5
58477: NOT
58478: IFFALSE 58482
// exit ;
58480: GO 58612
// if all then
58482: LD_VAR 0 2
58486: IFFALSE 58574
// begin for i := 1 to list [ 1 ] do
58488: LD_ADDR_VAR 0 4
58492: PUSH
58493: DOUBLE
58494: LD_INT 1
58496: DEC
58497: ST_TO_ADDR
58498: LD_VAR 0 5
58502: PUSH
58503: LD_INT 1
58505: ARRAY
58506: PUSH
58507: FOR_TO
58508: IFFALSE 58570
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58510: LD_ADDR_VAR 0 3
58514: PUSH
58515: LD_VAR 0 3
58519: PPUSH
58520: LD_VAR 0 3
58524: PUSH
58525: LD_INT 1
58527: PLUS
58528: PPUSH
58529: LD_VAR 0 5
58533: PUSH
58534: LD_INT 1
58536: ARRAY
58537: PUSH
58538: LD_VAR 0 4
58542: ARRAY
58543: PUSH
58544: LD_VAR 0 5
58548: PUSH
58549: LD_INT 2
58551: ARRAY
58552: PUSH
58553: LD_VAR 0 4
58557: ARRAY
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PPUSH
58563: CALL_OW 1
58567: ST_TO_ADDR
58568: GO 58507
58570: POP
58571: POP
// exit ;
58572: GO 58612
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58574: LD_ADDR_VAR 0 3
58578: PUSH
58579: LD_VAR 0 5
58583: PUSH
58584: LD_INT 1
58586: ARRAY
58587: PUSH
58588: LD_INT 1
58590: ARRAY
58591: PUSH
58592: LD_VAR 0 5
58596: PUSH
58597: LD_INT 2
58599: ARRAY
58600: PUSH
58601: LD_INT 1
58603: ARRAY
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: ST_TO_ADDR
// end ;
58612: LD_VAR 0 3
58616: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58617: LD_INT 0
58619: PPUSH
58620: PPUSH
// list := AreaToList ( area , 0 ) ;
58621: LD_ADDR_VAR 0 4
58625: PUSH
58626: LD_VAR 0 1
58630: PPUSH
58631: LD_INT 0
58633: PPUSH
58634: CALL_OW 517
58638: ST_TO_ADDR
// if not list then
58639: LD_VAR 0 4
58643: NOT
58644: IFFALSE 58648
// exit ;
58646: GO 58689
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58648: LD_ADDR_VAR 0 3
58652: PUSH
58653: LD_VAR 0 4
58657: PUSH
58658: LD_INT 1
58660: ARRAY
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PUSH
58666: LD_VAR 0 4
58670: PUSH
58671: LD_INT 2
58673: ARRAY
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: PUSH
58679: LD_VAR 0 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
// end ;
58689: LD_VAR 0 3
58693: RET
// export function First ( array ) ; begin
58694: LD_INT 0
58696: PPUSH
// if not array then
58697: LD_VAR 0 1
58701: NOT
58702: IFFALSE 58706
// exit ;
58704: GO 58720
// result := array [ 1 ] ;
58706: LD_ADDR_VAR 0 2
58710: PUSH
58711: LD_VAR 0 1
58715: PUSH
58716: LD_INT 1
58718: ARRAY
58719: ST_TO_ADDR
// end ;
58720: LD_VAR 0 2
58724: RET
// export function Last ( array ) ; begin
58725: LD_INT 0
58727: PPUSH
// if not array then
58728: LD_VAR 0 1
58732: NOT
58733: IFFALSE 58737
// exit ;
58735: GO 58753
// result := array [ array ] ;
58737: LD_ADDR_VAR 0 2
58741: PUSH
58742: LD_VAR 0 1
58746: PUSH
58747: LD_VAR 0 1
58751: ARRAY
58752: ST_TO_ADDR
// end ;
58753: LD_VAR 0 2
58757: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58758: LD_INT 0
58760: PPUSH
58761: PPUSH
// result := [ ] ;
58762: LD_ADDR_VAR 0 5
58766: PUSH
58767: EMPTY
58768: ST_TO_ADDR
// if not array then
58769: LD_VAR 0 1
58773: NOT
58774: IFFALSE 58778
// exit ;
58776: GO 58890
// for i := 1 to array do
58778: LD_ADDR_VAR 0 6
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_VAR 0 1
58792: PUSH
58793: FOR_TO
58794: IFFALSE 58888
// if array [ i ] [ index ] = value then
58796: LD_VAR 0 1
58800: PUSH
58801: LD_VAR 0 6
58805: ARRAY
58806: PUSH
58807: LD_VAR 0 2
58811: ARRAY
58812: PUSH
58813: LD_VAR 0 3
58817: EQUAL
58818: IFFALSE 58886
// begin if indexColumn then
58820: LD_VAR 0 4
58824: IFFALSE 58860
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58826: LD_ADDR_VAR 0 5
58830: PUSH
58831: LD_VAR 0 5
58835: PPUSH
58836: LD_VAR 0 1
58840: PUSH
58841: LD_VAR 0 6
58845: ARRAY
58846: PUSH
58847: LD_VAR 0 4
58851: ARRAY
58852: PPUSH
58853: CALL 53898 0 2
58857: ST_TO_ADDR
58858: GO 58886
// result := Join ( result , array [ i ] ) ;
58860: LD_ADDR_VAR 0 5
58864: PUSH
58865: LD_VAR 0 5
58869: PPUSH
58870: LD_VAR 0 1
58874: PUSH
58875: LD_VAR 0 6
58879: ARRAY
58880: PPUSH
58881: CALL 53898 0 2
58885: ST_TO_ADDR
// end ;
58886: GO 58793
58888: POP
58889: POP
// end ;
58890: LD_VAR 0 5
58894: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58895: LD_INT 0
58897: PPUSH
// if not vehicles or not parkingPoint then
58898: LD_VAR 0 1
58902: NOT
58903: IFTRUE 58912
58905: PUSH
58906: LD_VAR 0 2
58910: NOT
58911: OR
58912: IFFALSE 58916
// exit ;
58914: GO 59014
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58916: LD_ADDR_VAR 0 1
58920: PUSH
58921: LD_VAR 0 1
58925: PPUSH
58926: LD_INT 50
58928: PUSH
58929: EMPTY
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: LD_INT 92
58937: PUSH
58938: LD_VAR 0 2
58942: PUSH
58943: LD_INT 1
58945: ARRAY
58946: PUSH
58947: LD_VAR 0 2
58951: PUSH
58952: LD_INT 2
58954: ARRAY
58955: PUSH
58956: LD_INT 8
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PPUSH
58973: CALL_OW 72
58977: ST_TO_ADDR
// if not vehicles then
58978: LD_VAR 0 1
58982: NOT
58983: IFFALSE 58987
// exit ;
58985: GO 59014
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58987: LD_VAR 0 1
58991: PPUSH
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 1
58999: ARRAY
59000: PPUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 2
59008: ARRAY
59009: PPUSH
59010: CALL_OW 111
// end ;
59014: LD_VAR 0 3
59018: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59019: LD_INT 0
59021: PPUSH
59022: PPUSH
59023: PPUSH
// if not side or not area then
59024: LD_VAR 0 1
59028: NOT
59029: IFTRUE 59038
59031: PUSH
59032: LD_VAR 0 2
59036: NOT
59037: OR
59038: IFFALSE 59042
// exit ;
59040: GO 59161
// tmp := AreaToList ( area , 0 ) ;
59042: LD_ADDR_VAR 0 5
59046: PUSH
59047: LD_VAR 0 2
59051: PPUSH
59052: LD_INT 0
59054: PPUSH
59055: CALL_OW 517
59059: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59060: LD_ADDR_VAR 0 4
59064: PUSH
59065: DOUBLE
59066: LD_INT 1
59068: DEC
59069: ST_TO_ADDR
59070: LD_VAR 0 5
59074: PUSH
59075: LD_INT 1
59077: ARRAY
59078: PUSH
59079: FOR_TO
59080: IFFALSE 59159
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59082: LD_VAR 0 5
59086: PUSH
59087: LD_INT 1
59089: ARRAY
59090: PUSH
59091: LD_VAR 0 4
59095: ARRAY
59096: PPUSH
59097: LD_VAR 0 5
59101: PUSH
59102: LD_INT 2
59104: ARRAY
59105: PUSH
59106: LD_VAR 0 4
59110: ARRAY
59111: PPUSH
59112: CALL_OW 351
59116: IFFALSE 59157
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59118: LD_VAR 0 5
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PUSH
59127: LD_VAR 0 4
59131: ARRAY
59132: PPUSH
59133: LD_VAR 0 5
59137: PUSH
59138: LD_INT 2
59140: ARRAY
59141: PUSH
59142: LD_VAR 0 4
59146: ARRAY
59147: PPUSH
59148: LD_VAR 0 1
59152: PPUSH
59153: CALL_OW 244
// end ;
59157: GO 59079
59159: POP
59160: POP
// end ;
59161: LD_VAR 0 3
59165: RET
// export function UniqueArray ( array ) ; var i ; begin
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
// result := [ ] ;
59170: LD_ADDR_VAR 0 2
59174: PUSH
59175: EMPTY
59176: ST_TO_ADDR
// if not array then
59177: LD_VAR 0 1
59181: NOT
59182: IFFALSE 59186
// exit ;
59184: GO 59247
// for i := 1 to array do
59186: LD_ADDR_VAR 0 3
59190: PUSH
59191: DOUBLE
59192: LD_INT 1
59194: DEC
59195: ST_TO_ADDR
59196: LD_VAR 0 1
59200: PUSH
59201: FOR_TO
59202: IFFALSE 59245
// if not array [ i ] in result then
59204: LD_VAR 0 1
59208: PUSH
59209: LD_VAR 0 3
59213: ARRAY
59214: PUSH
59215: LD_VAR 0 2
59219: IN
59220: NOT
59221: IFFALSE 59243
// result := Join ( result , i ) ;
59223: LD_ADDR_VAR 0 2
59227: PUSH
59228: LD_VAR 0 2
59232: PPUSH
59233: LD_VAR 0 3
59237: PPUSH
59238: CALL 53898 0 2
59242: ST_TO_ADDR
59243: GO 59201
59245: POP
59246: POP
// end ; end_of_file
59247: LD_VAR 0 2
59251: RET
// export globalGameSaveCounter ; every 0 0$1 do
59252: GO 59254
59254: DISABLE
// begin enable ;
59255: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59256: LD_STRING updateTimer(
59258: PUSH
59259: LD_OWVAR 1
59263: STR
59264: PUSH
59265: LD_STRING );
59267: STR
59268: PPUSH
59269: CALL_OW 559
// end ;
59273: END
// every 0 0$1 do
59274: GO 59276
59276: DISABLE
// begin globalGameSaveCounter := 0 ;
59277: LD_ADDR_EXP 60
59281: PUSH
59282: LD_INT 0
59284: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59285: LD_STRING setGameSaveCounter(0)
59287: PPUSH
59288: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59292: LD_STRING initStreamRollete();
59294: PPUSH
59295: CALL_OW 559
// InitStreamMode ;
59299: CALL 60651 0 0
// DefineStreamItems ( false ) ;
59303: LD_INT 0
59305: PPUSH
59306: CALL 61115 0 1
// end ;
59310: END
// export function SOS_MapStart ( ) ; begin
59311: LD_INT 0
59313: PPUSH
// if streamModeActive then
59314: LD_EXP 61
59318: IFFALSE 59327
// DefineStreamItems ( true ) ;
59320: LD_INT 1
59322: PPUSH
59323: CALL 61115 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
59327: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
59329: PPUSH
59330: CALL_OW 559
// UpdateLuaVariables ( ) ;
59334: CALL 59351 0 0
// UpdateFactoryWaypoints ( ) ;
59338: CALL 74237 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59342: CALL 74489 0 0
// end ;
59346: LD_VAR 0 1
59350: RET
// function UpdateLuaVariables ( ) ; begin
59351: LD_INT 0
59353: PPUSH
// if globalGameSaveCounter then
59354: LD_EXP 60
59358: IFFALSE 59392
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59360: LD_ADDR_EXP 60
59364: PUSH
59365: LD_EXP 60
59369: PPUSH
59370: CALL 55271 0 1
59374: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59375: LD_STRING setGameSaveCounter(
59377: PUSH
59378: LD_EXP 60
59382: STR
59383: PUSH
59384: LD_STRING )
59386: STR
59387: PPUSH
59388: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59392: LD_STRING setGameDifficulty(
59394: PUSH
59395: LD_OWVAR 67
59399: STR
59400: PUSH
59401: LD_STRING )
59403: STR
59404: PPUSH
59405: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59409: LD_STRING displayDifficulty(
59411: PUSH
59412: LD_OWVAR 67
59416: STR
59417: PUSH
59418: LD_STRING )
59420: STR
59421: PPUSH
59422: CALL_OW 559
// end ;
59426: LD_VAR 0 1
59430: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59431: LD_INT 0
59433: PPUSH
// if p2 = stream_mode then
59434: LD_VAR 0 2
59438: PUSH
59439: LD_INT 100
59441: EQUAL
59442: IFFALSE 60445
// begin if not StreamModeActive then
59444: LD_EXP 61
59448: NOT
59449: IFFALSE 59459
// StreamModeActive := true ;
59451: LD_ADDR_EXP 61
59455: PUSH
59456: LD_INT 1
59458: ST_TO_ADDR
// if p3 = 0 then
59459: LD_VAR 0 3
59463: PUSH
59464: LD_INT 0
59466: EQUAL
59467: IFFALSE 59473
// InitStreamMode ;
59469: CALL 60651 0 0
// if p3 = 1 then
59473: LD_VAR 0 3
59477: PUSH
59478: LD_INT 1
59480: EQUAL
59481: IFFALSE 59491
// sRocket := true ;
59483: LD_ADDR_EXP 66
59487: PUSH
59488: LD_INT 1
59490: ST_TO_ADDR
// if p3 = 2 then
59491: LD_VAR 0 3
59495: PUSH
59496: LD_INT 2
59498: EQUAL
59499: IFFALSE 59509
// sSpeed := true ;
59501: LD_ADDR_EXP 65
59505: PUSH
59506: LD_INT 1
59508: ST_TO_ADDR
// if p3 = 3 then
59509: LD_VAR 0 3
59513: PUSH
59514: LD_INT 3
59516: EQUAL
59517: IFFALSE 59527
// sEngine := true ;
59519: LD_ADDR_EXP 67
59523: PUSH
59524: LD_INT 1
59526: ST_TO_ADDR
// if p3 = 4 then
59527: LD_VAR 0 3
59531: PUSH
59532: LD_INT 4
59534: EQUAL
59535: IFFALSE 59545
// sSpec := true ;
59537: LD_ADDR_EXP 64
59541: PUSH
59542: LD_INT 1
59544: ST_TO_ADDR
// if p3 = 5 then
59545: LD_VAR 0 3
59549: PUSH
59550: LD_INT 5
59552: EQUAL
59553: IFFALSE 59563
// sLevel := true ;
59555: LD_ADDR_EXP 68
59559: PUSH
59560: LD_INT 1
59562: ST_TO_ADDR
// if p3 = 6 then
59563: LD_VAR 0 3
59567: PUSH
59568: LD_INT 6
59570: EQUAL
59571: IFFALSE 59581
// sArmoury := true ;
59573: LD_ADDR_EXP 69
59577: PUSH
59578: LD_INT 1
59580: ST_TO_ADDR
// if p3 = 7 then
59581: LD_VAR 0 3
59585: PUSH
59586: LD_INT 7
59588: EQUAL
59589: IFFALSE 59599
// sRadar := true ;
59591: LD_ADDR_EXP 70
59595: PUSH
59596: LD_INT 1
59598: ST_TO_ADDR
// if p3 = 8 then
59599: LD_VAR 0 3
59603: PUSH
59604: LD_INT 8
59606: EQUAL
59607: IFFALSE 59617
// sBunker := true ;
59609: LD_ADDR_EXP 71
59613: PUSH
59614: LD_INT 1
59616: ST_TO_ADDR
// if p3 = 9 then
59617: LD_VAR 0 3
59621: PUSH
59622: LD_INT 9
59624: EQUAL
59625: IFFALSE 59635
// sHack := true ;
59627: LD_ADDR_EXP 72
59631: PUSH
59632: LD_INT 1
59634: ST_TO_ADDR
// if p3 = 10 then
59635: LD_VAR 0 3
59639: PUSH
59640: LD_INT 10
59642: EQUAL
59643: IFFALSE 59653
// sFire := true ;
59645: LD_ADDR_EXP 73
59649: PUSH
59650: LD_INT 1
59652: ST_TO_ADDR
// if p3 = 11 then
59653: LD_VAR 0 3
59657: PUSH
59658: LD_INT 11
59660: EQUAL
59661: IFFALSE 59671
// sRefresh := true ;
59663: LD_ADDR_EXP 74
59667: PUSH
59668: LD_INT 1
59670: ST_TO_ADDR
// if p3 = 12 then
59671: LD_VAR 0 3
59675: PUSH
59676: LD_INT 12
59678: EQUAL
59679: IFFALSE 59689
// sExp := true ;
59681: LD_ADDR_EXP 75
59685: PUSH
59686: LD_INT 1
59688: ST_TO_ADDR
// if p3 = 13 then
59689: LD_VAR 0 3
59693: PUSH
59694: LD_INT 13
59696: EQUAL
59697: IFFALSE 59707
// sDepot := true ;
59699: LD_ADDR_EXP 76
59703: PUSH
59704: LD_INT 1
59706: ST_TO_ADDR
// if p3 = 14 then
59707: LD_VAR 0 3
59711: PUSH
59712: LD_INT 14
59714: EQUAL
59715: IFFALSE 59725
// sFlag := true ;
59717: LD_ADDR_EXP 77
59721: PUSH
59722: LD_INT 1
59724: ST_TO_ADDR
// if p3 = 15 then
59725: LD_VAR 0 3
59729: PUSH
59730: LD_INT 15
59732: EQUAL
59733: IFFALSE 59743
// sKamikadze := true ;
59735: LD_ADDR_EXP 85
59739: PUSH
59740: LD_INT 1
59742: ST_TO_ADDR
// if p3 = 16 then
59743: LD_VAR 0 3
59747: PUSH
59748: LD_INT 16
59750: EQUAL
59751: IFFALSE 59761
// sTroll := true ;
59753: LD_ADDR_EXP 86
59757: PUSH
59758: LD_INT 1
59760: ST_TO_ADDR
// if p3 = 17 then
59761: LD_VAR 0 3
59765: PUSH
59766: LD_INT 17
59768: EQUAL
59769: IFFALSE 59779
// sSlow := true ;
59771: LD_ADDR_EXP 87
59775: PUSH
59776: LD_INT 1
59778: ST_TO_ADDR
// if p3 = 18 then
59779: LD_VAR 0 3
59783: PUSH
59784: LD_INT 18
59786: EQUAL
59787: IFFALSE 59797
// sLack := true ;
59789: LD_ADDR_EXP 88
59793: PUSH
59794: LD_INT 1
59796: ST_TO_ADDR
// if p3 = 19 then
59797: LD_VAR 0 3
59801: PUSH
59802: LD_INT 19
59804: EQUAL
59805: IFFALSE 59815
// sTank := true ;
59807: LD_ADDR_EXP 90
59811: PUSH
59812: LD_INT 1
59814: ST_TO_ADDR
// if p3 = 20 then
59815: LD_VAR 0 3
59819: PUSH
59820: LD_INT 20
59822: EQUAL
59823: IFFALSE 59833
// sRemote := true ;
59825: LD_ADDR_EXP 91
59829: PUSH
59830: LD_INT 1
59832: ST_TO_ADDR
// if p3 = 21 then
59833: LD_VAR 0 3
59837: PUSH
59838: LD_INT 21
59840: EQUAL
59841: IFFALSE 59851
// sPowell := true ;
59843: LD_ADDR_EXP 92
59847: PUSH
59848: LD_INT 1
59850: ST_TO_ADDR
// if p3 = 22 then
59851: LD_VAR 0 3
59855: PUSH
59856: LD_INT 22
59858: EQUAL
59859: IFFALSE 59869
// sTeleport := true ;
59861: LD_ADDR_EXP 95
59865: PUSH
59866: LD_INT 1
59868: ST_TO_ADDR
// if p3 = 23 then
59869: LD_VAR 0 3
59873: PUSH
59874: LD_INT 23
59876: EQUAL
59877: IFFALSE 59887
// sOilTower := true ;
59879: LD_ADDR_EXP 97
59883: PUSH
59884: LD_INT 1
59886: ST_TO_ADDR
// if p3 = 24 then
59887: LD_VAR 0 3
59891: PUSH
59892: LD_INT 24
59894: EQUAL
59895: IFFALSE 59905
// sShovel := true ;
59897: LD_ADDR_EXP 98
59901: PUSH
59902: LD_INT 1
59904: ST_TO_ADDR
// if p3 = 25 then
59905: LD_VAR 0 3
59909: PUSH
59910: LD_INT 25
59912: EQUAL
59913: IFFALSE 59923
// sSheik := true ;
59915: LD_ADDR_EXP 99
59919: PUSH
59920: LD_INT 1
59922: ST_TO_ADDR
// if p3 = 26 then
59923: LD_VAR 0 3
59927: PUSH
59928: LD_INT 26
59930: EQUAL
59931: IFFALSE 59941
// sEarthquake := true ;
59933: LD_ADDR_EXP 101
59937: PUSH
59938: LD_INT 1
59940: ST_TO_ADDR
// if p3 = 27 then
59941: LD_VAR 0 3
59945: PUSH
59946: LD_INT 27
59948: EQUAL
59949: IFFALSE 59959
// sAI := true ;
59951: LD_ADDR_EXP 102
59955: PUSH
59956: LD_INT 1
59958: ST_TO_ADDR
// if p3 = 28 then
59959: LD_VAR 0 3
59963: PUSH
59964: LD_INT 28
59966: EQUAL
59967: IFFALSE 59977
// sCargo := true ;
59969: LD_ADDR_EXP 105
59973: PUSH
59974: LD_INT 1
59976: ST_TO_ADDR
// if p3 = 29 then
59977: LD_VAR 0 3
59981: PUSH
59982: LD_INT 29
59984: EQUAL
59985: IFFALSE 59995
// sDLaser := true ;
59987: LD_ADDR_EXP 106
59991: PUSH
59992: LD_INT 1
59994: ST_TO_ADDR
// if p3 = 30 then
59995: LD_VAR 0 3
59999: PUSH
60000: LD_INT 30
60002: EQUAL
60003: IFFALSE 60013
// sExchange := true ;
60005: LD_ADDR_EXP 107
60009: PUSH
60010: LD_INT 1
60012: ST_TO_ADDR
// if p3 = 31 then
60013: LD_VAR 0 3
60017: PUSH
60018: LD_INT 31
60020: EQUAL
60021: IFFALSE 60031
// sFac := true ;
60023: LD_ADDR_EXP 108
60027: PUSH
60028: LD_INT 1
60030: ST_TO_ADDR
// if p3 = 32 then
60031: LD_VAR 0 3
60035: PUSH
60036: LD_INT 32
60038: EQUAL
60039: IFFALSE 60049
// sPower := true ;
60041: LD_ADDR_EXP 109
60045: PUSH
60046: LD_INT 1
60048: ST_TO_ADDR
// if p3 = 33 then
60049: LD_VAR 0 3
60053: PUSH
60054: LD_INT 33
60056: EQUAL
60057: IFFALSE 60067
// sRandom := true ;
60059: LD_ADDR_EXP 110
60063: PUSH
60064: LD_INT 1
60066: ST_TO_ADDR
// if p3 = 34 then
60067: LD_VAR 0 3
60071: PUSH
60072: LD_INT 34
60074: EQUAL
60075: IFFALSE 60085
// sShield := true ;
60077: LD_ADDR_EXP 111
60081: PUSH
60082: LD_INT 1
60084: ST_TO_ADDR
// if p3 = 35 then
60085: LD_VAR 0 3
60089: PUSH
60090: LD_INT 35
60092: EQUAL
60093: IFFALSE 60103
// sTime := true ;
60095: LD_ADDR_EXP 112
60099: PUSH
60100: LD_INT 1
60102: ST_TO_ADDR
// if p3 = 36 then
60103: LD_VAR 0 3
60107: PUSH
60108: LD_INT 36
60110: EQUAL
60111: IFFALSE 60121
// sTools := true ;
60113: LD_ADDR_EXP 113
60117: PUSH
60118: LD_INT 1
60120: ST_TO_ADDR
// if p3 = 101 then
60121: LD_VAR 0 3
60125: PUSH
60126: LD_INT 101
60128: EQUAL
60129: IFFALSE 60139
// sSold := true ;
60131: LD_ADDR_EXP 78
60135: PUSH
60136: LD_INT 1
60138: ST_TO_ADDR
// if p3 = 102 then
60139: LD_VAR 0 3
60143: PUSH
60144: LD_INT 102
60146: EQUAL
60147: IFFALSE 60157
// sDiff := true ;
60149: LD_ADDR_EXP 79
60153: PUSH
60154: LD_INT 1
60156: ST_TO_ADDR
// if p3 = 103 then
60157: LD_VAR 0 3
60161: PUSH
60162: LD_INT 103
60164: EQUAL
60165: IFFALSE 60175
// sFog := true ;
60167: LD_ADDR_EXP 82
60171: PUSH
60172: LD_INT 1
60174: ST_TO_ADDR
// if p3 = 104 then
60175: LD_VAR 0 3
60179: PUSH
60180: LD_INT 104
60182: EQUAL
60183: IFFALSE 60193
// sReset := true ;
60185: LD_ADDR_EXP 83
60189: PUSH
60190: LD_INT 1
60192: ST_TO_ADDR
// if p3 = 105 then
60193: LD_VAR 0 3
60197: PUSH
60198: LD_INT 105
60200: EQUAL
60201: IFFALSE 60211
// sSun := true ;
60203: LD_ADDR_EXP 84
60207: PUSH
60208: LD_INT 1
60210: ST_TO_ADDR
// if p3 = 106 then
60211: LD_VAR 0 3
60215: PUSH
60216: LD_INT 106
60218: EQUAL
60219: IFFALSE 60229
// sTiger := true ;
60221: LD_ADDR_EXP 80
60225: PUSH
60226: LD_INT 1
60228: ST_TO_ADDR
// if p3 = 107 then
60229: LD_VAR 0 3
60233: PUSH
60234: LD_INT 107
60236: EQUAL
60237: IFFALSE 60247
// sBomb := true ;
60239: LD_ADDR_EXP 81
60243: PUSH
60244: LD_INT 1
60246: ST_TO_ADDR
// if p3 = 108 then
60247: LD_VAR 0 3
60251: PUSH
60252: LD_INT 108
60254: EQUAL
60255: IFFALSE 60265
// sWound := true ;
60257: LD_ADDR_EXP 89
60261: PUSH
60262: LD_INT 1
60264: ST_TO_ADDR
// if p3 = 109 then
60265: LD_VAR 0 3
60269: PUSH
60270: LD_INT 109
60272: EQUAL
60273: IFFALSE 60283
// sBetray := true ;
60275: LD_ADDR_EXP 93
60279: PUSH
60280: LD_INT 1
60282: ST_TO_ADDR
// if p3 = 110 then
60283: LD_VAR 0 3
60287: PUSH
60288: LD_INT 110
60290: EQUAL
60291: IFFALSE 60301
// sContamin := true ;
60293: LD_ADDR_EXP 94
60297: PUSH
60298: LD_INT 1
60300: ST_TO_ADDR
// if p3 = 111 then
60301: LD_VAR 0 3
60305: PUSH
60306: LD_INT 111
60308: EQUAL
60309: IFFALSE 60319
// sOil := true ;
60311: LD_ADDR_EXP 96
60315: PUSH
60316: LD_INT 1
60318: ST_TO_ADDR
// if p3 = 112 then
60319: LD_VAR 0 3
60323: PUSH
60324: LD_INT 112
60326: EQUAL
60327: IFFALSE 60337
// sStu := true ;
60329: LD_ADDR_EXP 100
60333: PUSH
60334: LD_INT 1
60336: ST_TO_ADDR
// if p3 = 113 then
60337: LD_VAR 0 3
60341: PUSH
60342: LD_INT 113
60344: EQUAL
60345: IFFALSE 60355
// sBazooka := true ;
60347: LD_ADDR_EXP 103
60351: PUSH
60352: LD_INT 1
60354: ST_TO_ADDR
// if p3 = 114 then
60355: LD_VAR 0 3
60359: PUSH
60360: LD_INT 114
60362: EQUAL
60363: IFFALSE 60373
// sMortar := true ;
60365: LD_ADDR_EXP 104
60369: PUSH
60370: LD_INT 1
60372: ST_TO_ADDR
// if p3 = 115 then
60373: LD_VAR 0 3
60377: PUSH
60378: LD_INT 115
60380: EQUAL
60381: IFFALSE 60391
// sRanger := true ;
60383: LD_ADDR_EXP 114
60387: PUSH
60388: LD_INT 1
60390: ST_TO_ADDR
// if p3 = 116 then
60391: LD_VAR 0 3
60395: PUSH
60396: LD_INT 116
60398: EQUAL
60399: IFFALSE 60409
// sComputer := true ;
60401: LD_ADDR_EXP 115
60405: PUSH
60406: LD_INT 1
60408: ST_TO_ADDR
// if p3 = 117 then
60409: LD_VAR 0 3
60413: PUSH
60414: LD_INT 117
60416: EQUAL
60417: IFFALSE 60427
// s30 := true ;
60419: LD_ADDR_EXP 116
60423: PUSH
60424: LD_INT 1
60426: ST_TO_ADDR
// if p3 = 118 then
60427: LD_VAR 0 3
60431: PUSH
60432: LD_INT 118
60434: EQUAL
60435: IFFALSE 60445
// s60 := true ;
60437: LD_ADDR_EXP 117
60441: PUSH
60442: LD_INT 1
60444: ST_TO_ADDR
// end ; if p2 = hack_mode then
60445: LD_VAR 0 2
60449: PUSH
60450: LD_INT 101
60452: EQUAL
60453: IFFALSE 60581
// begin case p3 of 1 :
60455: LD_VAR 0 3
60459: PUSH
60460: LD_INT 1
60462: DOUBLE
60463: EQUAL
60464: IFTRUE 60468
60466: GO 60475
60468: POP
// hHackUnlimitedResources ; 2 :
60469: CALL 72844 0 0
60473: GO 60581
60475: LD_INT 2
60477: DOUBLE
60478: EQUAL
60479: IFTRUE 60483
60481: GO 60490
60483: POP
// hHackSetLevel10 ; 3 :
60484: CALL 72977 0 0
60488: GO 60581
60490: LD_INT 3
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60498
60496: GO 60505
60498: POP
// hHackSetLevel10YourUnits ; 4 :
60499: CALL 73062 0 0
60503: GO 60581
60505: LD_INT 4
60507: DOUBLE
60508: EQUAL
60509: IFTRUE 60513
60511: GO 60520
60513: POP
// hHackInvincible ; 5 :
60514: CALL 73510 0 0
60518: GO 60581
60520: LD_INT 5
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60528
60526: GO 60535
60528: POP
// hHackInvisible ; 6 :
60529: CALL 73621 0 0
60533: GO 60581
60535: LD_INT 6
60537: DOUBLE
60538: EQUAL
60539: IFTRUE 60543
60541: GO 60550
60543: POP
// hHackChangeYourSide ; 7 :
60544: CALL 73678 0 0
60548: GO 60581
60550: LD_INT 7
60552: DOUBLE
60553: EQUAL
60554: IFTRUE 60558
60556: GO 60565
60558: POP
// hHackChangeUnitSide ; 8 :
60559: CALL 73720 0 0
60563: GO 60581
60565: LD_INT 8
60567: DOUBLE
60568: EQUAL
60569: IFTRUE 60573
60571: GO 60580
60573: POP
// hHackFog ; end ;
60574: CALL 73821 0 0
60578: GO 60581
60580: POP
// end ; if p2 = game_save_mode then
60581: LD_VAR 0 2
60585: PUSH
60586: LD_INT 102
60588: EQUAL
60589: IFFALSE 60646
// begin if p3 = 1 then
60591: LD_VAR 0 3
60595: PUSH
60596: LD_INT 1
60598: EQUAL
60599: IFFALSE 60611
// globalGameSaveCounter := p4 ;
60601: LD_ADDR_EXP 60
60605: PUSH
60606: LD_VAR 0 4
60610: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60611: LD_VAR 0 3
60615: PUSH
60616: LD_INT 2
60618: EQUAL
60619: IFFALSE 60627
60621: PUSH
60622: LD_EXP 60
60626: AND
60627: IFFALSE 60646
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60629: LD_STRING setGameSaveCounter(
60631: PUSH
60632: LD_EXP 60
60636: STR
60637: PUSH
60638: LD_STRING )
60640: STR
60641: PPUSH
60642: CALL_OW 559
// end ; end ;
60646: LD_VAR 0 7
60650: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60651: LD_INT 0
60653: PPUSH
// streamModeActive := false ;
60654: LD_ADDR_EXP 61
60658: PUSH
60659: LD_INT 0
60661: ST_TO_ADDR
// normalCounter := 36 ;
60662: LD_ADDR_EXP 62
60666: PUSH
60667: LD_INT 36
60669: ST_TO_ADDR
// hardcoreCounter := 18 ;
60670: LD_ADDR_EXP 63
60674: PUSH
60675: LD_INT 18
60677: ST_TO_ADDR
// sRocket := false ;
60678: LD_ADDR_EXP 66
60682: PUSH
60683: LD_INT 0
60685: ST_TO_ADDR
// sSpeed := false ;
60686: LD_ADDR_EXP 65
60690: PUSH
60691: LD_INT 0
60693: ST_TO_ADDR
// sEngine := false ;
60694: LD_ADDR_EXP 67
60698: PUSH
60699: LD_INT 0
60701: ST_TO_ADDR
// sSpec := false ;
60702: LD_ADDR_EXP 64
60706: PUSH
60707: LD_INT 0
60709: ST_TO_ADDR
// sLevel := false ;
60710: LD_ADDR_EXP 68
60714: PUSH
60715: LD_INT 0
60717: ST_TO_ADDR
// sArmoury := false ;
60718: LD_ADDR_EXP 69
60722: PUSH
60723: LD_INT 0
60725: ST_TO_ADDR
// sRadar := false ;
60726: LD_ADDR_EXP 70
60730: PUSH
60731: LD_INT 0
60733: ST_TO_ADDR
// sBunker := false ;
60734: LD_ADDR_EXP 71
60738: PUSH
60739: LD_INT 0
60741: ST_TO_ADDR
// sHack := false ;
60742: LD_ADDR_EXP 72
60746: PUSH
60747: LD_INT 0
60749: ST_TO_ADDR
// sFire := false ;
60750: LD_ADDR_EXP 73
60754: PUSH
60755: LD_INT 0
60757: ST_TO_ADDR
// sRefresh := false ;
60758: LD_ADDR_EXP 74
60762: PUSH
60763: LD_INT 0
60765: ST_TO_ADDR
// sExp := false ;
60766: LD_ADDR_EXP 75
60770: PUSH
60771: LD_INT 0
60773: ST_TO_ADDR
// sDepot := false ;
60774: LD_ADDR_EXP 76
60778: PUSH
60779: LD_INT 0
60781: ST_TO_ADDR
// sFlag := false ;
60782: LD_ADDR_EXP 77
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// sKamikadze := false ;
60790: LD_ADDR_EXP 85
60794: PUSH
60795: LD_INT 0
60797: ST_TO_ADDR
// sTroll := false ;
60798: LD_ADDR_EXP 86
60802: PUSH
60803: LD_INT 0
60805: ST_TO_ADDR
// sSlow := false ;
60806: LD_ADDR_EXP 87
60810: PUSH
60811: LD_INT 0
60813: ST_TO_ADDR
// sLack := false ;
60814: LD_ADDR_EXP 88
60818: PUSH
60819: LD_INT 0
60821: ST_TO_ADDR
// sTank := false ;
60822: LD_ADDR_EXP 90
60826: PUSH
60827: LD_INT 0
60829: ST_TO_ADDR
// sRemote := false ;
60830: LD_ADDR_EXP 91
60834: PUSH
60835: LD_INT 0
60837: ST_TO_ADDR
// sPowell := false ;
60838: LD_ADDR_EXP 92
60842: PUSH
60843: LD_INT 0
60845: ST_TO_ADDR
// sTeleport := false ;
60846: LD_ADDR_EXP 95
60850: PUSH
60851: LD_INT 0
60853: ST_TO_ADDR
// sOilTower := false ;
60854: LD_ADDR_EXP 97
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// sShovel := false ;
60862: LD_ADDR_EXP 98
60866: PUSH
60867: LD_INT 0
60869: ST_TO_ADDR
// sSheik := false ;
60870: LD_ADDR_EXP 99
60874: PUSH
60875: LD_INT 0
60877: ST_TO_ADDR
// sEarthquake := false ;
60878: LD_ADDR_EXP 101
60882: PUSH
60883: LD_INT 0
60885: ST_TO_ADDR
// sAI := false ;
60886: LD_ADDR_EXP 102
60890: PUSH
60891: LD_INT 0
60893: ST_TO_ADDR
// sCargo := false ;
60894: LD_ADDR_EXP 105
60898: PUSH
60899: LD_INT 0
60901: ST_TO_ADDR
// sDLaser := false ;
60902: LD_ADDR_EXP 106
60906: PUSH
60907: LD_INT 0
60909: ST_TO_ADDR
// sExchange := false ;
60910: LD_ADDR_EXP 107
60914: PUSH
60915: LD_INT 0
60917: ST_TO_ADDR
// sFac := false ;
60918: LD_ADDR_EXP 108
60922: PUSH
60923: LD_INT 0
60925: ST_TO_ADDR
// sPower := false ;
60926: LD_ADDR_EXP 109
60930: PUSH
60931: LD_INT 0
60933: ST_TO_ADDR
// sRandom := false ;
60934: LD_ADDR_EXP 110
60938: PUSH
60939: LD_INT 0
60941: ST_TO_ADDR
// sShield := false ;
60942: LD_ADDR_EXP 111
60946: PUSH
60947: LD_INT 0
60949: ST_TO_ADDR
// sTime := false ;
60950: LD_ADDR_EXP 112
60954: PUSH
60955: LD_INT 0
60957: ST_TO_ADDR
// sTools := false ;
60958: LD_ADDR_EXP 113
60962: PUSH
60963: LD_INT 0
60965: ST_TO_ADDR
// sSold := false ;
60966: LD_ADDR_EXP 78
60970: PUSH
60971: LD_INT 0
60973: ST_TO_ADDR
// sDiff := false ;
60974: LD_ADDR_EXP 79
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
// sFog := false ;
60982: LD_ADDR_EXP 82
60986: PUSH
60987: LD_INT 0
60989: ST_TO_ADDR
// sReset := false ;
60990: LD_ADDR_EXP 83
60994: PUSH
60995: LD_INT 0
60997: ST_TO_ADDR
// sSun := false ;
60998: LD_ADDR_EXP 84
61002: PUSH
61003: LD_INT 0
61005: ST_TO_ADDR
// sTiger := false ;
61006: LD_ADDR_EXP 80
61010: PUSH
61011: LD_INT 0
61013: ST_TO_ADDR
// sBomb := false ;
61014: LD_ADDR_EXP 81
61018: PUSH
61019: LD_INT 0
61021: ST_TO_ADDR
// sWound := false ;
61022: LD_ADDR_EXP 89
61026: PUSH
61027: LD_INT 0
61029: ST_TO_ADDR
// sBetray := false ;
61030: LD_ADDR_EXP 93
61034: PUSH
61035: LD_INT 0
61037: ST_TO_ADDR
// sContamin := false ;
61038: LD_ADDR_EXP 94
61042: PUSH
61043: LD_INT 0
61045: ST_TO_ADDR
// sOil := false ;
61046: LD_ADDR_EXP 96
61050: PUSH
61051: LD_INT 0
61053: ST_TO_ADDR
// sStu := false ;
61054: LD_ADDR_EXP 100
61058: PUSH
61059: LD_INT 0
61061: ST_TO_ADDR
// sBazooka := false ;
61062: LD_ADDR_EXP 103
61066: PUSH
61067: LD_INT 0
61069: ST_TO_ADDR
// sMortar := false ;
61070: LD_ADDR_EXP 104
61074: PUSH
61075: LD_INT 0
61077: ST_TO_ADDR
// sRanger := false ;
61078: LD_ADDR_EXP 114
61082: PUSH
61083: LD_INT 0
61085: ST_TO_ADDR
// sComputer := false ;
61086: LD_ADDR_EXP 115
61090: PUSH
61091: LD_INT 0
61093: ST_TO_ADDR
// s30 := false ;
61094: LD_ADDR_EXP 116
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
// s60 := false ;
61102: LD_ADDR_EXP 117
61106: PUSH
61107: LD_INT 0
61109: ST_TO_ADDR
// end ;
61110: LD_VAR 0 1
61114: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61115: LD_INT 0
61117: PPUSH
61118: PPUSH
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
61123: PPUSH
// result := [ ] ;
61124: LD_ADDR_VAR 0 2
61128: PUSH
61129: EMPTY
61130: ST_TO_ADDR
// if campaign_id = 1 then
61131: LD_OWVAR 69
61135: PUSH
61136: LD_INT 1
61138: EQUAL
61139: IFFALSE 64305
// begin case mission_number of 1 :
61141: LD_OWVAR 70
61145: PUSH
61146: LD_INT 1
61148: DOUBLE
61149: EQUAL
61150: IFTRUE 61154
61152: GO 61230
61154: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61155: LD_ADDR_VAR 0 2
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: LD_INT 11
61168: PUSH
61169: LD_INT 12
61171: PUSH
61172: LD_INT 15
61174: PUSH
61175: LD_INT 16
61177: PUSH
61178: LD_INT 22
61180: PUSH
61181: LD_INT 23
61183: PUSH
61184: LD_INT 26
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 101
61200: PUSH
61201: LD_INT 102
61203: PUSH
61204: LD_INT 106
61206: PUSH
61207: LD_INT 116
61209: PUSH
61210: LD_INT 117
61212: PUSH
61213: LD_INT 118
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: ST_TO_ADDR
61228: GO 64303
61230: LD_INT 2
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61238
61236: GO 61322
61238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61239: LD_ADDR_VAR 0 2
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 4
61249: PUSH
61250: LD_INT 11
61252: PUSH
61253: LD_INT 12
61255: PUSH
61256: LD_INT 15
61258: PUSH
61259: LD_INT 16
61261: PUSH
61262: LD_INT 22
61264: PUSH
61265: LD_INT 23
61267: PUSH
61268: LD_INT 26
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 101
61284: PUSH
61285: LD_INT 102
61287: PUSH
61288: LD_INT 105
61290: PUSH
61291: LD_INT 106
61293: PUSH
61294: LD_INT 108
61296: PUSH
61297: LD_INT 116
61299: PUSH
61300: LD_INT 117
61302: PUSH
61303: LD_INT 118
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: ST_TO_ADDR
61320: GO 64303
61322: LD_INT 3
61324: DOUBLE
61325: EQUAL
61326: IFTRUE 61330
61328: GO 61418
61330: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61331: LD_ADDR_VAR 0 2
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 4
61341: PUSH
61342: LD_INT 5
61344: PUSH
61345: LD_INT 11
61347: PUSH
61348: LD_INT 12
61350: PUSH
61351: LD_INT 15
61353: PUSH
61354: LD_INT 16
61356: PUSH
61357: LD_INT 22
61359: PUSH
61360: LD_INT 26
61362: PUSH
61363: LD_INT 36
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 101
61380: PUSH
61381: LD_INT 102
61383: PUSH
61384: LD_INT 105
61386: PUSH
61387: LD_INT 106
61389: PUSH
61390: LD_INT 108
61392: PUSH
61393: LD_INT 116
61395: PUSH
61396: LD_INT 117
61398: PUSH
61399: LD_INT 118
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: ST_TO_ADDR
61416: GO 64303
61418: LD_INT 4
61420: DOUBLE
61421: EQUAL
61422: IFTRUE 61426
61424: GO 61522
61426: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61427: LD_ADDR_VAR 0 2
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: LD_INT 5
61440: PUSH
61441: LD_INT 8
61443: PUSH
61444: LD_INT 11
61446: PUSH
61447: LD_INT 12
61449: PUSH
61450: LD_INT 15
61452: PUSH
61453: LD_INT 16
61455: PUSH
61456: LD_INT 22
61458: PUSH
61459: LD_INT 23
61461: PUSH
61462: LD_INT 26
61464: PUSH
61465: LD_INT 36
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 101
61484: PUSH
61485: LD_INT 102
61487: PUSH
61488: LD_INT 105
61490: PUSH
61491: LD_INT 106
61493: PUSH
61494: LD_INT 108
61496: PUSH
61497: LD_INT 116
61499: PUSH
61500: LD_INT 117
61502: PUSH
61503: LD_INT 118
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: ST_TO_ADDR
61520: GO 64303
61522: LD_INT 5
61524: DOUBLE
61525: EQUAL
61526: IFTRUE 61530
61528: GO 61642
61530: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61531: LD_ADDR_VAR 0 2
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 4
61541: PUSH
61542: LD_INT 5
61544: PUSH
61545: LD_INT 6
61547: PUSH
61548: LD_INT 8
61550: PUSH
61551: LD_INT 11
61553: PUSH
61554: LD_INT 12
61556: PUSH
61557: LD_INT 15
61559: PUSH
61560: LD_INT 16
61562: PUSH
61563: LD_INT 22
61565: PUSH
61566: LD_INT 23
61568: PUSH
61569: LD_INT 25
61571: PUSH
61572: LD_INT 26
61574: PUSH
61575: LD_INT 36
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 101
61596: PUSH
61597: LD_INT 102
61599: PUSH
61600: LD_INT 105
61602: PUSH
61603: LD_INT 106
61605: PUSH
61606: LD_INT 108
61608: PUSH
61609: LD_INT 109
61611: PUSH
61612: LD_INT 112
61614: PUSH
61615: LD_INT 116
61617: PUSH
61618: LD_INT 117
61620: PUSH
61621: LD_INT 118
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: ST_TO_ADDR
61640: GO 64303
61642: LD_INT 6
61644: DOUBLE
61645: EQUAL
61646: IFTRUE 61650
61648: GO 61782
61650: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61651: LD_ADDR_VAR 0 2
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 4
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: LD_INT 6
61667: PUSH
61668: LD_INT 8
61670: PUSH
61671: LD_INT 11
61673: PUSH
61674: LD_INT 12
61676: PUSH
61677: LD_INT 15
61679: PUSH
61680: LD_INT 16
61682: PUSH
61683: LD_INT 20
61685: PUSH
61686: LD_INT 21
61688: PUSH
61689: LD_INT 22
61691: PUSH
61692: LD_INT 23
61694: PUSH
61695: LD_INT 25
61697: PUSH
61698: LD_INT 26
61700: PUSH
61701: LD_INT 30
61703: PUSH
61704: LD_INT 31
61706: PUSH
61707: LD_INT 32
61709: PUSH
61710: LD_INT 36
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 101
61736: PUSH
61737: LD_INT 102
61739: PUSH
61740: LD_INT 105
61742: PUSH
61743: LD_INT 106
61745: PUSH
61746: LD_INT 108
61748: PUSH
61749: LD_INT 109
61751: PUSH
61752: LD_INT 112
61754: PUSH
61755: LD_INT 116
61757: PUSH
61758: LD_INT 117
61760: PUSH
61761: LD_INT 118
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: ST_TO_ADDR
61780: GO 64303
61782: LD_INT 7
61784: DOUBLE
61785: EQUAL
61786: IFTRUE 61790
61788: GO 61902
61790: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61791: LD_ADDR_VAR 0 2
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: LD_INT 4
61801: PUSH
61802: LD_INT 5
61804: PUSH
61805: LD_INT 7
61807: PUSH
61808: LD_INT 11
61810: PUSH
61811: LD_INT 12
61813: PUSH
61814: LD_INT 15
61816: PUSH
61817: LD_INT 16
61819: PUSH
61820: LD_INT 20
61822: PUSH
61823: LD_INT 21
61825: PUSH
61826: LD_INT 22
61828: PUSH
61829: LD_INT 23
61831: PUSH
61832: LD_INT 25
61834: PUSH
61835: LD_INT 26
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 101
61856: PUSH
61857: LD_INT 102
61859: PUSH
61860: LD_INT 103
61862: PUSH
61863: LD_INT 105
61865: PUSH
61866: LD_INT 106
61868: PUSH
61869: LD_INT 108
61871: PUSH
61872: LD_INT 112
61874: PUSH
61875: LD_INT 116
61877: PUSH
61878: LD_INT 117
61880: PUSH
61881: LD_INT 118
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: ST_TO_ADDR
61900: GO 64303
61902: LD_INT 8
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61910
61908: GO 62050
61910: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61911: LD_ADDR_VAR 0 2
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 4
61921: PUSH
61922: LD_INT 5
61924: PUSH
61925: LD_INT 6
61927: PUSH
61928: LD_INT 7
61930: PUSH
61931: LD_INT 8
61933: PUSH
61934: LD_INT 11
61936: PUSH
61937: LD_INT 12
61939: PUSH
61940: LD_INT 15
61942: PUSH
61943: LD_INT 16
61945: PUSH
61946: LD_INT 20
61948: PUSH
61949: LD_INT 21
61951: PUSH
61952: LD_INT 22
61954: PUSH
61955: LD_INT 23
61957: PUSH
61958: LD_INT 25
61960: PUSH
61961: LD_INT 26
61963: PUSH
61964: LD_INT 30
61966: PUSH
61967: LD_INT 31
61969: PUSH
61970: LD_INT 32
61972: PUSH
61973: LD_INT 36
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 101
62000: PUSH
62001: LD_INT 102
62003: PUSH
62004: LD_INT 103
62006: PUSH
62007: LD_INT 105
62009: PUSH
62010: LD_INT 106
62012: PUSH
62013: LD_INT 108
62015: PUSH
62016: LD_INT 109
62018: PUSH
62019: LD_INT 112
62021: PUSH
62022: LD_INT 116
62024: PUSH
62025: LD_INT 117
62027: PUSH
62028: LD_INT 118
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: ST_TO_ADDR
62048: GO 64303
62050: LD_INT 9
62052: DOUBLE
62053: EQUAL
62054: IFTRUE 62058
62056: GO 62206
62058: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62059: LD_ADDR_VAR 0 2
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: LD_INT 5
62072: PUSH
62073: LD_INT 6
62075: PUSH
62076: LD_INT 7
62078: PUSH
62079: LD_INT 8
62081: PUSH
62082: LD_INT 11
62084: PUSH
62085: LD_INT 12
62087: PUSH
62088: LD_INT 15
62090: PUSH
62091: LD_INT 16
62093: PUSH
62094: LD_INT 20
62096: PUSH
62097: LD_INT 21
62099: PUSH
62100: LD_INT 22
62102: PUSH
62103: LD_INT 23
62105: PUSH
62106: LD_INT 25
62108: PUSH
62109: LD_INT 26
62111: PUSH
62112: LD_INT 28
62114: PUSH
62115: LD_INT 30
62117: PUSH
62118: LD_INT 31
62120: PUSH
62121: LD_INT 32
62123: PUSH
62124: LD_INT 36
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 101
62152: PUSH
62153: LD_INT 102
62155: PUSH
62156: LD_INT 103
62158: PUSH
62159: LD_INT 105
62161: PUSH
62162: LD_INT 106
62164: PUSH
62165: LD_INT 108
62167: PUSH
62168: LD_INT 109
62170: PUSH
62171: LD_INT 112
62173: PUSH
62174: LD_INT 114
62176: PUSH
62177: LD_INT 116
62179: PUSH
62180: LD_INT 117
62182: PUSH
62183: LD_INT 118
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: ST_TO_ADDR
62204: GO 64303
62206: LD_INT 10
62208: DOUBLE
62209: EQUAL
62210: IFTRUE 62214
62212: GO 62410
62214: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: LD_INT 5
62228: PUSH
62229: LD_INT 6
62231: PUSH
62232: LD_INT 7
62234: PUSH
62235: LD_INT 8
62237: PUSH
62238: LD_INT 9
62240: PUSH
62241: LD_INT 10
62243: PUSH
62244: LD_INT 11
62246: PUSH
62247: LD_INT 12
62249: PUSH
62250: LD_INT 13
62252: PUSH
62253: LD_INT 14
62255: PUSH
62256: LD_INT 15
62258: PUSH
62259: LD_INT 16
62261: PUSH
62262: LD_INT 17
62264: PUSH
62265: LD_INT 18
62267: PUSH
62268: LD_INT 19
62270: PUSH
62271: LD_INT 20
62273: PUSH
62274: LD_INT 21
62276: PUSH
62277: LD_INT 22
62279: PUSH
62280: LD_INT 23
62282: PUSH
62283: LD_INT 24
62285: PUSH
62286: LD_INT 25
62288: PUSH
62289: LD_INT 26
62291: PUSH
62292: LD_INT 28
62294: PUSH
62295: LD_INT 30
62297: PUSH
62298: LD_INT 31
62300: PUSH
62301: LD_INT 32
62303: PUSH
62304: LD_INT 36
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 101
62340: PUSH
62341: LD_INT 102
62343: PUSH
62344: LD_INT 103
62346: PUSH
62347: LD_INT 104
62349: PUSH
62350: LD_INT 105
62352: PUSH
62353: LD_INT 106
62355: PUSH
62356: LD_INT 107
62358: PUSH
62359: LD_INT 108
62361: PUSH
62362: LD_INT 109
62364: PUSH
62365: LD_INT 110
62367: PUSH
62368: LD_INT 111
62370: PUSH
62371: LD_INT 112
62373: PUSH
62374: LD_INT 114
62376: PUSH
62377: LD_INT 116
62379: PUSH
62380: LD_INT 117
62382: PUSH
62383: LD_INT 118
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: ST_TO_ADDR
62408: GO 64303
62410: LD_INT 11
62412: DOUBLE
62413: EQUAL
62414: IFTRUE 62418
62416: GO 62622
62418: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 4
62432: PUSH
62433: LD_INT 5
62435: PUSH
62436: LD_INT 6
62438: PUSH
62439: LD_INT 7
62441: PUSH
62442: LD_INT 8
62444: PUSH
62445: LD_INT 9
62447: PUSH
62448: LD_INT 10
62450: PUSH
62451: LD_INT 11
62453: PUSH
62454: LD_INT 12
62456: PUSH
62457: LD_INT 13
62459: PUSH
62460: LD_INT 14
62462: PUSH
62463: LD_INT 15
62465: PUSH
62466: LD_INT 16
62468: PUSH
62469: LD_INT 17
62471: PUSH
62472: LD_INT 18
62474: PUSH
62475: LD_INT 19
62477: PUSH
62478: LD_INT 20
62480: PUSH
62481: LD_INT 21
62483: PUSH
62484: LD_INT 22
62486: PUSH
62487: LD_INT 23
62489: PUSH
62490: LD_INT 24
62492: PUSH
62493: LD_INT 25
62495: PUSH
62496: LD_INT 26
62498: PUSH
62499: LD_INT 28
62501: PUSH
62502: LD_INT 30
62504: PUSH
62505: LD_INT 31
62507: PUSH
62508: LD_INT 32
62510: PUSH
62511: LD_INT 34
62513: PUSH
62514: LD_INT 36
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 101
62552: PUSH
62553: LD_INT 102
62555: PUSH
62556: LD_INT 103
62558: PUSH
62559: LD_INT 104
62561: PUSH
62562: LD_INT 105
62564: PUSH
62565: LD_INT 106
62567: PUSH
62568: LD_INT 107
62570: PUSH
62571: LD_INT 108
62573: PUSH
62574: LD_INT 109
62576: PUSH
62577: LD_INT 110
62579: PUSH
62580: LD_INT 111
62582: PUSH
62583: LD_INT 112
62585: PUSH
62586: LD_INT 114
62588: PUSH
62589: LD_INT 116
62591: PUSH
62592: LD_INT 117
62594: PUSH
62595: LD_INT 118
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: ST_TO_ADDR
62620: GO 64303
62622: LD_INT 12
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 62850
62630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62631: LD_ADDR_VAR 0 2
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 4
62647: PUSH
62648: LD_INT 5
62650: PUSH
62651: LD_INT 6
62653: PUSH
62654: LD_INT 7
62656: PUSH
62657: LD_INT 8
62659: PUSH
62660: LD_INT 9
62662: PUSH
62663: LD_INT 10
62665: PUSH
62666: LD_INT 11
62668: PUSH
62669: LD_INT 12
62671: PUSH
62672: LD_INT 13
62674: PUSH
62675: LD_INT 14
62677: PUSH
62678: LD_INT 15
62680: PUSH
62681: LD_INT 16
62683: PUSH
62684: LD_INT 17
62686: PUSH
62687: LD_INT 18
62689: PUSH
62690: LD_INT 19
62692: PUSH
62693: LD_INT 20
62695: PUSH
62696: LD_INT 21
62698: PUSH
62699: LD_INT 22
62701: PUSH
62702: LD_INT 23
62704: PUSH
62705: LD_INT 24
62707: PUSH
62708: LD_INT 25
62710: PUSH
62711: LD_INT 26
62713: PUSH
62714: LD_INT 27
62716: PUSH
62717: LD_INT 28
62719: PUSH
62720: LD_INT 30
62722: PUSH
62723: LD_INT 31
62725: PUSH
62726: LD_INT 32
62728: PUSH
62729: LD_INT 33
62731: PUSH
62732: LD_INT 34
62734: PUSH
62735: LD_INT 36
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 101
62776: PUSH
62777: LD_INT 102
62779: PUSH
62780: LD_INT 103
62782: PUSH
62783: LD_INT 104
62785: PUSH
62786: LD_INT 105
62788: PUSH
62789: LD_INT 106
62791: PUSH
62792: LD_INT 107
62794: PUSH
62795: LD_INT 108
62797: PUSH
62798: LD_INT 109
62800: PUSH
62801: LD_INT 110
62803: PUSH
62804: LD_INT 111
62806: PUSH
62807: LD_INT 112
62809: PUSH
62810: LD_INT 113
62812: PUSH
62813: LD_INT 114
62815: PUSH
62816: LD_INT 116
62818: PUSH
62819: LD_INT 117
62821: PUSH
62822: LD_INT 118
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: ST_TO_ADDR
62848: GO 64303
62850: LD_INT 13
62852: DOUBLE
62853: EQUAL
62854: IFTRUE 62858
62856: GO 63066
62858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62859: LD_ADDR_VAR 0 2
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: LD_INT 4
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 8
62881: PUSH
62882: LD_INT 9
62884: PUSH
62885: LD_INT 10
62887: PUSH
62888: LD_INT 11
62890: PUSH
62891: LD_INT 12
62893: PUSH
62894: LD_INT 14
62896: PUSH
62897: LD_INT 15
62899: PUSH
62900: LD_INT 16
62902: PUSH
62903: LD_INT 17
62905: PUSH
62906: LD_INT 18
62908: PUSH
62909: LD_INT 19
62911: PUSH
62912: LD_INT 20
62914: PUSH
62915: LD_INT 21
62917: PUSH
62918: LD_INT 22
62920: PUSH
62921: LD_INT 23
62923: PUSH
62924: LD_INT 24
62926: PUSH
62927: LD_INT 25
62929: PUSH
62930: LD_INT 26
62932: PUSH
62933: LD_INT 27
62935: PUSH
62936: LD_INT 28
62938: PUSH
62939: LD_INT 30
62941: PUSH
62942: LD_INT 31
62944: PUSH
62945: LD_INT 32
62947: PUSH
62948: LD_INT 33
62950: PUSH
62951: LD_INT 34
62953: PUSH
62954: LD_INT 36
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 101
62992: PUSH
62993: LD_INT 102
62995: PUSH
62996: LD_INT 103
62998: PUSH
62999: LD_INT 104
63001: PUSH
63002: LD_INT 105
63004: PUSH
63005: LD_INT 106
63007: PUSH
63008: LD_INT 107
63010: PUSH
63011: LD_INT 108
63013: PUSH
63014: LD_INT 109
63016: PUSH
63017: LD_INT 110
63019: PUSH
63020: LD_INT 111
63022: PUSH
63023: LD_INT 112
63025: PUSH
63026: LD_INT 113
63028: PUSH
63029: LD_INT 114
63031: PUSH
63032: LD_INT 116
63034: PUSH
63035: LD_INT 117
63037: PUSH
63038: LD_INT 118
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: ST_TO_ADDR
63064: GO 64303
63066: LD_INT 14
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63298
63074: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63075: LD_ADDR_VAR 0 2
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 3
63088: PUSH
63089: LD_INT 4
63091: PUSH
63092: LD_INT 5
63094: PUSH
63095: LD_INT 6
63097: PUSH
63098: LD_INT 7
63100: PUSH
63101: LD_INT 8
63103: PUSH
63104: LD_INT 9
63106: PUSH
63107: LD_INT 10
63109: PUSH
63110: LD_INT 11
63112: PUSH
63113: LD_INT 12
63115: PUSH
63116: LD_INT 13
63118: PUSH
63119: LD_INT 14
63121: PUSH
63122: LD_INT 15
63124: PUSH
63125: LD_INT 16
63127: PUSH
63128: LD_INT 17
63130: PUSH
63131: LD_INT 18
63133: PUSH
63134: LD_INT 19
63136: PUSH
63137: LD_INT 20
63139: PUSH
63140: LD_INT 21
63142: PUSH
63143: LD_INT 22
63145: PUSH
63146: LD_INT 23
63148: PUSH
63149: LD_INT 24
63151: PUSH
63152: LD_INT 25
63154: PUSH
63155: LD_INT 26
63157: PUSH
63158: LD_INT 27
63160: PUSH
63161: LD_INT 28
63163: PUSH
63164: LD_INT 29
63166: PUSH
63167: LD_INT 30
63169: PUSH
63170: LD_INT 31
63172: PUSH
63173: LD_INT 32
63175: PUSH
63176: LD_INT 33
63178: PUSH
63179: LD_INT 34
63181: PUSH
63182: LD_INT 36
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 101
63224: PUSH
63225: LD_INT 102
63227: PUSH
63228: LD_INT 103
63230: PUSH
63231: LD_INT 104
63233: PUSH
63234: LD_INT 105
63236: PUSH
63237: LD_INT 106
63239: PUSH
63240: LD_INT 107
63242: PUSH
63243: LD_INT 108
63245: PUSH
63246: LD_INT 109
63248: PUSH
63249: LD_INT 110
63251: PUSH
63252: LD_INT 111
63254: PUSH
63255: LD_INT 112
63257: PUSH
63258: LD_INT 113
63260: PUSH
63261: LD_INT 114
63263: PUSH
63264: LD_INT 116
63266: PUSH
63267: LD_INT 117
63269: PUSH
63270: LD_INT 118
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: ST_TO_ADDR
63296: GO 64303
63298: LD_INT 15
63300: DOUBLE
63301: EQUAL
63302: IFTRUE 63306
63304: GO 63530
63306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63307: LD_ADDR_VAR 0 2
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: LD_INT 5
63326: PUSH
63327: LD_INT 6
63329: PUSH
63330: LD_INT 7
63332: PUSH
63333: LD_INT 8
63335: PUSH
63336: LD_INT 9
63338: PUSH
63339: LD_INT 10
63341: PUSH
63342: LD_INT 11
63344: PUSH
63345: LD_INT 12
63347: PUSH
63348: LD_INT 13
63350: PUSH
63351: LD_INT 14
63353: PUSH
63354: LD_INT 15
63356: PUSH
63357: LD_INT 16
63359: PUSH
63360: LD_INT 17
63362: PUSH
63363: LD_INT 18
63365: PUSH
63366: LD_INT 19
63368: PUSH
63369: LD_INT 20
63371: PUSH
63372: LD_INT 21
63374: PUSH
63375: LD_INT 22
63377: PUSH
63378: LD_INT 23
63380: PUSH
63381: LD_INT 24
63383: PUSH
63384: LD_INT 25
63386: PUSH
63387: LD_INT 26
63389: PUSH
63390: LD_INT 27
63392: PUSH
63393: LD_INT 28
63395: PUSH
63396: LD_INT 29
63398: PUSH
63399: LD_INT 30
63401: PUSH
63402: LD_INT 31
63404: PUSH
63405: LD_INT 32
63407: PUSH
63408: LD_INT 33
63410: PUSH
63411: LD_INT 34
63413: PUSH
63414: LD_INT 36
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 101
63456: PUSH
63457: LD_INT 102
63459: PUSH
63460: LD_INT 103
63462: PUSH
63463: LD_INT 104
63465: PUSH
63466: LD_INT 105
63468: PUSH
63469: LD_INT 106
63471: PUSH
63472: LD_INT 107
63474: PUSH
63475: LD_INT 108
63477: PUSH
63478: LD_INT 109
63480: PUSH
63481: LD_INT 110
63483: PUSH
63484: LD_INT 111
63486: PUSH
63487: LD_INT 112
63489: PUSH
63490: LD_INT 113
63492: PUSH
63493: LD_INT 114
63495: PUSH
63496: LD_INT 116
63498: PUSH
63499: LD_INT 117
63501: PUSH
63502: LD_INT 118
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: ST_TO_ADDR
63528: GO 64303
63530: LD_INT 16
63532: DOUBLE
63533: EQUAL
63534: IFTRUE 63538
63536: GO 63674
63538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: LD_INT 4
63549: PUSH
63550: LD_INT 5
63552: PUSH
63553: LD_INT 7
63555: PUSH
63556: LD_INT 11
63558: PUSH
63559: LD_INT 12
63561: PUSH
63562: LD_INT 15
63564: PUSH
63565: LD_INT 16
63567: PUSH
63568: LD_INT 20
63570: PUSH
63571: LD_INT 21
63573: PUSH
63574: LD_INT 22
63576: PUSH
63577: LD_INT 23
63579: PUSH
63580: LD_INT 25
63582: PUSH
63583: LD_INT 26
63585: PUSH
63586: LD_INT 30
63588: PUSH
63589: LD_INT 31
63591: PUSH
63592: LD_INT 32
63594: PUSH
63595: LD_INT 33
63597: PUSH
63598: LD_INT 34
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 101
63624: PUSH
63625: LD_INT 102
63627: PUSH
63628: LD_INT 103
63630: PUSH
63631: LD_INT 106
63633: PUSH
63634: LD_INT 108
63636: PUSH
63637: LD_INT 112
63639: PUSH
63640: LD_INT 113
63642: PUSH
63643: LD_INT 114
63645: PUSH
63646: LD_INT 116
63648: PUSH
63649: LD_INT 117
63651: PUSH
63652: LD_INT 118
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: ST_TO_ADDR
63672: GO 64303
63674: LD_INT 17
63676: DOUBLE
63677: EQUAL
63678: IFTRUE 63682
63680: GO 63906
63682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63683: LD_ADDR_VAR 0 2
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: LD_INT 4
63699: PUSH
63700: LD_INT 5
63702: PUSH
63703: LD_INT 6
63705: PUSH
63706: LD_INT 7
63708: PUSH
63709: LD_INT 8
63711: PUSH
63712: LD_INT 9
63714: PUSH
63715: LD_INT 10
63717: PUSH
63718: LD_INT 11
63720: PUSH
63721: LD_INT 12
63723: PUSH
63724: LD_INT 13
63726: PUSH
63727: LD_INT 14
63729: PUSH
63730: LD_INT 15
63732: PUSH
63733: LD_INT 16
63735: PUSH
63736: LD_INT 17
63738: PUSH
63739: LD_INT 18
63741: PUSH
63742: LD_INT 19
63744: PUSH
63745: LD_INT 20
63747: PUSH
63748: LD_INT 21
63750: PUSH
63751: LD_INT 22
63753: PUSH
63754: LD_INT 23
63756: PUSH
63757: LD_INT 24
63759: PUSH
63760: LD_INT 25
63762: PUSH
63763: LD_INT 26
63765: PUSH
63766: LD_INT 27
63768: PUSH
63769: LD_INT 28
63771: PUSH
63772: LD_INT 29
63774: PUSH
63775: LD_INT 30
63777: PUSH
63778: LD_INT 31
63780: PUSH
63781: LD_INT 32
63783: PUSH
63784: LD_INT 33
63786: PUSH
63787: LD_INT 34
63789: PUSH
63790: LD_INT 36
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 101
63832: PUSH
63833: LD_INT 102
63835: PUSH
63836: LD_INT 103
63838: PUSH
63839: LD_INT 104
63841: PUSH
63842: LD_INT 105
63844: PUSH
63845: LD_INT 106
63847: PUSH
63848: LD_INT 107
63850: PUSH
63851: LD_INT 108
63853: PUSH
63854: LD_INT 109
63856: PUSH
63857: LD_INT 110
63859: PUSH
63860: LD_INT 111
63862: PUSH
63863: LD_INT 112
63865: PUSH
63866: LD_INT 113
63868: PUSH
63869: LD_INT 114
63871: PUSH
63872: LD_INT 116
63874: PUSH
63875: LD_INT 117
63877: PUSH
63878: LD_INT 118
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: ST_TO_ADDR
63904: GO 64303
63906: LD_INT 18
63908: DOUBLE
63909: EQUAL
63910: IFTRUE 63914
63912: GO 64062
63914: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63915: LD_ADDR_VAR 0 2
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: LD_INT 5
63928: PUSH
63929: LD_INT 7
63931: PUSH
63932: LD_INT 11
63934: PUSH
63935: LD_INT 12
63937: PUSH
63938: LD_INT 15
63940: PUSH
63941: LD_INT 16
63943: PUSH
63944: LD_INT 20
63946: PUSH
63947: LD_INT 21
63949: PUSH
63950: LD_INT 22
63952: PUSH
63953: LD_INT 23
63955: PUSH
63956: LD_INT 25
63958: PUSH
63959: LD_INT 26
63961: PUSH
63962: LD_INT 30
63964: PUSH
63965: LD_INT 31
63967: PUSH
63968: LD_INT 32
63970: PUSH
63971: LD_INT 33
63973: PUSH
63974: LD_INT 34
63976: PUSH
63977: LD_INT 35
63979: PUSH
63980: LD_INT 36
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 101
64008: PUSH
64009: LD_INT 102
64011: PUSH
64012: LD_INT 103
64014: PUSH
64015: LD_INT 106
64017: PUSH
64018: LD_INT 108
64020: PUSH
64021: LD_INT 112
64023: PUSH
64024: LD_INT 113
64026: PUSH
64027: LD_INT 114
64029: PUSH
64030: LD_INT 115
64032: PUSH
64033: LD_INT 116
64035: PUSH
64036: LD_INT 117
64038: PUSH
64039: LD_INT 118
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: ST_TO_ADDR
64060: GO 64303
64062: LD_INT 19
64064: DOUBLE
64065: EQUAL
64066: IFTRUE 64070
64068: GO 64302
64070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64071: LD_ADDR_VAR 0 2
64075: PUSH
64076: LD_INT 1
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 4
64087: PUSH
64088: LD_INT 5
64090: PUSH
64091: LD_INT 6
64093: PUSH
64094: LD_INT 7
64096: PUSH
64097: LD_INT 8
64099: PUSH
64100: LD_INT 9
64102: PUSH
64103: LD_INT 10
64105: PUSH
64106: LD_INT 11
64108: PUSH
64109: LD_INT 12
64111: PUSH
64112: LD_INT 13
64114: PUSH
64115: LD_INT 14
64117: PUSH
64118: LD_INT 15
64120: PUSH
64121: LD_INT 16
64123: PUSH
64124: LD_INT 17
64126: PUSH
64127: LD_INT 18
64129: PUSH
64130: LD_INT 19
64132: PUSH
64133: LD_INT 20
64135: PUSH
64136: LD_INT 21
64138: PUSH
64139: LD_INT 22
64141: PUSH
64142: LD_INT 23
64144: PUSH
64145: LD_INT 24
64147: PUSH
64148: LD_INT 25
64150: PUSH
64151: LD_INT 26
64153: PUSH
64154: LD_INT 27
64156: PUSH
64157: LD_INT 28
64159: PUSH
64160: LD_INT 29
64162: PUSH
64163: LD_INT 30
64165: PUSH
64166: LD_INT 31
64168: PUSH
64169: LD_INT 32
64171: PUSH
64172: LD_INT 33
64174: PUSH
64175: LD_INT 34
64177: PUSH
64178: LD_INT 35
64180: PUSH
64181: LD_INT 36
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 101
64224: PUSH
64225: LD_INT 102
64227: PUSH
64228: LD_INT 103
64230: PUSH
64231: LD_INT 104
64233: PUSH
64234: LD_INT 105
64236: PUSH
64237: LD_INT 106
64239: PUSH
64240: LD_INT 107
64242: PUSH
64243: LD_INT 108
64245: PUSH
64246: LD_INT 109
64248: PUSH
64249: LD_INT 110
64251: PUSH
64252: LD_INT 111
64254: PUSH
64255: LD_INT 112
64257: PUSH
64258: LD_INT 113
64260: PUSH
64261: LD_INT 114
64263: PUSH
64264: LD_INT 115
64266: PUSH
64267: LD_INT 116
64269: PUSH
64270: LD_INT 117
64272: PUSH
64273: LD_INT 118
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: ST_TO_ADDR
64300: GO 64303
64302: POP
// end else
64303: GO 64534
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64305: LD_ADDR_VAR 0 2
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: LD_INT 4
64321: PUSH
64322: LD_INT 5
64324: PUSH
64325: LD_INT 6
64327: PUSH
64328: LD_INT 7
64330: PUSH
64331: LD_INT 8
64333: PUSH
64334: LD_INT 9
64336: PUSH
64337: LD_INT 10
64339: PUSH
64340: LD_INT 11
64342: PUSH
64343: LD_INT 12
64345: PUSH
64346: LD_INT 13
64348: PUSH
64349: LD_INT 14
64351: PUSH
64352: LD_INT 15
64354: PUSH
64355: LD_INT 16
64357: PUSH
64358: LD_INT 17
64360: PUSH
64361: LD_INT 18
64363: PUSH
64364: LD_INT 19
64366: PUSH
64367: LD_INT 20
64369: PUSH
64370: LD_INT 21
64372: PUSH
64373: LD_INT 22
64375: PUSH
64376: LD_INT 23
64378: PUSH
64379: LD_INT 24
64381: PUSH
64382: LD_INT 25
64384: PUSH
64385: LD_INT 26
64387: PUSH
64388: LD_INT 27
64390: PUSH
64391: LD_INT 28
64393: PUSH
64394: LD_INT 29
64396: PUSH
64397: LD_INT 30
64399: PUSH
64400: LD_INT 31
64402: PUSH
64403: LD_INT 32
64405: PUSH
64406: LD_INT 33
64408: PUSH
64409: LD_INT 34
64411: PUSH
64412: LD_INT 35
64414: PUSH
64415: LD_INT 36
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 101
64458: PUSH
64459: LD_INT 102
64461: PUSH
64462: LD_INT 103
64464: PUSH
64465: LD_INT 104
64467: PUSH
64468: LD_INT 105
64470: PUSH
64471: LD_INT 106
64473: PUSH
64474: LD_INT 107
64476: PUSH
64477: LD_INT 108
64479: PUSH
64480: LD_INT 109
64482: PUSH
64483: LD_INT 110
64485: PUSH
64486: LD_INT 111
64488: PUSH
64489: LD_INT 112
64491: PUSH
64492: LD_INT 113
64494: PUSH
64495: LD_INT 114
64497: PUSH
64498: LD_INT 115
64500: PUSH
64501: LD_INT 116
64503: PUSH
64504: LD_INT 117
64506: PUSH
64507: LD_INT 118
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// if result then
64534: LD_VAR 0 2
64538: IFFALSE 65324
// begin normal :=  ;
64540: LD_ADDR_VAR 0 5
64544: PUSH
64545: LD_STRING 
64547: ST_TO_ADDR
// hardcore :=  ;
64548: LD_ADDR_VAR 0 6
64552: PUSH
64553: LD_STRING 
64555: ST_TO_ADDR
// active :=  ;
64556: LD_ADDR_VAR 0 7
64560: PUSH
64561: LD_STRING 
64563: ST_TO_ADDR
// for i = 1 to normalCounter do
64564: LD_ADDR_VAR 0 8
64568: PUSH
64569: DOUBLE
64570: LD_INT 1
64572: DEC
64573: ST_TO_ADDR
64574: LD_EXP 62
64578: PUSH
64579: FOR_TO
64580: IFFALSE 64681
// begin tmp := 0 ;
64582: LD_ADDR_VAR 0 3
64586: PUSH
64587: LD_STRING 0
64589: ST_TO_ADDR
// if result [ 1 ] then
64590: LD_VAR 0 2
64594: PUSH
64595: LD_INT 1
64597: ARRAY
64598: IFFALSE 64663
// if result [ 1 ] [ 1 ] = i then
64600: LD_VAR 0 2
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: PUSH
64613: LD_VAR 0 8
64617: EQUAL
64618: IFFALSE 64663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64620: LD_ADDR_VAR 0 2
64624: PUSH
64625: LD_VAR 0 2
64629: PPUSH
64630: LD_INT 1
64632: PPUSH
64633: LD_VAR 0 2
64637: PUSH
64638: LD_INT 1
64640: ARRAY
64641: PPUSH
64642: LD_INT 1
64644: PPUSH
64645: CALL_OW 3
64649: PPUSH
64650: CALL_OW 1
64654: ST_TO_ADDR
// tmp := 1 ;
64655: LD_ADDR_VAR 0 3
64659: PUSH
64660: LD_STRING 1
64662: ST_TO_ADDR
// end ; normal := normal & tmp ;
64663: LD_ADDR_VAR 0 5
64667: PUSH
64668: LD_VAR 0 5
64672: PUSH
64673: LD_VAR 0 3
64677: STR
64678: ST_TO_ADDR
// end ;
64679: GO 64579
64681: POP
64682: POP
// for i = 1 to hardcoreCounter do
64683: LD_ADDR_VAR 0 8
64687: PUSH
64688: DOUBLE
64689: LD_INT 1
64691: DEC
64692: ST_TO_ADDR
64693: LD_EXP 63
64697: PUSH
64698: FOR_TO
64699: IFFALSE 64804
// begin tmp := 0 ;
64701: LD_ADDR_VAR 0 3
64705: PUSH
64706: LD_STRING 0
64708: ST_TO_ADDR
// if result [ 2 ] then
64709: LD_VAR 0 2
64713: PUSH
64714: LD_INT 2
64716: ARRAY
64717: IFFALSE 64786
// if result [ 2 ] [ 1 ] = 100 + i then
64719: LD_VAR 0 2
64723: PUSH
64724: LD_INT 2
64726: ARRAY
64727: PUSH
64728: LD_INT 1
64730: ARRAY
64731: PUSH
64732: LD_INT 100
64734: PUSH
64735: LD_VAR 0 8
64739: PLUS
64740: EQUAL
64741: IFFALSE 64786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64743: LD_ADDR_VAR 0 2
64747: PUSH
64748: LD_VAR 0 2
64752: PPUSH
64753: LD_INT 2
64755: PPUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_INT 2
64763: ARRAY
64764: PPUSH
64765: LD_INT 1
64767: PPUSH
64768: CALL_OW 3
64772: PPUSH
64773: CALL_OW 1
64777: ST_TO_ADDR
// tmp := 1 ;
64778: LD_ADDR_VAR 0 3
64782: PUSH
64783: LD_STRING 1
64785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64786: LD_ADDR_VAR 0 6
64790: PUSH
64791: LD_VAR 0 6
64795: PUSH
64796: LD_VAR 0 3
64800: STR
64801: ST_TO_ADDR
// end ;
64802: GO 64698
64804: POP
64805: POP
// if isGameLoad then
64806: LD_VAR 0 1
64810: IFFALSE 65285
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64812: LD_ADDR_VAR 0 4
64816: PUSH
64817: LD_EXP 66
64821: PUSH
64822: LD_EXP 65
64826: PUSH
64827: LD_EXP 67
64831: PUSH
64832: LD_EXP 64
64836: PUSH
64837: LD_EXP 68
64841: PUSH
64842: LD_EXP 69
64846: PUSH
64847: LD_EXP 70
64851: PUSH
64852: LD_EXP 71
64856: PUSH
64857: LD_EXP 72
64861: PUSH
64862: LD_EXP 73
64866: PUSH
64867: LD_EXP 74
64871: PUSH
64872: LD_EXP 75
64876: PUSH
64877: LD_EXP 76
64881: PUSH
64882: LD_EXP 77
64886: PUSH
64887: LD_EXP 85
64891: PUSH
64892: LD_EXP 86
64896: PUSH
64897: LD_EXP 87
64901: PUSH
64902: LD_EXP 88
64906: PUSH
64907: LD_EXP 90
64911: PUSH
64912: LD_EXP 91
64916: PUSH
64917: LD_EXP 92
64921: PUSH
64922: LD_EXP 95
64926: PUSH
64927: LD_EXP 97
64931: PUSH
64932: LD_EXP 98
64936: PUSH
64937: LD_EXP 99
64941: PUSH
64942: LD_EXP 101
64946: PUSH
64947: LD_EXP 102
64951: PUSH
64952: LD_EXP 105
64956: PUSH
64957: LD_EXP 106
64961: PUSH
64962: LD_EXP 107
64966: PUSH
64967: LD_EXP 108
64971: PUSH
64972: LD_EXP 109
64976: PUSH
64977: LD_EXP 110
64981: PUSH
64982: LD_EXP 111
64986: PUSH
64987: LD_EXP 112
64991: PUSH
64992: LD_EXP 113
64996: PUSH
64997: LD_EXP 78
65001: PUSH
65002: LD_EXP 79
65006: PUSH
65007: LD_EXP 82
65011: PUSH
65012: LD_EXP 83
65016: PUSH
65017: LD_EXP 84
65021: PUSH
65022: LD_EXP 80
65026: PUSH
65027: LD_EXP 81
65031: PUSH
65032: LD_EXP 89
65036: PUSH
65037: LD_EXP 93
65041: PUSH
65042: LD_EXP 94
65046: PUSH
65047: LD_EXP 96
65051: PUSH
65052: LD_EXP 100
65056: PUSH
65057: LD_EXP 103
65061: PUSH
65062: LD_EXP 104
65066: PUSH
65067: LD_EXP 114
65071: PUSH
65072: LD_EXP 115
65076: PUSH
65077: LD_EXP 116
65081: PUSH
65082: LD_EXP 117
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: ST_TO_ADDR
// tmp :=  ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_STRING 
65150: ST_TO_ADDR
// for i = 1 to normalCounter do
65151: LD_ADDR_VAR 0 8
65155: PUSH
65156: DOUBLE
65157: LD_INT 1
65159: DEC
65160: ST_TO_ADDR
65161: LD_EXP 62
65165: PUSH
65166: FOR_TO
65167: IFFALSE 65203
// begin if flags [ i ] then
65169: LD_VAR 0 4
65173: PUSH
65174: LD_VAR 0 8
65178: ARRAY
65179: IFFALSE 65201
// tmp := tmp & i & ; ;
65181: LD_ADDR_VAR 0 3
65185: PUSH
65186: LD_VAR 0 3
65190: PUSH
65191: LD_VAR 0 8
65195: STR
65196: PUSH
65197: LD_STRING ;
65199: STR
65200: ST_TO_ADDR
// end ;
65201: GO 65166
65203: POP
65204: POP
// for i = 1 to hardcoreCounter do
65205: LD_ADDR_VAR 0 8
65209: PUSH
65210: DOUBLE
65211: LD_INT 1
65213: DEC
65214: ST_TO_ADDR
65215: LD_EXP 63
65219: PUSH
65220: FOR_TO
65221: IFFALSE 65267
// begin if flags [ normalCounter + i ] then
65223: LD_VAR 0 4
65227: PUSH
65228: LD_EXP 62
65232: PUSH
65233: LD_VAR 0 8
65237: PLUS
65238: ARRAY
65239: IFFALSE 65265
// tmp := tmp & ( 100 + i ) & ; ;
65241: LD_ADDR_VAR 0 3
65245: PUSH
65246: LD_VAR 0 3
65250: PUSH
65251: LD_INT 100
65253: PUSH
65254: LD_VAR 0 8
65258: PLUS
65259: STR
65260: PUSH
65261: LD_STRING ;
65263: STR
65264: ST_TO_ADDR
// end ;
65265: GO 65220
65267: POP
65268: POP
// if tmp then
65269: LD_VAR 0 3
65273: IFFALSE 65285
// active := tmp ;
65275: LD_ADDR_VAR 0 7
65279: PUSH
65280: LD_VAR 0 3
65284: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65285: LD_STRING getStreamItemsFromMission("
65287: PUSH
65288: LD_VAR 0 5
65292: STR
65293: PUSH
65294: LD_STRING ","
65296: STR
65297: PUSH
65298: LD_VAR 0 6
65302: STR
65303: PUSH
65304: LD_STRING ","
65306: STR
65307: PUSH
65308: LD_VAR 0 7
65312: STR
65313: PUSH
65314: LD_STRING ")
65316: STR
65317: PPUSH
65318: CALL_OW 559
// end else
65322: GO 65331
// ToLua ( getStreamItemsFromMission("","","") ) ;
65324: LD_STRING getStreamItemsFromMission("","","")
65326: PPUSH
65327: CALL_OW 559
// end ;
65331: LD_VAR 0 2
65335: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65336: LD_EXP 61
65340: IFFALSE 65348
65342: PUSH
65343: LD_EXP 66
65347: AND
65348: IFFALSE 65472
65350: GO 65352
65352: DISABLE
65353: LD_INT 0
65355: PPUSH
65356: PPUSH
// begin enable ;
65357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65358: LD_ADDR_VAR 0 2
65362: PUSH
65363: LD_INT 22
65365: PUSH
65366: LD_OWVAR 2
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: LD_INT 34
65380: PUSH
65381: LD_INT 7
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 34
65390: PUSH
65391: LD_INT 45
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 34
65400: PUSH
65401: LD_INT 28
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 34
65410: PUSH
65411: LD_INT 47
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PPUSH
65429: CALL_OW 69
65433: ST_TO_ADDR
// if not tmp then
65434: LD_VAR 0 2
65438: NOT
65439: IFFALSE 65443
// exit ;
65441: GO 65472
// for i in tmp do
65443: LD_ADDR_VAR 0 1
65447: PUSH
65448: LD_VAR 0 2
65452: PUSH
65453: FOR_IN
65454: IFFALSE 65470
// begin SetLives ( i , 0 ) ;
65456: LD_VAR 0 1
65460: PPUSH
65461: LD_INT 0
65463: PPUSH
65464: CALL_OW 234
// end ;
65468: GO 65453
65470: POP
65471: POP
// end ;
65472: PPOPN 2
65474: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65475: LD_EXP 61
65479: IFFALSE 65487
65481: PUSH
65482: LD_EXP 67
65486: AND
65487: IFFALSE 65571
65489: GO 65491
65491: DISABLE
65492: LD_INT 0
65494: PPUSH
65495: PPUSH
// begin enable ;
65496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65497: LD_ADDR_VAR 0 2
65501: PUSH
65502: LD_INT 22
65504: PUSH
65505: LD_OWVAR 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 32
65516: PUSH
65517: LD_INT 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PPUSH
65528: CALL_OW 69
65532: ST_TO_ADDR
// if not tmp then
65533: LD_VAR 0 2
65537: NOT
65538: IFFALSE 65542
// exit ;
65540: GO 65571
// for i in tmp do
65542: LD_ADDR_VAR 0 1
65546: PUSH
65547: LD_VAR 0 2
65551: PUSH
65552: FOR_IN
65553: IFFALSE 65569
// begin SetLives ( i , 0 ) ;
65555: LD_VAR 0 1
65559: PPUSH
65560: LD_INT 0
65562: PPUSH
65563: CALL_OW 234
// end ;
65567: GO 65552
65569: POP
65570: POP
// end ;
65571: PPOPN 2
65573: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65574: LD_EXP 61
65578: IFFALSE 65586
65580: PUSH
65581: LD_EXP 64
65585: AND
65586: IFFALSE 65679
65588: GO 65590
65590: DISABLE
65591: LD_INT 0
65593: PPUSH
// begin enable ;
65594: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65595: LD_ADDR_VAR 0 1
65599: PUSH
65600: LD_INT 22
65602: PUSH
65603: LD_OWVAR 2
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 2
65614: PUSH
65615: LD_INT 25
65617: PUSH
65618: LD_INT 5
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 25
65627: PUSH
65628: LD_INT 9
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 25
65637: PUSH
65638: LD_INT 8
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PPUSH
65655: CALL_OW 69
65659: PUSH
65660: FOR_IN
65661: IFFALSE 65677
// begin SetClass ( i , 1 ) ;
65663: LD_VAR 0 1
65667: PPUSH
65668: LD_INT 1
65670: PPUSH
65671: CALL_OW 336
// end ;
65675: GO 65660
65677: POP
65678: POP
// end ;
65679: PPOPN 1
65681: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65682: LD_EXP 61
65686: IFFALSE 65694
65688: PUSH
65689: LD_EXP 65
65693: AND
65694: IFFALSE 65706
65696: PUSH
65697: LD_OWVAR 65
65701: PUSH
65702: LD_INT 7
65704: LESS
65705: AND
65706: IFFALSE 65720
65708: GO 65710
65710: DISABLE
// begin enable ;
65711: ENABLE
// game_speed := 7 ;
65712: LD_ADDR_OWVAR 65
65716: PUSH
65717: LD_INT 7
65719: ST_TO_ADDR
// end ;
65720: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65721: LD_EXP 61
65725: IFFALSE 65733
65727: PUSH
65728: LD_EXP 68
65732: AND
65733: IFFALSE 65935
65735: GO 65737
65737: DISABLE
65738: LD_INT 0
65740: PPUSH
65741: PPUSH
65742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65743: LD_ADDR_VAR 0 3
65747: PUSH
65748: LD_INT 81
65750: PUSH
65751: LD_OWVAR 2
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 21
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PPUSH
65774: CALL_OW 69
65778: ST_TO_ADDR
// if not tmp then
65779: LD_VAR 0 3
65783: NOT
65784: IFFALSE 65788
// exit ;
65786: GO 65935
// if tmp > 5 then
65788: LD_VAR 0 3
65792: PUSH
65793: LD_INT 5
65795: GREATER
65796: IFFALSE 65808
// k := 5 else
65798: LD_ADDR_VAR 0 2
65802: PUSH
65803: LD_INT 5
65805: ST_TO_ADDR
65806: GO 65818
// k := tmp ;
65808: LD_ADDR_VAR 0 2
65812: PUSH
65813: LD_VAR 0 3
65817: ST_TO_ADDR
// for i := 1 to k do
65818: LD_ADDR_VAR 0 1
65822: PUSH
65823: DOUBLE
65824: LD_INT 1
65826: DEC
65827: ST_TO_ADDR
65828: LD_VAR 0 2
65832: PUSH
65833: FOR_TO
65834: IFFALSE 65933
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65836: LD_VAR 0 3
65840: PUSH
65841: LD_VAR 0 1
65845: ARRAY
65846: PPUSH
65847: LD_VAR 0 1
65851: PUSH
65852: LD_INT 4
65854: MOD
65855: PUSH
65856: LD_INT 1
65858: PLUS
65859: PPUSH
65860: CALL_OW 259
65864: PUSH
65865: LD_INT 10
65867: LESS
65868: IFFALSE 65931
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65870: LD_VAR 0 3
65874: PUSH
65875: LD_VAR 0 1
65879: ARRAY
65880: PPUSH
65881: LD_VAR 0 1
65885: PUSH
65886: LD_INT 4
65888: MOD
65889: PUSH
65890: LD_INT 1
65892: PLUS
65893: PPUSH
65894: LD_VAR 0 3
65898: PUSH
65899: LD_VAR 0 1
65903: ARRAY
65904: PPUSH
65905: LD_VAR 0 1
65909: PUSH
65910: LD_INT 4
65912: MOD
65913: PUSH
65914: LD_INT 1
65916: PLUS
65917: PPUSH
65918: CALL_OW 259
65922: PUSH
65923: LD_INT 1
65925: PLUS
65926: PPUSH
65927: CALL_OW 237
65931: GO 65833
65933: POP
65934: POP
// end ;
65935: PPOPN 3
65937: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65938: LD_EXP 61
65942: IFFALSE 65950
65944: PUSH
65945: LD_EXP 69
65949: AND
65950: IFFALSE 65970
65952: GO 65954
65954: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65955: LD_INT 4
65957: PPUSH
65958: LD_OWVAR 2
65962: PPUSH
65963: LD_INT 0
65965: PPUSH
65966: CALL_OW 324
65970: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65971: LD_EXP 61
65975: IFFALSE 65983
65977: PUSH
65978: LD_EXP 98
65982: AND
65983: IFFALSE 66003
65985: GO 65987
65987: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65988: LD_INT 19
65990: PPUSH
65991: LD_OWVAR 2
65995: PPUSH
65996: LD_INT 0
65998: PPUSH
65999: CALL_OW 324
66003: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66004: LD_EXP 61
66008: IFFALSE 66016
66010: PUSH
66011: LD_EXP 70
66015: AND
66016: IFFALSE 66118
66018: GO 66020
66020: DISABLE
66021: LD_INT 0
66023: PPUSH
66024: PPUSH
// begin enable ;
66025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66026: LD_ADDR_VAR 0 2
66030: PUSH
66031: LD_INT 22
66033: PUSH
66034: LD_OWVAR 2
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: LD_INT 34
66048: PUSH
66049: LD_INT 11
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 34
66058: PUSH
66059: LD_INT 30
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PPUSH
66075: CALL_OW 69
66079: ST_TO_ADDR
// if not tmp then
66080: LD_VAR 0 2
66084: NOT
66085: IFFALSE 66089
// exit ;
66087: GO 66118
// for i in tmp do
66089: LD_ADDR_VAR 0 1
66093: PUSH
66094: LD_VAR 0 2
66098: PUSH
66099: FOR_IN
66100: IFFALSE 66116
// begin SetLives ( i , 0 ) ;
66102: LD_VAR 0 1
66106: PPUSH
66107: LD_INT 0
66109: PPUSH
66110: CALL_OW 234
// end ;
66114: GO 66099
66116: POP
66117: POP
// end ;
66118: PPOPN 2
66120: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66121: LD_EXP 61
66125: IFFALSE 66133
66127: PUSH
66128: LD_EXP 71
66132: AND
66133: IFFALSE 66153
66135: GO 66137
66137: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66138: LD_INT 32
66140: PPUSH
66141: LD_OWVAR 2
66145: PPUSH
66146: LD_INT 0
66148: PPUSH
66149: CALL_OW 324
66153: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66154: LD_EXP 61
66158: IFFALSE 66166
66160: PUSH
66161: LD_EXP 72
66165: AND
66166: IFFALSE 66349
66168: GO 66170
66170: DISABLE
66171: LD_INT 0
66173: PPUSH
66174: PPUSH
66175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66176: LD_ADDR_VAR 0 2
66180: PUSH
66181: LD_INT 22
66183: PUSH
66184: LD_OWVAR 2
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 33
66195: PUSH
66196: LD_INT 3
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PPUSH
66207: CALL_OW 69
66211: ST_TO_ADDR
// if not tmp then
66212: LD_VAR 0 2
66216: NOT
66217: IFFALSE 66221
// exit ;
66219: GO 66349
// side := 0 ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_INT 0
66228: ST_TO_ADDR
// for i := 1 to 8 do
66229: LD_ADDR_VAR 0 1
66233: PUSH
66234: DOUBLE
66235: LD_INT 1
66237: DEC
66238: ST_TO_ADDR
66239: LD_INT 8
66241: PUSH
66242: FOR_TO
66243: IFFALSE 66293
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66245: LD_OWVAR 2
66249: PUSH
66250: LD_VAR 0 1
66254: NONEQUAL
66255: IFFALSE 66277
66257: PUSH
66258: LD_OWVAR 2
66262: PPUSH
66263: LD_VAR 0 1
66267: PPUSH
66268: CALL_OW 81
66272: PUSH
66273: LD_INT 2
66275: EQUAL
66276: AND
66277: IFFALSE 66291
// begin side := i ;
66279: LD_ADDR_VAR 0 3
66283: PUSH
66284: LD_VAR 0 1
66288: ST_TO_ADDR
// break ;
66289: GO 66293
// end ;
66291: GO 66242
66293: POP
66294: POP
// if not side then
66295: LD_VAR 0 3
66299: NOT
66300: IFFALSE 66304
// exit ;
66302: GO 66349
// for i := 1 to tmp do
66304: LD_ADDR_VAR 0 1
66308: PUSH
66309: DOUBLE
66310: LD_INT 1
66312: DEC
66313: ST_TO_ADDR
66314: LD_VAR 0 2
66318: PUSH
66319: FOR_TO
66320: IFFALSE 66347
// if Prob ( 60 ) then
66322: LD_INT 60
66324: PPUSH
66325: CALL_OW 13
66329: IFFALSE 66345
// SetSide ( i , side ) ;
66331: LD_VAR 0 1
66335: PPUSH
66336: LD_VAR 0 3
66340: PPUSH
66341: CALL_OW 235
66345: GO 66319
66347: POP
66348: POP
// end ;
66349: PPOPN 3
66351: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66352: LD_EXP 61
66356: IFFALSE 66364
66358: PUSH
66359: LD_EXP 74
66363: AND
66364: IFFALSE 66483
66366: GO 66368
66368: DISABLE
66369: LD_INT 0
66371: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66372: LD_ADDR_VAR 0 1
66376: PUSH
66377: LD_INT 22
66379: PUSH
66380: LD_OWVAR 2
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 21
66391: PUSH
66392: LD_INT 1
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 23
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: PPUSH
66421: CALL_OW 69
66425: PUSH
66426: FOR_IN
66427: IFFALSE 66481
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66429: LD_VAR 0 1
66433: PPUSH
66434: CALL_OW 257
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 3
66447: PUSH
66448: LD_INT 4
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: IN
66457: IFFALSE 66479
// SetClass ( un , rand ( 1 , 4 ) ) ;
66459: LD_VAR 0 1
66463: PPUSH
66464: LD_INT 1
66466: PPUSH
66467: LD_INT 4
66469: PPUSH
66470: CALL_OW 12
66474: PPUSH
66475: CALL_OW 336
66479: GO 66426
66481: POP
66482: POP
// end ;
66483: PPOPN 1
66485: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66486: LD_EXP 61
66490: IFFALSE 66498
66492: PUSH
66493: LD_EXP 73
66497: AND
66498: IFFALSE 66577
66500: GO 66502
66502: DISABLE
66503: LD_INT 0
66505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66506: LD_ADDR_VAR 0 1
66510: PUSH
66511: LD_INT 22
66513: PUSH
66514: LD_OWVAR 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 21
66525: PUSH
66526: LD_INT 3
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PPUSH
66537: CALL_OW 69
66541: ST_TO_ADDR
// if not tmp then
66542: LD_VAR 0 1
66546: NOT
66547: IFFALSE 66551
// exit ;
66549: GO 66577
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66551: LD_VAR 0 1
66555: PUSH
66556: LD_INT 1
66558: PPUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: CALL_OW 12
66568: ARRAY
66569: PPUSH
66570: LD_INT 100
66572: PPUSH
66573: CALL_OW 234
// end ;
66577: PPOPN 1
66579: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66580: LD_EXP 61
66584: IFFALSE 66592
66586: PUSH
66587: LD_EXP 75
66591: AND
66592: IFFALSE 66690
66594: GO 66596
66596: DISABLE
66597: LD_INT 0
66599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66600: LD_ADDR_VAR 0 1
66604: PUSH
66605: LD_INT 22
66607: PUSH
66608: LD_OWVAR 2
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 21
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PPUSH
66631: CALL_OW 69
66635: ST_TO_ADDR
// if not tmp then
66636: LD_VAR 0 1
66640: NOT
66641: IFFALSE 66645
// exit ;
66643: GO 66690
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66645: LD_VAR 0 1
66649: PUSH
66650: LD_INT 1
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL_OW 12
66662: ARRAY
66663: PPUSH
66664: LD_INT 1
66666: PPUSH
66667: LD_INT 4
66669: PPUSH
66670: CALL_OW 12
66674: PPUSH
66675: LD_INT 3000
66677: PPUSH
66678: LD_INT 9000
66680: PPUSH
66681: CALL_OW 12
66685: PPUSH
66686: CALL_OW 492
// end ;
66690: PPOPN 1
66692: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66693: LD_EXP 61
66697: IFFALSE 66705
66699: PUSH
66700: LD_EXP 76
66704: AND
66705: IFFALSE 66725
66707: GO 66709
66709: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66710: LD_INT 1
66712: PPUSH
66713: LD_OWVAR 2
66717: PPUSH
66718: LD_INT 0
66720: PPUSH
66721: CALL_OW 324
66725: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66726: LD_EXP 61
66730: IFFALSE 66738
66732: PUSH
66733: LD_EXP 77
66737: AND
66738: IFFALSE 66821
66740: GO 66742
66742: DISABLE
66743: LD_INT 0
66745: PPUSH
66746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66747: LD_ADDR_VAR 0 2
66751: PUSH
66752: LD_INT 22
66754: PUSH
66755: LD_OWVAR 2
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 21
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PPUSH
66778: CALL_OW 69
66782: ST_TO_ADDR
// if not tmp then
66783: LD_VAR 0 2
66787: NOT
66788: IFFALSE 66792
// exit ;
66790: GO 66821
// for i in tmp do
66792: LD_ADDR_VAR 0 1
66796: PUSH
66797: LD_VAR 0 2
66801: PUSH
66802: FOR_IN
66803: IFFALSE 66819
// SetBLevel ( i , 10 ) ;
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_INT 10
66812: PPUSH
66813: CALL_OW 241
66817: GO 66802
66819: POP
66820: POP
// end ;
66821: PPOPN 2
66823: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66824: LD_EXP 61
66828: IFFALSE 66836
66830: PUSH
66831: LD_EXP 78
66835: AND
66836: IFFALSE 66947
66838: GO 66840
66840: DISABLE
66841: LD_INT 0
66843: PPUSH
66844: PPUSH
66845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66846: LD_ADDR_VAR 0 3
66850: PUSH
66851: LD_INT 22
66853: PUSH
66854: LD_OWVAR 2
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 25
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PPUSH
66877: CALL_OW 69
66881: ST_TO_ADDR
// if not tmp then
66882: LD_VAR 0 3
66886: NOT
66887: IFFALSE 66891
// exit ;
66889: GO 66947
// un := tmp [ rand ( 1 , tmp ) ] ;
66891: LD_ADDR_VAR 0 2
66895: PUSH
66896: LD_VAR 0 3
66900: PUSH
66901: LD_INT 1
66903: PPUSH
66904: LD_VAR 0 3
66908: PPUSH
66909: CALL_OW 12
66913: ARRAY
66914: ST_TO_ADDR
// if Crawls ( un ) then
66915: LD_VAR 0 2
66919: PPUSH
66920: CALL_OW 318
66924: IFFALSE 66935
// ComWalk ( un ) ;
66926: LD_VAR 0 2
66930: PPUSH
66931: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66935: LD_VAR 0 2
66939: PPUSH
66940: LD_INT 5
66942: PPUSH
66943: CALL_OW 336
// end ;
66947: PPOPN 3
66949: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66950: LD_EXP 61
66954: IFFALSE 66962
66956: PUSH
66957: LD_EXP 79
66961: AND
66962: IFFALSE 66974
66964: PUSH
66965: LD_OWVAR 67
66969: PUSH
66970: LD_INT 4
66972: LESS
66973: AND
66974: IFFALSE 66993
66976: GO 66978
66978: DISABLE
// begin Difficulty := Difficulty + 1 ;
66979: LD_ADDR_OWVAR 67
66983: PUSH
66984: LD_OWVAR 67
66988: PUSH
66989: LD_INT 1
66991: PLUS
66992: ST_TO_ADDR
// end ;
66993: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66994: LD_EXP 61
66998: IFFALSE 67006
67000: PUSH
67001: LD_EXP 80
67005: AND
67006: IFFALSE 67109
67008: GO 67010
67010: DISABLE
67011: LD_INT 0
67013: PPUSH
// begin for i := 1 to 5 do
67014: LD_ADDR_VAR 0 1
67018: PUSH
67019: DOUBLE
67020: LD_INT 1
67022: DEC
67023: ST_TO_ADDR
67024: LD_INT 5
67026: PUSH
67027: FOR_TO
67028: IFFALSE 67107
// begin uc_nation := nation_nature ;
67030: LD_ADDR_OWVAR 21
67034: PUSH
67035: LD_INT 0
67037: ST_TO_ADDR
// uc_side := 0 ;
67038: LD_ADDR_OWVAR 20
67042: PUSH
67043: LD_INT 0
67045: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67046: LD_ADDR_OWVAR 29
67050: PUSH
67051: LD_INT 12
67053: PUSH
67054: LD_INT 12
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// hc_agressivity := 20 ;
67061: LD_ADDR_OWVAR 35
67065: PUSH
67066: LD_INT 20
67068: ST_TO_ADDR
// hc_class := class_tiger ;
67069: LD_ADDR_OWVAR 28
67073: PUSH
67074: LD_INT 14
67076: ST_TO_ADDR
// hc_gallery :=  ;
67077: LD_ADDR_OWVAR 33
67081: PUSH
67082: LD_STRING 
67084: ST_TO_ADDR
// hc_name :=  ;
67085: LD_ADDR_OWVAR 26
67089: PUSH
67090: LD_STRING 
67092: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67093: CALL_OW 44
67097: PPUSH
67098: LD_INT 0
67100: PPUSH
67101: CALL_OW 51
// end ;
67105: GO 67027
67107: POP
67108: POP
// end ;
67109: PPOPN 1
67111: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67112: LD_EXP 61
67116: IFFALSE 67124
67118: PUSH
67119: LD_EXP 81
67123: AND
67124: IFFALSE 67133
67126: GO 67128
67128: DISABLE
// StreamSibBomb ;
67129: CALL 67134 0 0
67133: END
// export function StreamSibBomb ; var i , x , y ; begin
67134: LD_INT 0
67136: PPUSH
67137: PPUSH
67138: PPUSH
67139: PPUSH
// result := false ;
67140: LD_ADDR_VAR 0 1
67144: PUSH
67145: LD_INT 0
67147: ST_TO_ADDR
// for i := 1 to 16 do
67148: LD_ADDR_VAR 0 2
67152: PUSH
67153: DOUBLE
67154: LD_INT 1
67156: DEC
67157: ST_TO_ADDR
67158: LD_INT 16
67160: PUSH
67161: FOR_TO
67162: IFFALSE 67361
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67164: LD_ADDR_VAR 0 3
67168: PUSH
67169: LD_INT 10
67171: PUSH
67172: LD_INT 20
67174: PUSH
67175: LD_INT 30
67177: PUSH
67178: LD_INT 40
67180: PUSH
67181: LD_INT 50
67183: PUSH
67184: LD_INT 60
67186: PUSH
67187: LD_INT 70
67189: PUSH
67190: LD_INT 80
67192: PUSH
67193: LD_INT 90
67195: PUSH
67196: LD_INT 100
67198: PUSH
67199: LD_INT 110
67201: PUSH
67202: LD_INT 120
67204: PUSH
67205: LD_INT 130
67207: PUSH
67208: LD_INT 140
67210: PUSH
67211: LD_INT 150
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: PPUSH
67234: LD_INT 15
67236: PPUSH
67237: CALL_OW 12
67241: ARRAY
67242: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67243: LD_ADDR_VAR 0 4
67247: PUSH
67248: LD_INT 10
67250: PUSH
67251: LD_INT 20
67253: PUSH
67254: LD_INT 30
67256: PUSH
67257: LD_INT 40
67259: PUSH
67260: LD_INT 50
67262: PUSH
67263: LD_INT 60
67265: PUSH
67266: LD_INT 70
67268: PUSH
67269: LD_INT 80
67271: PUSH
67272: LD_INT 90
67274: PUSH
67275: LD_INT 100
67277: PUSH
67278: LD_INT 110
67280: PUSH
67281: LD_INT 120
67283: PUSH
67284: LD_INT 130
67286: PUSH
67287: LD_INT 140
67289: PUSH
67290: LD_INT 150
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: PPUSH
67313: LD_INT 15
67315: PPUSH
67316: CALL_OW 12
67320: ARRAY
67321: ST_TO_ADDR
// if ValidHex ( x , y ) then
67322: LD_VAR 0 3
67326: PPUSH
67327: LD_VAR 0 4
67331: PPUSH
67332: CALL_OW 488
67336: IFFALSE 67359
// begin result := [ x , y ] ;
67338: LD_ADDR_VAR 0 1
67342: PUSH
67343: LD_VAR 0 3
67347: PUSH
67348: LD_VAR 0 4
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// break ;
67357: GO 67361
// end ; end ;
67359: GO 67161
67361: POP
67362: POP
// if result then
67363: LD_VAR 0 1
67367: IFFALSE 67427
// begin ToLua ( playSibBomb() ) ;
67369: LD_STRING playSibBomb()
67371: PPUSH
67372: CALL_OW 559
// wait ( 0 0$14 ) ;
67376: LD_INT 490
67378: PPUSH
67379: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67383: LD_VAR 0 1
67387: PUSH
67388: LD_INT 1
67390: ARRAY
67391: PPUSH
67392: LD_VAR 0 1
67396: PUSH
67397: LD_INT 2
67399: ARRAY
67400: PPUSH
67401: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67405: LD_VAR 0 1
67409: PUSH
67410: LD_INT 1
67412: ARRAY
67413: PPUSH
67414: LD_VAR 0 1
67418: PUSH
67419: LD_INT 2
67421: ARRAY
67422: PPUSH
67423: CALL_OW 429
// end ; end ;
67427: LD_VAR 0 1
67431: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67432: LD_EXP 61
67436: IFFALSE 67444
67438: PUSH
67439: LD_EXP 83
67443: AND
67444: IFFALSE 67456
67446: GO 67448
67448: DISABLE
// YouLost (  ) ;
67449: LD_STRING 
67451: PPUSH
67452: CALL_OW 104
67456: END
// every 0 0$1 trigger StreamModeActive and sFog do
67457: LD_EXP 61
67461: IFFALSE 67469
67463: PUSH
67464: LD_EXP 82
67468: AND
67469: IFFALSE 67483
67471: GO 67473
67473: DISABLE
// FogOff ( your_side ) ;
67474: LD_OWVAR 2
67478: PPUSH
67479: CALL_OW 344
67483: END
// every 0 0$1 trigger StreamModeActive and sSun do
67484: LD_EXP 61
67488: IFFALSE 67496
67490: PUSH
67491: LD_EXP 84
67495: AND
67496: IFFALSE 67524
67498: GO 67500
67500: DISABLE
// begin solar_recharge_percent := 0 ;
67501: LD_ADDR_OWVAR 79
67505: PUSH
67506: LD_INT 0
67508: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67509: LD_INT 10500
67511: PPUSH
67512: CALL_OW 67
// solar_recharge_percent := 100 ;
67516: LD_ADDR_OWVAR 79
67520: PUSH
67521: LD_INT 100
67523: ST_TO_ADDR
// end ;
67524: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67525: LD_EXP 61
67529: IFFALSE 67537
67531: PUSH
67532: LD_EXP 85
67536: AND
67537: IFFALSE 67776
67539: GO 67541
67541: DISABLE
67542: LD_INT 0
67544: PPUSH
67545: PPUSH
67546: PPUSH
// begin tmp := [ ] ;
67547: LD_ADDR_VAR 0 3
67551: PUSH
67552: EMPTY
67553: ST_TO_ADDR
// for i := 1 to 6 do
67554: LD_ADDR_VAR 0 1
67558: PUSH
67559: DOUBLE
67560: LD_INT 1
67562: DEC
67563: ST_TO_ADDR
67564: LD_INT 6
67566: PUSH
67567: FOR_TO
67568: IFFALSE 67673
// begin uc_nation := nation_nature ;
67570: LD_ADDR_OWVAR 21
67574: PUSH
67575: LD_INT 0
67577: ST_TO_ADDR
// uc_side := 0 ;
67578: LD_ADDR_OWVAR 20
67582: PUSH
67583: LD_INT 0
67585: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67586: LD_ADDR_OWVAR 29
67590: PUSH
67591: LD_INT 12
67593: PUSH
67594: LD_INT 12
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// hc_agressivity := 20 ;
67601: LD_ADDR_OWVAR 35
67605: PUSH
67606: LD_INT 20
67608: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67609: LD_ADDR_OWVAR 28
67613: PUSH
67614: LD_INT 17
67616: ST_TO_ADDR
// hc_gallery :=  ;
67617: LD_ADDR_OWVAR 33
67621: PUSH
67622: LD_STRING 
67624: ST_TO_ADDR
// hc_name :=  ;
67625: LD_ADDR_OWVAR 26
67629: PUSH
67630: LD_STRING 
67632: ST_TO_ADDR
// un := CreateHuman ;
67633: LD_ADDR_VAR 0 2
67637: PUSH
67638: CALL_OW 44
67642: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67643: LD_VAR 0 2
67647: PPUSH
67648: LD_INT 1
67650: PPUSH
67651: CALL_OW 51
// tmp := tmp ^ un ;
67655: LD_ADDR_VAR 0 3
67659: PUSH
67660: LD_VAR 0 3
67664: PUSH
67665: LD_VAR 0 2
67669: ADD
67670: ST_TO_ADDR
// end ;
67671: GO 67567
67673: POP
67674: POP
// repeat wait ( 0 0$1 ) ;
67675: LD_INT 35
67677: PPUSH
67678: CALL_OW 67
// for un in tmp do
67682: LD_ADDR_VAR 0 2
67686: PUSH
67687: LD_VAR 0 3
67691: PUSH
67692: FOR_IN
67693: IFFALSE 67767
// begin if IsDead ( un ) then
67695: LD_VAR 0 2
67699: PPUSH
67700: CALL_OW 301
67704: IFFALSE 67724
// begin tmp := tmp diff un ;
67706: LD_ADDR_VAR 0 3
67710: PUSH
67711: LD_VAR 0 3
67715: PUSH
67716: LD_VAR 0 2
67720: DIFF
67721: ST_TO_ADDR
// continue ;
67722: GO 67692
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67724: LD_VAR 0 2
67728: PPUSH
67729: LD_INT 3
67731: PUSH
67732: LD_INT 22
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PPUSH
67746: CALL_OW 69
67750: PPUSH
67751: LD_VAR 0 2
67755: PPUSH
67756: CALL_OW 74
67760: PPUSH
67761: CALL_OW 115
// end ;
67765: GO 67692
67767: POP
67768: POP
// until not tmp ;
67769: LD_VAR 0 3
67773: NOT
67774: IFFALSE 67675
// end ;
67776: PPOPN 3
67778: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67779: LD_EXP 61
67783: IFFALSE 67791
67785: PUSH
67786: LD_EXP 86
67790: AND
67791: IFFALSE 67845
67793: GO 67795
67795: DISABLE
// begin ToLua ( displayTroll(); ) ;
67796: LD_STRING displayTroll();
67798: PPUSH
67799: CALL_OW 559
// wait ( 3 3$00 ) ;
67803: LD_INT 6300
67805: PPUSH
67806: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67810: LD_STRING hideTroll();
67812: PPUSH
67813: CALL_OW 559
// wait ( 1 1$00 ) ;
67817: LD_INT 2100
67819: PPUSH
67820: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67824: LD_STRING displayTroll();
67826: PPUSH
67827: CALL_OW 559
// wait ( 1 1$00 ) ;
67831: LD_INT 2100
67833: PPUSH
67834: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67838: LD_STRING hideTroll();
67840: PPUSH
67841: CALL_OW 559
// end ;
67845: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67846: LD_EXP 61
67850: IFFALSE 67858
67852: PUSH
67853: LD_EXP 87
67857: AND
67858: IFFALSE 67921
67860: GO 67862
67862: DISABLE
67863: LD_INT 0
67865: PPUSH
// begin p := 0 ;
67866: LD_ADDR_VAR 0 1
67870: PUSH
67871: LD_INT 0
67873: ST_TO_ADDR
// repeat game_speed := 1 ;
67874: LD_ADDR_OWVAR 65
67878: PUSH
67879: LD_INT 1
67881: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67882: LD_INT 35
67884: PPUSH
67885: CALL_OW 67
// p := p + 1 ;
67889: LD_ADDR_VAR 0 1
67893: PUSH
67894: LD_VAR 0 1
67898: PUSH
67899: LD_INT 1
67901: PLUS
67902: ST_TO_ADDR
// until p >= 60 ;
67903: LD_VAR 0 1
67907: PUSH
67908: LD_INT 60
67910: GREATEREQUAL
67911: IFFALSE 67874
// game_speed := 4 ;
67913: LD_ADDR_OWVAR 65
67917: PUSH
67918: LD_INT 4
67920: ST_TO_ADDR
// end ;
67921: PPOPN 1
67923: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67924: LD_EXP 61
67928: IFFALSE 67936
67930: PUSH
67931: LD_EXP 88
67935: AND
67936: IFFALSE 68082
67938: GO 67940
67940: DISABLE
67941: LD_INT 0
67943: PPUSH
67944: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67945: LD_ADDR_VAR 0 1
67949: PUSH
67950: LD_INT 22
67952: PUSH
67953: LD_OWVAR 2
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 2
67964: PUSH
67965: LD_INT 30
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 30
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PPUSH
67994: CALL_OW 69
67998: ST_TO_ADDR
// if not depot then
67999: LD_VAR 0 1
68003: NOT
68004: IFFALSE 68008
// exit ;
68006: GO 68082
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68008: LD_ADDR_VAR 0 2
68012: PUSH
68013: LD_VAR 0 1
68017: PUSH
68018: LD_INT 1
68020: PPUSH
68021: LD_VAR 0 1
68025: PPUSH
68026: CALL_OW 12
68030: ARRAY
68031: PPUSH
68032: CALL_OW 274
68036: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68037: LD_VAR 0 2
68041: PPUSH
68042: LD_INT 1
68044: PPUSH
68045: LD_INT 0
68047: PPUSH
68048: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68052: LD_VAR 0 2
68056: PPUSH
68057: LD_INT 2
68059: PPUSH
68060: LD_INT 0
68062: PPUSH
68063: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68067: LD_VAR 0 2
68071: PPUSH
68072: LD_INT 3
68074: PPUSH
68075: LD_INT 0
68077: PPUSH
68078: CALL_OW 277
// end ;
68082: PPOPN 2
68084: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68085: LD_EXP 61
68089: IFFALSE 68097
68091: PUSH
68092: LD_EXP 89
68096: AND
68097: IFFALSE 68194
68099: GO 68101
68101: DISABLE
68102: LD_INT 0
68104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68105: LD_ADDR_VAR 0 1
68109: PUSH
68110: LD_INT 22
68112: PUSH
68113: LD_OWVAR 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 21
68124: PUSH
68125: LD_INT 1
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 3
68134: PUSH
68135: LD_INT 23
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: LIST
68153: PPUSH
68154: CALL_OW 69
68158: ST_TO_ADDR
// if not tmp then
68159: LD_VAR 0 1
68163: NOT
68164: IFFALSE 68168
// exit ;
68166: GO 68194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68168: LD_VAR 0 1
68172: PUSH
68173: LD_INT 1
68175: PPUSH
68176: LD_VAR 0 1
68180: PPUSH
68181: CALL_OW 12
68185: ARRAY
68186: PPUSH
68187: LD_INT 200
68189: PPUSH
68190: CALL_OW 234
// end ;
68194: PPOPN 1
68196: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68197: LD_EXP 61
68201: IFFALSE 68209
68203: PUSH
68204: LD_EXP 90
68208: AND
68209: IFFALSE 68288
68211: GO 68213
68213: DISABLE
68214: LD_INT 0
68216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68217: LD_ADDR_VAR 0 1
68221: PUSH
68222: LD_INT 22
68224: PUSH
68225: LD_OWVAR 2
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 21
68236: PUSH
68237: LD_INT 2
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PPUSH
68248: CALL_OW 69
68252: ST_TO_ADDR
// if not tmp then
68253: LD_VAR 0 1
68257: NOT
68258: IFFALSE 68262
// exit ;
68260: GO 68288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68262: LD_VAR 0 1
68266: PUSH
68267: LD_INT 1
68269: PPUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: CALL_OW 12
68279: ARRAY
68280: PPUSH
68281: LD_INT 60
68283: PPUSH
68284: CALL_OW 234
// end ;
68288: PPOPN 1
68290: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68291: LD_EXP 61
68295: IFFALSE 68303
68297: PUSH
68298: LD_EXP 91
68302: AND
68303: IFFALSE 68402
68305: GO 68307
68307: DISABLE
68308: LD_INT 0
68310: PPUSH
68311: PPUSH
// begin enable ;
68312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68313: LD_ADDR_VAR 0 1
68317: PUSH
68318: LD_INT 22
68320: PUSH
68321: LD_OWVAR 2
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 61
68332: PUSH
68333: EMPTY
68334: LIST
68335: PUSH
68336: LD_INT 33
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: PPUSH
68351: CALL_OW 69
68355: ST_TO_ADDR
// if not tmp then
68356: LD_VAR 0 1
68360: NOT
68361: IFFALSE 68365
// exit ;
68363: GO 68402
// for i in tmp do
68365: LD_ADDR_VAR 0 2
68369: PUSH
68370: LD_VAR 0 1
68374: PUSH
68375: FOR_IN
68376: IFFALSE 68400
// if IsControledBy ( i ) then
68378: LD_VAR 0 2
68382: PPUSH
68383: CALL_OW 312
68387: IFFALSE 68398
// ComUnlink ( i ) ;
68389: LD_VAR 0 2
68393: PPUSH
68394: CALL_OW 136
68398: GO 68375
68400: POP
68401: POP
// end ;
68402: PPOPN 2
68404: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68405: LD_EXP 61
68409: IFFALSE 68417
68411: PUSH
68412: LD_EXP 92
68416: AND
68417: IFFALSE 68557
68419: GO 68421
68421: DISABLE
68422: LD_INT 0
68424: PPUSH
68425: PPUSH
// begin ToLua ( displayPowell(); ) ;
68426: LD_STRING displayPowell();
68428: PPUSH
68429: CALL_OW 559
// uc_side := 0 ;
68433: LD_ADDR_OWVAR 20
68437: PUSH
68438: LD_INT 0
68440: ST_TO_ADDR
// uc_nation := 2 ;
68441: LD_ADDR_OWVAR 21
68445: PUSH
68446: LD_INT 2
68448: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68449: LD_ADDR_OWVAR 37
68453: PUSH
68454: LD_INT 14
68456: ST_TO_ADDR
// vc_engine := engine_siberite ;
68457: LD_ADDR_OWVAR 39
68461: PUSH
68462: LD_INT 3
68464: ST_TO_ADDR
// vc_control := control_apeman ;
68465: LD_ADDR_OWVAR 38
68469: PUSH
68470: LD_INT 5
68472: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68473: LD_ADDR_OWVAR 40
68477: PUSH
68478: LD_INT 29
68480: ST_TO_ADDR
// un := CreateVehicle ;
68481: LD_ADDR_VAR 0 2
68485: PUSH
68486: CALL_OW 45
68490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68491: LD_VAR 0 2
68495: PPUSH
68496: LD_INT 1
68498: PPUSH
68499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68503: LD_INT 35
68505: PPUSH
68506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68510: LD_VAR 0 2
68514: PPUSH
68515: LD_INT 22
68517: PUSH
68518: LD_OWVAR 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PPUSH
68527: CALL_OW 69
68531: PPUSH
68532: LD_VAR 0 2
68536: PPUSH
68537: CALL_OW 74
68541: PPUSH
68542: CALL_OW 115
// until IsDead ( un ) ;
68546: LD_VAR 0 2
68550: PPUSH
68551: CALL_OW 301
68555: IFFALSE 68503
// end ;
68557: PPOPN 2
68559: END
// every 0 0$1 trigger StreamModeActive and sStu do
68560: LD_EXP 61
68564: IFFALSE 68572
68566: PUSH
68567: LD_EXP 100
68571: AND
68572: IFFALSE 68588
68574: GO 68576
68576: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68577: LD_STRING displayStucuk();
68579: PPUSH
68580: CALL_OW 559
// ResetFog ;
68584: CALL_OW 335
// end ;
68588: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68589: LD_EXP 61
68593: IFFALSE 68601
68595: PUSH
68596: LD_EXP 93
68600: AND
68601: IFFALSE 68742
68603: GO 68605
68605: DISABLE
68606: LD_INT 0
68608: PPUSH
68609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68610: LD_ADDR_VAR 0 2
68614: PUSH
68615: LD_INT 22
68617: PUSH
68618: LD_OWVAR 2
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 21
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PPUSH
68641: CALL_OW 69
68645: ST_TO_ADDR
// if not tmp then
68646: LD_VAR 0 2
68650: NOT
68651: IFFALSE 68655
// exit ;
68653: GO 68742
// un := tmp [ rand ( 1 , tmp ) ] ;
68655: LD_ADDR_VAR 0 1
68659: PUSH
68660: LD_VAR 0 2
68664: PUSH
68665: LD_INT 1
68667: PPUSH
68668: LD_VAR 0 2
68672: PPUSH
68673: CALL_OW 12
68677: ARRAY
68678: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68679: LD_VAR 0 1
68683: PPUSH
68684: LD_INT 0
68686: PPUSH
68687: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68691: LD_VAR 0 1
68695: PPUSH
68696: LD_OWVAR 3
68700: PUSH
68701: LD_VAR 0 1
68705: DIFF
68706: PPUSH
68707: LD_VAR 0 1
68711: PPUSH
68712: CALL_OW 74
68716: PPUSH
68717: CALL_OW 115
// wait ( 0 0$20 ) ;
68721: LD_INT 700
68723: PPUSH
68724: CALL_OW 67
// SetSide ( un , your_side ) ;
68728: LD_VAR 0 1
68732: PPUSH
68733: LD_OWVAR 2
68737: PPUSH
68738: CALL_OW 235
// end ;
68742: PPOPN 2
68744: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68745: LD_EXP 61
68749: IFFALSE 68757
68751: PUSH
68752: LD_EXP 94
68756: AND
68757: IFFALSE 68863
68759: GO 68761
68761: DISABLE
68762: LD_INT 0
68764: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68765: LD_ADDR_VAR 0 1
68769: PUSH
68770: LD_INT 22
68772: PUSH
68773: LD_OWVAR 2
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: LD_INT 30
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 30
68797: PUSH
68798: LD_INT 1
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PPUSH
68814: CALL_OW 69
68818: ST_TO_ADDR
// if not depot then
68819: LD_VAR 0 1
68823: NOT
68824: IFFALSE 68828
// exit ;
68826: GO 68863
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68828: LD_VAR 0 1
68832: PUSH
68833: LD_INT 1
68835: ARRAY
68836: PPUSH
68837: CALL_OW 250
68841: PPUSH
68842: LD_VAR 0 1
68846: PUSH
68847: LD_INT 1
68849: ARRAY
68850: PPUSH
68851: CALL_OW 251
68855: PPUSH
68856: LD_INT 70
68858: PPUSH
68859: CALL_OW 495
// end ;
68863: PPOPN 1
68865: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68866: LD_EXP 61
68870: IFFALSE 68878
68872: PUSH
68873: LD_EXP 95
68877: AND
68878: IFFALSE 69089
68880: GO 68882
68882: DISABLE
68883: LD_INT 0
68885: PPUSH
68886: PPUSH
68887: PPUSH
68888: PPUSH
68889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68890: LD_ADDR_VAR 0 5
68894: PUSH
68895: LD_INT 22
68897: PUSH
68898: LD_OWVAR 2
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 21
68909: PUSH
68910: LD_INT 1
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PPUSH
68921: CALL_OW 69
68925: ST_TO_ADDR
// if not tmp then
68926: LD_VAR 0 5
68930: NOT
68931: IFFALSE 68935
// exit ;
68933: GO 69089
// for i in tmp do
68935: LD_ADDR_VAR 0 1
68939: PUSH
68940: LD_VAR 0 5
68944: PUSH
68945: FOR_IN
68946: IFFALSE 69087
// begin d := rand ( 0 , 5 ) ;
68948: LD_ADDR_VAR 0 4
68952: PUSH
68953: LD_INT 0
68955: PPUSH
68956: LD_INT 5
68958: PPUSH
68959: CALL_OW 12
68963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68964: LD_ADDR_VAR 0 2
68968: PUSH
68969: LD_VAR 0 1
68973: PPUSH
68974: CALL_OW 250
68978: PPUSH
68979: LD_VAR 0 4
68983: PPUSH
68984: LD_INT 3
68986: PPUSH
68987: LD_INT 12
68989: PPUSH
68990: CALL_OW 12
68994: PPUSH
68995: CALL_OW 272
68999: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69000: LD_ADDR_VAR 0 3
69004: PUSH
69005: LD_VAR 0 1
69009: PPUSH
69010: CALL_OW 251
69014: PPUSH
69015: LD_VAR 0 4
69019: PPUSH
69020: LD_INT 3
69022: PPUSH
69023: LD_INT 12
69025: PPUSH
69026: CALL_OW 12
69030: PPUSH
69031: CALL_OW 273
69035: ST_TO_ADDR
// if ValidHex ( x , y ) then
69036: LD_VAR 0 2
69040: PPUSH
69041: LD_VAR 0 3
69045: PPUSH
69046: CALL_OW 488
69050: IFFALSE 69085
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69052: LD_VAR 0 1
69056: PPUSH
69057: LD_VAR 0 2
69061: PPUSH
69062: LD_VAR 0 3
69066: PPUSH
69067: LD_INT 3
69069: PPUSH
69070: LD_INT 6
69072: PPUSH
69073: CALL_OW 12
69077: PPUSH
69078: LD_INT 1
69080: PPUSH
69081: CALL_OW 483
// end ;
69085: GO 68945
69087: POP
69088: POP
// end ;
69089: PPOPN 5
69091: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69092: LD_EXP 61
69096: IFFALSE 69104
69098: PUSH
69099: LD_EXP 96
69103: AND
69104: IFFALSE 69198
69106: GO 69108
69108: DISABLE
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69113: LD_ADDR_VAR 0 2
69117: PUSH
69118: LD_INT 22
69120: PUSH
69121: LD_OWVAR 2
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 32
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 21
69142: PUSH
69143: LD_INT 2
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: LIST
69154: PPUSH
69155: CALL_OW 69
69159: ST_TO_ADDR
// if not tmp then
69160: LD_VAR 0 2
69164: NOT
69165: IFFALSE 69169
// exit ;
69167: GO 69198
// for i in tmp do
69169: LD_ADDR_VAR 0 1
69173: PUSH
69174: LD_VAR 0 2
69178: PUSH
69179: FOR_IN
69180: IFFALSE 69196
// SetFuel ( i , 0 ) ;
69182: LD_VAR 0 1
69186: PPUSH
69187: LD_INT 0
69189: PPUSH
69190: CALL_OW 240
69194: GO 69179
69196: POP
69197: POP
// end ;
69198: PPOPN 2
69200: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69201: LD_EXP 61
69205: IFFALSE 69213
69207: PUSH
69208: LD_EXP 97
69212: AND
69213: IFFALSE 69279
69215: GO 69217
69217: DISABLE
69218: LD_INT 0
69220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69221: LD_ADDR_VAR 0 1
69225: PUSH
69226: LD_INT 22
69228: PUSH
69229: LD_OWVAR 2
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 30
69240: PUSH
69241: LD_INT 29
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PPUSH
69252: CALL_OW 69
69256: ST_TO_ADDR
// if not tmp then
69257: LD_VAR 0 1
69261: NOT
69262: IFFALSE 69266
// exit ;
69264: GO 69279
// DestroyUnit ( tmp [ 1 ] ) ;
69266: LD_VAR 0 1
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: PPUSH
69275: CALL_OW 65
// end ;
69279: PPOPN 1
69281: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69282: LD_EXP 61
69286: IFFALSE 69294
69288: PUSH
69289: LD_EXP 99
69293: AND
69294: IFFALSE 69423
69296: GO 69298
69298: DISABLE
69299: LD_INT 0
69301: PPUSH
// begin uc_side := 0 ;
69302: LD_ADDR_OWVAR 20
69306: PUSH
69307: LD_INT 0
69309: ST_TO_ADDR
// uc_nation := nation_arabian ;
69310: LD_ADDR_OWVAR 21
69314: PUSH
69315: LD_INT 2
69317: ST_TO_ADDR
// hc_gallery :=  ;
69318: LD_ADDR_OWVAR 33
69322: PUSH
69323: LD_STRING 
69325: ST_TO_ADDR
// hc_name :=  ;
69326: LD_ADDR_OWVAR 26
69330: PUSH
69331: LD_STRING 
69333: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69334: LD_INT 1
69336: PPUSH
69337: LD_INT 11
69339: PPUSH
69340: LD_INT 10
69342: PPUSH
69343: CALL_OW 380
// un := CreateHuman ;
69347: LD_ADDR_VAR 0 1
69351: PUSH
69352: CALL_OW 44
69356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69357: LD_VAR 0 1
69361: PPUSH
69362: LD_INT 1
69364: PPUSH
69365: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69369: LD_INT 35
69371: PPUSH
69372: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69376: LD_VAR 0 1
69380: PPUSH
69381: LD_INT 22
69383: PUSH
69384: LD_OWVAR 2
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PPUSH
69393: CALL_OW 69
69397: PPUSH
69398: LD_VAR 0 1
69402: PPUSH
69403: CALL_OW 74
69407: PPUSH
69408: CALL_OW 115
// until IsDead ( un ) ;
69412: LD_VAR 0 1
69416: PPUSH
69417: CALL_OW 301
69421: IFFALSE 69369
// end ;
69423: PPOPN 1
69425: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69426: LD_EXP 61
69430: IFFALSE 69438
69432: PUSH
69433: LD_EXP 101
69437: AND
69438: IFFALSE 69450
69440: GO 69442
69442: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69443: LD_STRING earthquake(getX(game), 0, 32)
69445: PPUSH
69446: CALL_OW 559
69450: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69451: LD_EXP 61
69455: IFFALSE 69463
69457: PUSH
69458: LD_EXP 102
69462: AND
69463: IFFALSE 69554
69465: GO 69467
69467: DISABLE
69468: LD_INT 0
69470: PPUSH
// begin enable ;
69471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69472: LD_ADDR_VAR 0 1
69476: PUSH
69477: LD_INT 22
69479: PUSH
69480: LD_OWVAR 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 21
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 33
69501: PUSH
69502: LD_INT 3
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: PPUSH
69514: CALL_OW 69
69518: ST_TO_ADDR
// if not tmp then
69519: LD_VAR 0 1
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69528: LD_VAR 0 1
69532: PUSH
69533: LD_INT 1
69535: PPUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: CALL_OW 12
69545: ARRAY
69546: PPUSH
69547: LD_INT 1
69549: PPUSH
69550: CALL_OW 234
// end ;
69554: PPOPN 1
69556: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69557: LD_EXP 61
69561: IFFALSE 69569
69563: PUSH
69564: LD_EXP 103
69568: AND
69569: IFFALSE 69710
69571: GO 69573
69573: DISABLE
69574: LD_INT 0
69576: PPUSH
69577: PPUSH
69578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69579: LD_ADDR_VAR 0 3
69583: PUSH
69584: LD_INT 22
69586: PUSH
69587: LD_OWVAR 2
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 25
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PPUSH
69610: CALL_OW 69
69614: ST_TO_ADDR
// if not tmp then
69615: LD_VAR 0 3
69619: NOT
69620: IFFALSE 69624
// exit ;
69622: GO 69710
// un := tmp [ rand ( 1 , tmp ) ] ;
69624: LD_ADDR_VAR 0 2
69628: PUSH
69629: LD_VAR 0 3
69633: PUSH
69634: LD_INT 1
69636: PPUSH
69637: LD_VAR 0 3
69641: PPUSH
69642: CALL_OW 12
69646: ARRAY
69647: ST_TO_ADDR
// if Crawls ( un ) then
69648: LD_VAR 0 2
69652: PPUSH
69653: CALL_OW 318
69657: IFFALSE 69668
// ComWalk ( un ) ;
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69668: LD_VAR 0 2
69672: PPUSH
69673: LD_INT 9
69675: PPUSH
69676: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69680: LD_INT 28
69682: PPUSH
69683: LD_OWVAR 2
69687: PPUSH
69688: LD_INT 2
69690: PPUSH
69691: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69695: LD_INT 29
69697: PPUSH
69698: LD_OWVAR 2
69702: PPUSH
69703: LD_INT 2
69705: PPUSH
69706: CALL_OW 322
// end ;
69710: PPOPN 3
69712: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69713: LD_EXP 61
69717: IFFALSE 69725
69719: PUSH
69720: LD_EXP 104
69724: AND
69725: IFFALSE 69836
69727: GO 69729
69729: DISABLE
69730: LD_INT 0
69732: PPUSH
69733: PPUSH
69734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69735: LD_ADDR_VAR 0 3
69739: PUSH
69740: LD_INT 22
69742: PUSH
69743: LD_OWVAR 2
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 25
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PPUSH
69766: CALL_OW 69
69770: ST_TO_ADDR
// if not tmp then
69771: LD_VAR 0 3
69775: NOT
69776: IFFALSE 69780
// exit ;
69778: GO 69836
// un := tmp [ rand ( 1 , tmp ) ] ;
69780: LD_ADDR_VAR 0 2
69784: PUSH
69785: LD_VAR 0 3
69789: PUSH
69790: LD_INT 1
69792: PPUSH
69793: LD_VAR 0 3
69797: PPUSH
69798: CALL_OW 12
69802: ARRAY
69803: ST_TO_ADDR
// if Crawls ( un ) then
69804: LD_VAR 0 2
69808: PPUSH
69809: CALL_OW 318
69813: IFFALSE 69824
// ComWalk ( un ) ;
69815: LD_VAR 0 2
69819: PPUSH
69820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69824: LD_VAR 0 2
69828: PPUSH
69829: LD_INT 8
69831: PPUSH
69832: CALL_OW 336
// end ;
69836: PPOPN 3
69838: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69839: LD_EXP 61
69843: IFFALSE 69851
69845: PUSH
69846: LD_EXP 105
69850: AND
69851: IFFALSE 69995
69853: GO 69855
69855: DISABLE
69856: LD_INT 0
69858: PPUSH
69859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69860: LD_ADDR_VAR 0 2
69864: PUSH
69865: LD_INT 22
69867: PUSH
69868: LD_OWVAR 2
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 21
69879: PUSH
69880: LD_INT 2
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 34
69892: PUSH
69893: LD_INT 12
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 34
69902: PUSH
69903: LD_INT 51
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 34
69912: PUSH
69913: LD_INT 32
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: LIST
69930: PPUSH
69931: CALL_OW 69
69935: ST_TO_ADDR
// if not tmp then
69936: LD_VAR 0 2
69940: NOT
69941: IFFALSE 69945
// exit ;
69943: GO 69995
// for i in tmp do
69945: LD_ADDR_VAR 0 1
69949: PUSH
69950: LD_VAR 0 2
69954: PUSH
69955: FOR_IN
69956: IFFALSE 69993
// if GetCargo ( i , mat_artifact ) = 0 then
69958: LD_VAR 0 1
69962: PPUSH
69963: LD_INT 4
69965: PPUSH
69966: CALL_OW 289
69970: PUSH
69971: LD_INT 0
69973: EQUAL
69974: IFFALSE 69991
// SetCargo ( i , mat_siberit , 100 ) ;
69976: LD_VAR 0 1
69980: PPUSH
69981: LD_INT 3
69983: PPUSH
69984: LD_INT 100
69986: PPUSH
69987: CALL_OW 290
69991: GO 69955
69993: POP
69994: POP
// end ;
69995: PPOPN 2
69997: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69998: LD_EXP 61
70002: IFFALSE 70010
70004: PUSH
70005: LD_EXP 106
70009: AND
70010: IFFALSE 70193
70012: GO 70014
70014: DISABLE
70015: LD_INT 0
70017: PPUSH
70018: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70019: LD_ADDR_VAR 0 2
70023: PUSH
70024: LD_INT 22
70026: PUSH
70027: LD_OWVAR 2
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PPUSH
70036: CALL_OW 69
70040: ST_TO_ADDR
// if not tmp then
70041: LD_VAR 0 2
70045: NOT
70046: IFFALSE 70050
// exit ;
70048: GO 70193
// for i := 1 to 2 do
70050: LD_ADDR_VAR 0 1
70054: PUSH
70055: DOUBLE
70056: LD_INT 1
70058: DEC
70059: ST_TO_ADDR
70060: LD_INT 2
70062: PUSH
70063: FOR_TO
70064: IFFALSE 70191
// begin uc_side := your_side ;
70066: LD_ADDR_OWVAR 20
70070: PUSH
70071: LD_OWVAR 2
70075: ST_TO_ADDR
// uc_nation := nation_american ;
70076: LD_ADDR_OWVAR 21
70080: PUSH
70081: LD_INT 1
70083: ST_TO_ADDR
// vc_chassis := us_morphling ;
70084: LD_ADDR_OWVAR 37
70088: PUSH
70089: LD_INT 5
70091: ST_TO_ADDR
// vc_engine := engine_siberite ;
70092: LD_ADDR_OWVAR 39
70096: PUSH
70097: LD_INT 3
70099: ST_TO_ADDR
// vc_control := control_computer ;
70100: LD_ADDR_OWVAR 38
70104: PUSH
70105: LD_INT 3
70107: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70108: LD_ADDR_OWVAR 40
70112: PUSH
70113: LD_INT 10
70115: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70116: LD_VAR 0 2
70120: PUSH
70121: LD_INT 1
70123: ARRAY
70124: PPUSH
70125: CALL_OW 310
70129: NOT
70130: IFFALSE 70177
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70132: CALL_OW 45
70136: PPUSH
70137: LD_VAR 0 2
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: PPUSH
70146: CALL_OW 250
70150: PPUSH
70151: LD_VAR 0 2
70155: PUSH
70156: LD_INT 1
70158: ARRAY
70159: PPUSH
70160: CALL_OW 251
70164: PPUSH
70165: LD_INT 12
70167: PPUSH
70168: LD_INT 1
70170: PPUSH
70171: CALL_OW 50
70175: GO 70189
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70177: CALL_OW 45
70181: PPUSH
70182: LD_INT 1
70184: PPUSH
70185: CALL_OW 51
// end ;
70189: GO 70063
70191: POP
70192: POP
// end ;
70193: PPOPN 2
70195: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70196: LD_EXP 61
70200: IFFALSE 70208
70202: PUSH
70203: LD_EXP 107
70207: AND
70208: IFFALSE 70430
70210: GO 70212
70212: DISABLE
70213: LD_INT 0
70215: PPUSH
70216: PPUSH
70217: PPUSH
70218: PPUSH
70219: PPUSH
70220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70221: LD_ADDR_VAR 0 6
70225: PUSH
70226: LD_INT 22
70228: PUSH
70229: LD_OWVAR 2
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 21
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: LD_INT 23
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PPUSH
70270: CALL_OW 69
70274: ST_TO_ADDR
// if not tmp then
70275: LD_VAR 0 6
70279: NOT
70280: IFFALSE 70284
// exit ;
70282: GO 70430
// s1 := rand ( 1 , 4 ) ;
70284: LD_ADDR_VAR 0 2
70288: PUSH
70289: LD_INT 1
70291: PPUSH
70292: LD_INT 4
70294: PPUSH
70295: CALL_OW 12
70299: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70300: LD_ADDR_VAR 0 4
70304: PUSH
70305: LD_VAR 0 6
70309: PUSH
70310: LD_INT 1
70312: ARRAY
70313: PPUSH
70314: LD_VAR 0 2
70318: PPUSH
70319: CALL_OW 259
70323: ST_TO_ADDR
// if s1 = 1 then
70324: LD_VAR 0 2
70328: PUSH
70329: LD_INT 1
70331: EQUAL
70332: IFFALSE 70352
// s2 := rand ( 2 , 4 ) else
70334: LD_ADDR_VAR 0 3
70338: PUSH
70339: LD_INT 2
70341: PPUSH
70342: LD_INT 4
70344: PPUSH
70345: CALL_OW 12
70349: ST_TO_ADDR
70350: GO 70360
// s2 := 1 ;
70352: LD_ADDR_VAR 0 3
70356: PUSH
70357: LD_INT 1
70359: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70360: LD_ADDR_VAR 0 5
70364: PUSH
70365: LD_VAR 0 6
70369: PUSH
70370: LD_INT 1
70372: ARRAY
70373: PPUSH
70374: LD_VAR 0 3
70378: PPUSH
70379: CALL_OW 259
70383: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70384: LD_VAR 0 6
70388: PUSH
70389: LD_INT 1
70391: ARRAY
70392: PPUSH
70393: LD_VAR 0 2
70397: PPUSH
70398: LD_VAR 0 5
70402: PPUSH
70403: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70407: LD_VAR 0 6
70411: PUSH
70412: LD_INT 1
70414: ARRAY
70415: PPUSH
70416: LD_VAR 0 3
70420: PPUSH
70421: LD_VAR 0 4
70425: PPUSH
70426: CALL_OW 237
// end ;
70430: PPOPN 6
70432: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70433: LD_EXP 61
70437: IFFALSE 70445
70439: PUSH
70440: LD_EXP 108
70444: AND
70445: IFFALSE 70524
70447: GO 70449
70449: DISABLE
70450: LD_INT 0
70452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70453: LD_ADDR_VAR 0 1
70457: PUSH
70458: LD_INT 22
70460: PUSH
70461: LD_OWVAR 2
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 30
70472: PUSH
70473: LD_INT 3
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PPUSH
70484: CALL_OW 69
70488: ST_TO_ADDR
// if not tmp then
70489: LD_VAR 0 1
70493: NOT
70494: IFFALSE 70498
// exit ;
70496: GO 70524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70498: LD_VAR 0 1
70502: PUSH
70503: LD_INT 1
70505: PPUSH
70506: LD_VAR 0 1
70510: PPUSH
70511: CALL_OW 12
70515: ARRAY
70516: PPUSH
70517: LD_INT 1
70519: PPUSH
70520: CALL_OW 234
// end ;
70524: PPOPN 1
70526: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70527: LD_EXP 61
70531: IFFALSE 70539
70533: PUSH
70534: LD_EXP 109
70538: AND
70539: IFFALSE 70651
70541: GO 70543
70543: DISABLE
70544: LD_INT 0
70546: PPUSH
70547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70548: LD_ADDR_VAR 0 2
70552: PUSH
70553: LD_INT 22
70555: PUSH
70556: LD_OWVAR 2
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 2
70567: PUSH
70568: LD_INT 30
70570: PUSH
70571: LD_INT 27
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 30
70580: PUSH
70581: LD_INT 26
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 30
70590: PUSH
70591: LD_INT 28
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PPUSH
70608: CALL_OW 69
70612: ST_TO_ADDR
// if not tmp then
70613: LD_VAR 0 2
70617: NOT
70618: IFFALSE 70622
// exit ;
70620: GO 70651
// for i in tmp do
70622: LD_ADDR_VAR 0 1
70626: PUSH
70627: LD_VAR 0 2
70631: PUSH
70632: FOR_IN
70633: IFFALSE 70649
// SetLives ( i , 1 ) ;
70635: LD_VAR 0 1
70639: PPUSH
70640: LD_INT 1
70642: PPUSH
70643: CALL_OW 234
70647: GO 70632
70649: POP
70650: POP
// end ;
70651: PPOPN 2
70653: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70654: LD_EXP 61
70658: IFFALSE 70666
70660: PUSH
70661: LD_EXP 110
70665: AND
70666: IFFALSE 70953
70668: GO 70670
70670: DISABLE
70671: LD_INT 0
70673: PPUSH
70674: PPUSH
70675: PPUSH
// begin i := rand ( 1 , 7 ) ;
70676: LD_ADDR_VAR 0 1
70680: PUSH
70681: LD_INT 1
70683: PPUSH
70684: LD_INT 7
70686: PPUSH
70687: CALL_OW 12
70691: ST_TO_ADDR
// case i of 1 :
70692: LD_VAR 0 1
70696: PUSH
70697: LD_INT 1
70699: DOUBLE
70700: EQUAL
70701: IFTRUE 70705
70703: GO 70715
70705: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70706: LD_STRING earthquake(getX(game), 0, 32)
70708: PPUSH
70709: CALL_OW 559
70713: GO 70953
70715: LD_INT 2
70717: DOUBLE
70718: EQUAL
70719: IFTRUE 70723
70721: GO 70737
70723: POP
// begin ToLua ( displayStucuk(); ) ;
70724: LD_STRING displayStucuk();
70726: PPUSH
70727: CALL_OW 559
// ResetFog ;
70731: CALL_OW 335
// end ; 3 :
70735: GO 70953
70737: LD_INT 3
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70745
70743: GO 70849
70745: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70746: LD_ADDR_VAR 0 2
70750: PUSH
70751: LD_INT 22
70753: PUSH
70754: LD_OWVAR 2
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 25
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PPUSH
70777: CALL_OW 69
70781: ST_TO_ADDR
// if not tmp then
70782: LD_VAR 0 2
70786: NOT
70787: IFFALSE 70791
// exit ;
70789: GO 70953
// un := tmp [ rand ( 1 , tmp ) ] ;
70791: LD_ADDR_VAR 0 3
70795: PUSH
70796: LD_VAR 0 2
70800: PUSH
70801: LD_INT 1
70803: PPUSH
70804: LD_VAR 0 2
70808: PPUSH
70809: CALL_OW 12
70813: ARRAY
70814: ST_TO_ADDR
// if Crawls ( un ) then
70815: LD_VAR 0 3
70819: PPUSH
70820: CALL_OW 318
70824: IFFALSE 70835
// ComWalk ( un ) ;
70826: LD_VAR 0 3
70830: PPUSH
70831: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70835: LD_VAR 0 3
70839: PPUSH
70840: LD_INT 8
70842: PPUSH
70843: CALL_OW 336
// end ; 4 :
70847: GO 70953
70849: LD_INT 4
70851: DOUBLE
70852: EQUAL
70853: IFTRUE 70857
70855: GO 70931
70857: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70858: LD_ADDR_VAR 0 2
70862: PUSH
70863: LD_INT 22
70865: PUSH
70866: LD_OWVAR 2
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 30
70877: PUSH
70878: LD_INT 29
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PPUSH
70889: CALL_OW 69
70893: ST_TO_ADDR
// if not tmp then
70894: LD_VAR 0 2
70898: NOT
70899: IFFALSE 70903
// exit ;
70901: GO 70953
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70903: LD_VAR 0 2
70907: PUSH
70908: LD_INT 1
70910: ARRAY
70911: PPUSH
70912: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70916: LD_VAR 0 2
70920: PUSH
70921: LD_INT 1
70923: ARRAY
70924: PPUSH
70925: CALL_OW 65
// end ; 5 .. 7 :
70929: GO 70953
70931: LD_INT 5
70933: DOUBLE
70934: GREATEREQUAL
70935: IFFALSE 70943
70937: LD_INT 7
70939: DOUBLE
70940: LESSEQUAL
70941: IFTRUE 70945
70943: GO 70952
70945: POP
// StreamSibBomb ; end ;
70946: CALL 67134 0 0
70950: GO 70953
70952: POP
// end ;
70953: PPOPN 3
70955: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70956: LD_EXP 61
70960: IFFALSE 70968
70962: PUSH
70963: LD_EXP 111
70967: AND
70968: IFFALSE 71124
70970: GO 70972
70972: DISABLE
70973: LD_INT 0
70975: PPUSH
70976: PPUSH
70977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70978: LD_ADDR_VAR 0 2
70982: PUSH
70983: LD_INT 81
70985: PUSH
70986: LD_OWVAR 2
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 2
70997: PUSH
70998: LD_INT 21
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 21
71010: PUSH
71011: LD_INT 2
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PPUSH
71027: CALL_OW 69
71031: ST_TO_ADDR
// if not tmp then
71032: LD_VAR 0 2
71036: NOT
71037: IFFALSE 71041
// exit ;
71039: GO 71124
// p := 0 ;
71041: LD_ADDR_VAR 0 3
71045: PUSH
71046: LD_INT 0
71048: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71049: LD_INT 35
71051: PPUSH
71052: CALL_OW 67
// p := p + 1 ;
71056: LD_ADDR_VAR 0 3
71060: PUSH
71061: LD_VAR 0 3
71065: PUSH
71066: LD_INT 1
71068: PLUS
71069: ST_TO_ADDR
// for i in tmp do
71070: LD_ADDR_VAR 0 1
71074: PUSH
71075: LD_VAR 0 2
71079: PUSH
71080: FOR_IN
71081: IFFALSE 71112
// if GetLives ( i ) < 1000 then
71083: LD_VAR 0 1
71087: PPUSH
71088: CALL_OW 256
71092: PUSH
71093: LD_INT 1000
71095: LESS
71096: IFFALSE 71110
// SetLives ( i , 1000 ) ;
71098: LD_VAR 0 1
71102: PPUSH
71103: LD_INT 1000
71105: PPUSH
71106: CALL_OW 234
71110: GO 71080
71112: POP
71113: POP
// until p > 20 ;
71114: LD_VAR 0 3
71118: PUSH
71119: LD_INT 20
71121: GREATER
71122: IFFALSE 71049
// end ;
71124: PPOPN 3
71126: END
// every 0 0$1 trigger StreamModeActive and sTime do
71127: LD_EXP 61
71131: IFFALSE 71139
71133: PUSH
71134: LD_EXP 112
71138: AND
71139: IFFALSE 71174
71141: GO 71143
71143: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71144: LD_INT 28
71146: PPUSH
71147: LD_OWVAR 2
71151: PPUSH
71152: LD_INT 2
71154: PPUSH
71155: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71159: LD_INT 30
71161: PPUSH
71162: LD_OWVAR 2
71166: PPUSH
71167: LD_INT 2
71169: PPUSH
71170: CALL_OW 322
// end ;
71174: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71175: LD_EXP 61
71179: IFFALSE 71187
71181: PUSH
71182: LD_EXP 113
71186: AND
71187: IFFALSE 71308
71189: GO 71191
71191: DISABLE
71192: LD_INT 0
71194: PPUSH
71195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71196: LD_ADDR_VAR 0 2
71200: PUSH
71201: LD_INT 22
71203: PUSH
71204: LD_OWVAR 2
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 21
71215: PUSH
71216: LD_INT 1
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 3
71225: PUSH
71226: LD_INT 23
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: PPUSH
71245: CALL_OW 69
71249: ST_TO_ADDR
// if not tmp then
71250: LD_VAR 0 2
71254: NOT
71255: IFFALSE 71259
// exit ;
71257: GO 71308
// for i in tmp do
71259: LD_ADDR_VAR 0 1
71263: PUSH
71264: LD_VAR 0 2
71268: PUSH
71269: FOR_IN
71270: IFFALSE 71306
// begin if Crawls ( i ) then
71272: LD_VAR 0 1
71276: PPUSH
71277: CALL_OW 318
71281: IFFALSE 71292
// ComWalk ( i ) ;
71283: LD_VAR 0 1
71287: PPUSH
71288: CALL_OW 138
// SetClass ( i , 2 ) ;
71292: LD_VAR 0 1
71296: PPUSH
71297: LD_INT 2
71299: PPUSH
71300: CALL_OW 336
// end ;
71304: GO 71269
71306: POP
71307: POP
// end ;
71308: PPOPN 2
71310: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71311: LD_EXP 61
71315: IFFALSE 71323
71317: PUSH
71318: LD_EXP 114
71322: AND
71323: IFFALSE 71613
71325: GO 71327
71327: DISABLE
71328: LD_INT 0
71330: PPUSH
71331: PPUSH
71332: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71333: LD_OWVAR 2
71337: PPUSH
71338: LD_INT 9
71340: PPUSH
71341: LD_INT 1
71343: PPUSH
71344: LD_INT 1
71346: PPUSH
71347: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71351: LD_INT 9
71353: PPUSH
71354: LD_OWVAR 2
71358: PPUSH
71359: CALL_OW 343
// uc_side := 9 ;
71363: LD_ADDR_OWVAR 20
71367: PUSH
71368: LD_INT 9
71370: ST_TO_ADDR
// uc_nation := 2 ;
71371: LD_ADDR_OWVAR 21
71375: PUSH
71376: LD_INT 2
71378: ST_TO_ADDR
// hc_name := Dark Warrior ;
71379: LD_ADDR_OWVAR 26
71383: PUSH
71384: LD_STRING Dark Warrior
71386: ST_TO_ADDR
// hc_gallery :=  ;
71387: LD_ADDR_OWVAR 33
71391: PUSH
71392: LD_STRING 
71394: ST_TO_ADDR
// hc_noskilllimit := true ;
71395: LD_ADDR_OWVAR 76
71399: PUSH
71400: LD_INT 1
71402: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71403: LD_ADDR_OWVAR 31
71407: PUSH
71408: LD_INT 30
71410: PUSH
71411: LD_INT 30
71413: PUSH
71414: LD_INT 30
71416: PUSH
71417: LD_INT 30
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: ST_TO_ADDR
// un := CreateHuman ;
71426: LD_ADDR_VAR 0 3
71430: PUSH
71431: CALL_OW 44
71435: ST_TO_ADDR
// hc_noskilllimit := false ;
71436: LD_ADDR_OWVAR 76
71440: PUSH
71441: LD_INT 0
71443: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71444: LD_VAR 0 3
71448: PPUSH
71449: LD_INT 1
71451: PPUSH
71452: CALL_OW 51
// ToLua ( playRanger() ) ;
71456: LD_STRING playRanger()
71458: PPUSH
71459: CALL_OW 559
// p := 0 ;
71463: LD_ADDR_VAR 0 2
71467: PUSH
71468: LD_INT 0
71470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71471: LD_INT 35
71473: PPUSH
71474: CALL_OW 67
// p := p + 1 ;
71478: LD_ADDR_VAR 0 2
71482: PUSH
71483: LD_VAR 0 2
71487: PUSH
71488: LD_INT 1
71490: PLUS
71491: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71492: LD_VAR 0 3
71496: PPUSH
71497: CALL_OW 256
71501: PUSH
71502: LD_INT 1000
71504: LESS
71505: IFFALSE 71519
// SetLives ( un , 1000 ) ;
71507: LD_VAR 0 3
71511: PPUSH
71512: LD_INT 1000
71514: PPUSH
71515: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71519: LD_VAR 0 3
71523: PPUSH
71524: LD_INT 81
71526: PUSH
71527: LD_OWVAR 2
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 91
71538: PUSH
71539: LD_VAR 0 3
71543: PUSH
71544: LD_INT 30
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: LIST
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PPUSH
71556: CALL_OW 69
71560: PPUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: CALL_OW 74
71570: PPUSH
71571: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71575: LD_VAR 0 2
71579: PUSH
71580: LD_INT 80
71582: GREATER
71583: IFTRUE 71596
71585: PUSH
71586: LD_VAR 0 3
71590: PPUSH
71591: CALL_OW 301
71595: OR
71596: IFFALSE 71471
// if un then
71598: LD_VAR 0 3
71602: IFFALSE 71613
// RemoveUnit ( un ) ;
71604: LD_VAR 0 3
71608: PPUSH
71609: CALL_OW 64
// end ;
71613: PPOPN 3
71615: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71616: LD_EXP 115
71620: IFFALSE 71736
71622: GO 71624
71624: DISABLE
71625: LD_INT 0
71627: PPUSH
71628: PPUSH
71629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71630: LD_ADDR_VAR 0 2
71634: PUSH
71635: LD_INT 81
71637: PUSH
71638: LD_OWVAR 2
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 21
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PPUSH
71661: CALL_OW 69
71665: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71666: LD_STRING playComputer()
71668: PPUSH
71669: CALL_OW 559
// if not tmp then
71673: LD_VAR 0 2
71677: NOT
71678: IFFALSE 71682
// exit ;
71680: GO 71736
// for i in tmp do
71682: LD_ADDR_VAR 0 1
71686: PUSH
71687: LD_VAR 0 2
71691: PUSH
71692: FOR_IN
71693: IFFALSE 71734
// for j := 1 to 4 do
71695: LD_ADDR_VAR 0 3
71699: PUSH
71700: DOUBLE
71701: LD_INT 1
71703: DEC
71704: ST_TO_ADDR
71705: LD_INT 4
71707: PUSH
71708: FOR_TO
71709: IFFALSE 71730
// SetSkill ( i , j , 10 ) ;
71711: LD_VAR 0 1
71715: PPUSH
71716: LD_VAR 0 3
71720: PPUSH
71721: LD_INT 10
71723: PPUSH
71724: CALL_OW 237
71728: GO 71708
71730: POP
71731: POP
71732: GO 71692
71734: POP
71735: POP
// end ;
71736: PPOPN 3
71738: END
// every 0 0$1 trigger s30 do var i , tmp ;
71739: LD_EXP 116
71743: IFFALSE 71812
71745: GO 71747
71747: DISABLE
71748: LD_INT 0
71750: PPUSH
71751: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: LD_INT 22
71759: PUSH
71760: LD_OWVAR 2
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PPUSH
71769: CALL_OW 69
71773: ST_TO_ADDR
// if not tmp then
71774: LD_VAR 0 2
71778: NOT
71779: IFFALSE 71783
// exit ;
71781: GO 71812
// for i in tmp do
71783: LD_ADDR_VAR 0 1
71787: PUSH
71788: LD_VAR 0 2
71792: PUSH
71793: FOR_IN
71794: IFFALSE 71810
// SetLives ( i , 300 ) ;
71796: LD_VAR 0 1
71800: PPUSH
71801: LD_INT 300
71803: PPUSH
71804: CALL_OW 234
71808: GO 71793
71810: POP
71811: POP
// end ;
71812: PPOPN 2
71814: END
// every 0 0$1 trigger s60 do var i , tmp ;
71815: LD_EXP 117
71819: IFFALSE 71888
71821: GO 71823
71823: DISABLE
71824: LD_INT 0
71826: PPUSH
71827: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71828: LD_ADDR_VAR 0 2
71832: PUSH
71833: LD_INT 22
71835: PUSH
71836: LD_OWVAR 2
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PPUSH
71845: CALL_OW 69
71849: ST_TO_ADDR
// if not tmp then
71850: LD_VAR 0 2
71854: NOT
71855: IFFALSE 71859
// exit ;
71857: GO 71888
// for i in tmp do
71859: LD_ADDR_VAR 0 1
71863: PUSH
71864: LD_VAR 0 2
71868: PUSH
71869: FOR_IN
71870: IFFALSE 71886
// SetLives ( i , 600 ) ;
71872: LD_VAR 0 1
71876: PPUSH
71877: LD_INT 600
71879: PPUSH
71880: CALL_OW 234
71884: GO 71869
71886: POP
71887: POP
// end ;
71888: PPOPN 2
71890: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71891: LD_INT 0
71893: PPUSH
// case cmd of 301 :
71894: LD_VAR 0 1
71898: PUSH
71899: LD_INT 301
71901: DOUBLE
71902: EQUAL
71903: IFTRUE 71907
71905: GO 71939
71907: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71908: LD_VAR 0 6
71912: PPUSH
71913: LD_VAR 0 7
71917: PPUSH
71918: LD_VAR 0 8
71922: PPUSH
71923: LD_VAR 0 4
71927: PPUSH
71928: LD_VAR 0 5
71932: PPUSH
71933: CALL 73152 0 5
71937: GO 72060
71939: LD_INT 302
71941: DOUBLE
71942: EQUAL
71943: IFTRUE 71947
71945: GO 71984
71947: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71948: LD_VAR 0 6
71952: PPUSH
71953: LD_VAR 0 7
71957: PPUSH
71958: LD_VAR 0 8
71962: PPUSH
71963: LD_VAR 0 9
71967: PPUSH
71968: LD_VAR 0 4
71972: PPUSH
71973: LD_VAR 0 5
71977: PPUSH
71978: CALL 73243 0 6
71982: GO 72060
71984: LD_INT 303
71986: DOUBLE
71987: EQUAL
71988: IFTRUE 71992
71990: GO 72029
71992: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71993: LD_VAR 0 6
71997: PPUSH
71998: LD_VAR 0 7
72002: PPUSH
72003: LD_VAR 0 8
72007: PPUSH
72008: LD_VAR 0 9
72012: PPUSH
72013: LD_VAR 0 4
72017: PPUSH
72018: LD_VAR 0 5
72022: PPUSH
72023: CALL 72065 0 6
72027: GO 72060
72029: LD_INT 304
72031: DOUBLE
72032: EQUAL
72033: IFTRUE 72037
72035: GO 72059
72037: POP
// hHackTeleport ( unit , x , y ) ; end ;
72038: LD_VAR 0 2
72042: PPUSH
72043: LD_VAR 0 4
72047: PPUSH
72048: LD_VAR 0 5
72052: PPUSH
72053: CALL 73836 0 3
72057: GO 72060
72059: POP
// end ;
72060: LD_VAR 0 12
72064: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72065: LD_INT 0
72067: PPUSH
72068: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72069: LD_VAR 0 1
72073: PUSH
72074: LD_INT 1
72076: LESS
72077: IFTRUE 72089
72079: PUSH
72080: LD_VAR 0 1
72084: PUSH
72085: LD_INT 3
72087: GREATER
72088: OR
72089: IFTRUE 72107
72091: PUSH
72092: LD_VAR 0 5
72096: PPUSH
72097: LD_VAR 0 6
72101: PPUSH
72102: CALL_OW 428
72106: OR
72107: IFFALSE 72111
// exit ;
72109: GO 72839
// uc_side := your_side ;
72111: LD_ADDR_OWVAR 20
72115: PUSH
72116: LD_OWVAR 2
72120: ST_TO_ADDR
// uc_nation := nation ;
72121: LD_ADDR_OWVAR 21
72125: PUSH
72126: LD_VAR 0 1
72130: ST_TO_ADDR
// bc_level = 1 ;
72131: LD_ADDR_OWVAR 43
72135: PUSH
72136: LD_INT 1
72138: ST_TO_ADDR
// case btype of 1 :
72139: LD_VAR 0 2
72143: PUSH
72144: LD_INT 1
72146: DOUBLE
72147: EQUAL
72148: IFTRUE 72152
72150: GO 72163
72152: POP
// bc_type := b_depot ; 2 :
72153: LD_ADDR_OWVAR 42
72157: PUSH
72158: LD_INT 0
72160: ST_TO_ADDR
72161: GO 72783
72163: LD_INT 2
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72171
72169: GO 72182
72171: POP
// bc_type := b_warehouse ; 3 :
72172: LD_ADDR_OWVAR 42
72176: PUSH
72177: LD_INT 1
72179: ST_TO_ADDR
72180: GO 72783
72182: LD_INT 3
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72190
72188: GO 72201
72190: POP
// bc_type := b_lab ; 4 .. 9 :
72191: LD_ADDR_OWVAR 42
72195: PUSH
72196: LD_INT 6
72198: ST_TO_ADDR
72199: GO 72783
72201: LD_INT 4
72203: DOUBLE
72204: GREATEREQUAL
72205: IFFALSE 72213
72207: LD_INT 9
72209: DOUBLE
72210: LESSEQUAL
72211: IFTRUE 72215
72213: GO 72275
72215: POP
// begin bc_type := b_lab_half ;
72216: LD_ADDR_OWVAR 42
72220: PUSH
72221: LD_INT 7
72223: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72224: LD_ADDR_OWVAR 44
72228: PUSH
72229: LD_INT 10
72231: PUSH
72232: LD_INT 11
72234: PUSH
72235: LD_INT 12
72237: PUSH
72238: LD_INT 15
72240: PUSH
72241: LD_INT 14
72243: PUSH
72244: LD_INT 13
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 2
72259: PUSH
72260: LD_INT 3
72262: MINUS
72263: ARRAY
72264: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72265: LD_ADDR_OWVAR 45
72269: PUSH
72270: LD_INT 9
72272: ST_TO_ADDR
// end ; 10 .. 13 :
72273: GO 72783
72275: LD_INT 10
72277: DOUBLE
72278: GREATEREQUAL
72279: IFFALSE 72287
72281: LD_INT 13
72283: DOUBLE
72284: LESSEQUAL
72285: IFTRUE 72289
72287: GO 72366
72289: POP
// begin bc_type := b_lab_full ;
72290: LD_ADDR_OWVAR 42
72294: PUSH
72295: LD_INT 8
72297: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72298: LD_ADDR_OWVAR 44
72302: PUSH
72303: LD_INT 10
72305: PUSH
72306: LD_INT 12
72308: PUSH
72309: LD_INT 14
72311: PUSH
72312: LD_INT 13
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_INT 9
72328: MINUS
72329: ARRAY
72330: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72331: LD_ADDR_OWVAR 45
72335: PUSH
72336: LD_INT 11
72338: PUSH
72339: LD_INT 15
72341: PUSH
72342: LD_INT 12
72344: PUSH
72345: LD_INT 15
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: PUSH
72354: LD_VAR 0 2
72358: PUSH
72359: LD_INT 9
72361: MINUS
72362: ARRAY
72363: ST_TO_ADDR
// end ; 14 :
72364: GO 72783
72366: LD_INT 14
72368: DOUBLE
72369: EQUAL
72370: IFTRUE 72374
72372: GO 72385
72374: POP
// bc_type := b_workshop ; 15 :
72375: LD_ADDR_OWVAR 42
72379: PUSH
72380: LD_INT 2
72382: ST_TO_ADDR
72383: GO 72783
72385: LD_INT 15
72387: DOUBLE
72388: EQUAL
72389: IFTRUE 72393
72391: GO 72404
72393: POP
// bc_type := b_factory ; 16 :
72394: LD_ADDR_OWVAR 42
72398: PUSH
72399: LD_INT 3
72401: ST_TO_ADDR
72402: GO 72783
72404: LD_INT 16
72406: DOUBLE
72407: EQUAL
72408: IFTRUE 72412
72410: GO 72423
72412: POP
// bc_type := b_ext_gun ; 17 :
72413: LD_ADDR_OWVAR 42
72417: PUSH
72418: LD_INT 17
72420: ST_TO_ADDR
72421: GO 72783
72423: LD_INT 17
72425: DOUBLE
72426: EQUAL
72427: IFTRUE 72431
72429: GO 72459
72431: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72432: LD_ADDR_OWVAR 42
72436: PUSH
72437: LD_INT 19
72439: PUSH
72440: LD_INT 23
72442: PUSH
72443: LD_INT 19
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: LIST
72450: PUSH
72451: LD_VAR 0 1
72455: ARRAY
72456: ST_TO_ADDR
72457: GO 72783
72459: LD_INT 18
72461: DOUBLE
72462: EQUAL
72463: IFTRUE 72467
72465: GO 72478
72467: POP
// bc_type := b_ext_radar ; 19 :
72468: LD_ADDR_OWVAR 42
72472: PUSH
72473: LD_INT 20
72475: ST_TO_ADDR
72476: GO 72783
72478: LD_INT 19
72480: DOUBLE
72481: EQUAL
72482: IFTRUE 72486
72484: GO 72497
72486: POP
// bc_type := b_ext_radio ; 20 :
72487: LD_ADDR_OWVAR 42
72491: PUSH
72492: LD_INT 22
72494: ST_TO_ADDR
72495: GO 72783
72497: LD_INT 20
72499: DOUBLE
72500: EQUAL
72501: IFTRUE 72505
72503: GO 72516
72505: POP
// bc_type := b_ext_siberium ; 21 :
72506: LD_ADDR_OWVAR 42
72510: PUSH
72511: LD_INT 21
72513: ST_TO_ADDR
72514: GO 72783
72516: LD_INT 21
72518: DOUBLE
72519: EQUAL
72520: IFTRUE 72524
72522: GO 72535
72524: POP
// bc_type := b_ext_computer ; 22 :
72525: LD_ADDR_OWVAR 42
72529: PUSH
72530: LD_INT 24
72532: ST_TO_ADDR
72533: GO 72783
72535: LD_INT 22
72537: DOUBLE
72538: EQUAL
72539: IFTRUE 72543
72541: GO 72554
72543: POP
// bc_type := b_ext_track ; 23 :
72544: LD_ADDR_OWVAR 42
72548: PUSH
72549: LD_INT 16
72551: ST_TO_ADDR
72552: GO 72783
72554: LD_INT 23
72556: DOUBLE
72557: EQUAL
72558: IFTRUE 72562
72560: GO 72573
72562: POP
// bc_type := b_ext_laser ; 24 :
72563: LD_ADDR_OWVAR 42
72567: PUSH
72568: LD_INT 25
72570: ST_TO_ADDR
72571: GO 72783
72573: LD_INT 24
72575: DOUBLE
72576: EQUAL
72577: IFTRUE 72581
72579: GO 72592
72581: POP
// bc_type := b_control_tower ; 25 :
72582: LD_ADDR_OWVAR 42
72586: PUSH
72587: LD_INT 36
72589: ST_TO_ADDR
72590: GO 72783
72592: LD_INT 25
72594: DOUBLE
72595: EQUAL
72596: IFTRUE 72600
72598: GO 72611
72600: POP
// bc_type := b_breastwork ; 26 :
72601: LD_ADDR_OWVAR 42
72605: PUSH
72606: LD_INT 31
72608: ST_TO_ADDR
72609: GO 72783
72611: LD_INT 26
72613: DOUBLE
72614: EQUAL
72615: IFTRUE 72619
72617: GO 72630
72619: POP
// bc_type := b_bunker ; 27 :
72620: LD_ADDR_OWVAR 42
72624: PUSH
72625: LD_INT 32
72627: ST_TO_ADDR
72628: GO 72783
72630: LD_INT 27
72632: DOUBLE
72633: EQUAL
72634: IFTRUE 72638
72636: GO 72649
72638: POP
// bc_type := b_turret ; 28 :
72639: LD_ADDR_OWVAR 42
72643: PUSH
72644: LD_INT 33
72646: ST_TO_ADDR
72647: GO 72783
72649: LD_INT 28
72651: DOUBLE
72652: EQUAL
72653: IFTRUE 72657
72655: GO 72668
72657: POP
// bc_type := b_armoury ; 29 :
72658: LD_ADDR_OWVAR 42
72662: PUSH
72663: LD_INT 4
72665: ST_TO_ADDR
72666: GO 72783
72668: LD_INT 29
72670: DOUBLE
72671: EQUAL
72672: IFTRUE 72676
72674: GO 72687
72676: POP
// bc_type := b_barracks ; 30 :
72677: LD_ADDR_OWVAR 42
72681: PUSH
72682: LD_INT 5
72684: ST_TO_ADDR
72685: GO 72783
72687: LD_INT 30
72689: DOUBLE
72690: EQUAL
72691: IFTRUE 72695
72693: GO 72706
72695: POP
// bc_type := b_solar_power ; 31 :
72696: LD_ADDR_OWVAR 42
72700: PUSH
72701: LD_INT 27
72703: ST_TO_ADDR
72704: GO 72783
72706: LD_INT 31
72708: DOUBLE
72709: EQUAL
72710: IFTRUE 72714
72712: GO 72725
72714: POP
// bc_type := b_oil_power ; 32 :
72715: LD_ADDR_OWVAR 42
72719: PUSH
72720: LD_INT 26
72722: ST_TO_ADDR
72723: GO 72783
72725: LD_INT 32
72727: DOUBLE
72728: EQUAL
72729: IFTRUE 72733
72731: GO 72744
72733: POP
// bc_type := b_siberite_power ; 33 :
72734: LD_ADDR_OWVAR 42
72738: PUSH
72739: LD_INT 28
72741: ST_TO_ADDR
72742: GO 72783
72744: LD_INT 33
72746: DOUBLE
72747: EQUAL
72748: IFTRUE 72752
72750: GO 72763
72752: POP
// bc_type := b_oil_mine ; 34 :
72753: LD_ADDR_OWVAR 42
72757: PUSH
72758: LD_INT 29
72760: ST_TO_ADDR
72761: GO 72783
72763: LD_INT 34
72765: DOUBLE
72766: EQUAL
72767: IFTRUE 72771
72769: GO 72782
72771: POP
// bc_type := b_siberite_mine ; end ;
72772: LD_ADDR_OWVAR 42
72776: PUSH
72777: LD_INT 30
72779: ST_TO_ADDR
72780: GO 72783
72782: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72783: LD_ADDR_VAR 0 8
72787: PUSH
72788: LD_VAR 0 5
72792: PPUSH
72793: LD_VAR 0 6
72797: PPUSH
72798: LD_VAR 0 3
72802: PPUSH
72803: CALL_OW 47
72807: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72808: LD_OWVAR 42
72812: PUSH
72813: LD_INT 32
72815: PUSH
72816: LD_INT 33
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: IN
72823: IFFALSE 72839
// PlaceWeaponTurret ( b , weapon ) ;
72825: LD_VAR 0 8
72829: PPUSH
72830: LD_VAR 0 4
72834: PPUSH
72835: CALL_OW 431
// end ;
72839: LD_VAR 0 7
72843: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72844: LD_INT 0
72846: PPUSH
72847: PPUSH
72848: PPUSH
72849: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72850: LD_ADDR_VAR 0 4
72854: PUSH
72855: LD_INT 22
72857: PUSH
72858: LD_OWVAR 2
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 2
72869: PUSH
72870: LD_INT 30
72872: PUSH
72873: LD_INT 0
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 30
72882: PUSH
72883: LD_INT 1
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: LIST
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PPUSH
72899: CALL_OW 69
72903: ST_TO_ADDR
// if not tmp then
72904: LD_VAR 0 4
72908: NOT
72909: IFFALSE 72913
// exit ;
72911: GO 72972
// for i in tmp do
72913: LD_ADDR_VAR 0 2
72917: PUSH
72918: LD_VAR 0 4
72922: PUSH
72923: FOR_IN
72924: IFFALSE 72970
// for j = 1 to 3 do
72926: LD_ADDR_VAR 0 3
72930: PUSH
72931: DOUBLE
72932: LD_INT 1
72934: DEC
72935: ST_TO_ADDR
72936: LD_INT 3
72938: PUSH
72939: FOR_TO
72940: IFFALSE 72966
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72942: LD_VAR 0 2
72946: PPUSH
72947: CALL_OW 274
72951: PPUSH
72952: LD_VAR 0 3
72956: PPUSH
72957: LD_INT 99999
72959: PPUSH
72960: CALL_OW 277
72964: GO 72939
72966: POP
72967: POP
72968: GO 72923
72970: POP
72971: POP
// end ;
72972: LD_VAR 0 1
72976: RET
// export function hHackSetLevel10 ; var i , j ; begin
72977: LD_INT 0
72979: PPUSH
72980: PPUSH
72981: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72982: LD_ADDR_VAR 0 2
72986: PUSH
72987: LD_INT 21
72989: PUSH
72990: LD_INT 1
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PPUSH
72997: CALL_OW 69
73001: PUSH
73002: FOR_IN
73003: IFFALSE 73055
// if IsSelected ( i ) then
73005: LD_VAR 0 2
73009: PPUSH
73010: CALL_OW 306
73014: IFFALSE 73053
// begin for j := 1 to 4 do
73016: LD_ADDR_VAR 0 3
73020: PUSH
73021: DOUBLE
73022: LD_INT 1
73024: DEC
73025: ST_TO_ADDR
73026: LD_INT 4
73028: PUSH
73029: FOR_TO
73030: IFFALSE 73051
// SetSkill ( i , j , 10 ) ;
73032: LD_VAR 0 2
73036: PPUSH
73037: LD_VAR 0 3
73041: PPUSH
73042: LD_INT 10
73044: PPUSH
73045: CALL_OW 237
73049: GO 73029
73051: POP
73052: POP
// end ;
73053: GO 73002
73055: POP
73056: POP
// end ;
73057: LD_VAR 0 1
73061: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73062: LD_INT 0
73064: PPUSH
73065: PPUSH
73066: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73067: LD_ADDR_VAR 0 2
73071: PUSH
73072: LD_INT 22
73074: PUSH
73075: LD_OWVAR 2
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: LD_INT 21
73086: PUSH
73087: LD_INT 1
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PPUSH
73098: CALL_OW 69
73102: PUSH
73103: FOR_IN
73104: IFFALSE 73145
// begin for j := 1 to 4 do
73106: LD_ADDR_VAR 0 3
73110: PUSH
73111: DOUBLE
73112: LD_INT 1
73114: DEC
73115: ST_TO_ADDR
73116: LD_INT 4
73118: PUSH
73119: FOR_TO
73120: IFFALSE 73141
// SetSkill ( i , j , 10 ) ;
73122: LD_VAR 0 2
73126: PPUSH
73127: LD_VAR 0 3
73131: PPUSH
73132: LD_INT 10
73134: PPUSH
73135: CALL_OW 237
73139: GO 73119
73141: POP
73142: POP
// end ;
73143: GO 73103
73145: POP
73146: POP
// end ;
73147: LD_VAR 0 1
73151: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73152: LD_INT 0
73154: PPUSH
// uc_side := your_side ;
73155: LD_ADDR_OWVAR 20
73159: PUSH
73160: LD_OWVAR 2
73164: ST_TO_ADDR
// uc_nation := nation ;
73165: LD_ADDR_OWVAR 21
73169: PUSH
73170: LD_VAR 0 1
73174: ST_TO_ADDR
// InitHc ;
73175: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73179: LD_INT 0
73181: PPUSH
73182: LD_VAR 0 2
73186: PPUSH
73187: LD_VAR 0 3
73191: PPUSH
73192: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73196: LD_VAR 0 4
73200: PPUSH
73201: LD_VAR 0 5
73205: PPUSH
73206: CALL_OW 428
73210: PUSH
73211: LD_INT 0
73213: EQUAL
73214: IFFALSE 73238
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73216: CALL_OW 44
73220: PPUSH
73221: LD_VAR 0 4
73225: PPUSH
73226: LD_VAR 0 5
73230: PPUSH
73231: LD_INT 1
73233: PPUSH
73234: CALL_OW 48
// end ;
73238: LD_VAR 0 6
73242: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73243: LD_INT 0
73245: PPUSH
73246: PPUSH
// uc_side := your_side ;
73247: LD_ADDR_OWVAR 20
73251: PUSH
73252: LD_OWVAR 2
73256: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73257: LD_VAR 0 1
73261: PUSH
73262: LD_INT 1
73264: PUSH
73265: LD_INT 2
73267: PUSH
73268: LD_INT 3
73270: PUSH
73271: LD_INT 4
73273: PUSH
73274: LD_INT 5
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: IN
73284: IFFALSE 73296
// uc_nation := nation_american else
73286: LD_ADDR_OWVAR 21
73290: PUSH
73291: LD_INT 1
73293: ST_TO_ADDR
73294: GO 73339
// if chassis in [ 11 , 12 , 13 , 14 ] then
73296: LD_VAR 0 1
73300: PUSH
73301: LD_INT 11
73303: PUSH
73304: LD_INT 12
73306: PUSH
73307: LD_INT 13
73309: PUSH
73310: LD_INT 14
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: IN
73319: IFFALSE 73331
// uc_nation := nation_arabian else
73321: LD_ADDR_OWVAR 21
73325: PUSH
73326: LD_INT 2
73328: ST_TO_ADDR
73329: GO 73339
// uc_nation := nation_russian ;
73331: LD_ADDR_OWVAR 21
73335: PUSH
73336: LD_INT 3
73338: ST_TO_ADDR
// vc_chassis := chassis ;
73339: LD_ADDR_OWVAR 37
73343: PUSH
73344: LD_VAR 0 1
73348: ST_TO_ADDR
// vc_engine := engine ;
73349: LD_ADDR_OWVAR 39
73353: PUSH
73354: LD_VAR 0 2
73358: ST_TO_ADDR
// vc_control := control ;
73359: LD_ADDR_OWVAR 38
73363: PUSH
73364: LD_VAR 0 3
73368: ST_TO_ADDR
// vc_weapon := weapon ;
73369: LD_ADDR_OWVAR 40
73373: PUSH
73374: LD_VAR 0 4
73378: ST_TO_ADDR
// un := CreateVehicle ;
73379: LD_ADDR_VAR 0 8
73383: PUSH
73384: CALL_OW 45
73388: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73389: LD_VAR 0 8
73393: PPUSH
73394: LD_INT 0
73396: PPUSH
73397: LD_INT 5
73399: PPUSH
73400: CALL_OW 12
73404: PPUSH
73405: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73409: LD_VAR 0 8
73413: PPUSH
73414: LD_VAR 0 5
73418: PPUSH
73419: LD_VAR 0 6
73423: PPUSH
73424: LD_INT 1
73426: PPUSH
73427: CALL_OW 48
// end ;
73431: LD_VAR 0 7
73435: RET
// export hInvincible ; every 1 do
73436: GO 73438
73438: DISABLE
// hInvincible := [ ] ;
73439: LD_ADDR_EXP 118
73443: PUSH
73444: EMPTY
73445: ST_TO_ADDR
73446: END
// every 10 do var i ;
73447: GO 73449
73449: DISABLE
73450: LD_INT 0
73452: PPUSH
// begin enable ;
73453: ENABLE
// if not hInvincible then
73454: LD_EXP 118
73458: NOT
73459: IFFALSE 73463
// exit ;
73461: GO 73507
// for i in hInvincible do
73463: LD_ADDR_VAR 0 1
73467: PUSH
73468: LD_EXP 118
73472: PUSH
73473: FOR_IN
73474: IFFALSE 73505
// if GetLives ( i ) < 1000 then
73476: LD_VAR 0 1
73480: PPUSH
73481: CALL_OW 256
73485: PUSH
73486: LD_INT 1000
73488: LESS
73489: IFFALSE 73503
// SetLives ( i , 1000 ) ;
73491: LD_VAR 0 1
73495: PPUSH
73496: LD_INT 1000
73498: PPUSH
73499: CALL_OW 234
73503: GO 73473
73505: POP
73506: POP
// end ;
73507: PPOPN 1
73509: END
// export function hHackInvincible ; var i ; begin
73510: LD_INT 0
73512: PPUSH
73513: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73514: LD_ADDR_VAR 0 2
73518: PUSH
73519: LD_INT 2
73521: PUSH
73522: LD_INT 21
73524: PUSH
73525: LD_INT 1
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 21
73534: PUSH
73535: LD_INT 2
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: PPUSH
73547: CALL_OW 69
73551: PUSH
73552: FOR_IN
73553: IFFALSE 73614
// if IsSelected ( i ) then
73555: LD_VAR 0 2
73559: PPUSH
73560: CALL_OW 306
73564: IFFALSE 73612
// begin if i in hInvincible then
73566: LD_VAR 0 2
73570: PUSH
73571: LD_EXP 118
73575: IN
73576: IFFALSE 73596
// hInvincible := hInvincible diff i else
73578: LD_ADDR_EXP 118
73582: PUSH
73583: LD_EXP 118
73587: PUSH
73588: LD_VAR 0 2
73592: DIFF
73593: ST_TO_ADDR
73594: GO 73612
// hInvincible := hInvincible union i ;
73596: LD_ADDR_EXP 118
73600: PUSH
73601: LD_EXP 118
73605: PUSH
73606: LD_VAR 0 2
73610: UNION
73611: ST_TO_ADDR
// end ;
73612: GO 73552
73614: POP
73615: POP
// end ;
73616: LD_VAR 0 1
73620: RET
// export function hHackInvisible ; var i , j ; begin
73621: LD_INT 0
73623: PPUSH
73624: PPUSH
73625: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73626: LD_ADDR_VAR 0 2
73630: PUSH
73631: LD_INT 21
73633: PUSH
73634: LD_INT 1
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PPUSH
73641: CALL_OW 69
73645: PUSH
73646: FOR_IN
73647: IFFALSE 73671
// if IsSelected ( i ) then
73649: LD_VAR 0 2
73653: PPUSH
73654: CALL_OW 306
73658: IFFALSE 73669
// ComForceInvisible ( i ) ;
73660: LD_VAR 0 2
73664: PPUSH
73665: CALL_OW 496
73669: GO 73646
73671: POP
73672: POP
// end ;
73673: LD_VAR 0 1
73677: RET
// export function hHackChangeYourSide ; begin
73678: LD_INT 0
73680: PPUSH
// if your_side = 8 then
73681: LD_OWVAR 2
73685: PUSH
73686: LD_INT 8
73688: EQUAL
73689: IFFALSE 73701
// your_side := 0 else
73691: LD_ADDR_OWVAR 2
73695: PUSH
73696: LD_INT 0
73698: ST_TO_ADDR
73699: GO 73715
// your_side := your_side + 1 ;
73701: LD_ADDR_OWVAR 2
73705: PUSH
73706: LD_OWVAR 2
73710: PUSH
73711: LD_INT 1
73713: PLUS
73714: ST_TO_ADDR
// end ;
73715: LD_VAR 0 1
73719: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73720: LD_INT 0
73722: PPUSH
73723: PPUSH
73724: PPUSH
// for i in all_units do
73725: LD_ADDR_VAR 0 2
73729: PUSH
73730: LD_OWVAR 3
73734: PUSH
73735: FOR_IN
73736: IFFALSE 73814
// if IsSelected ( i ) then
73738: LD_VAR 0 2
73742: PPUSH
73743: CALL_OW 306
73747: IFFALSE 73812
// begin j := GetSide ( i ) ;
73749: LD_ADDR_VAR 0 3
73753: PUSH
73754: LD_VAR 0 2
73758: PPUSH
73759: CALL_OW 255
73763: ST_TO_ADDR
// if j = 8 then
73764: LD_VAR 0 3
73768: PUSH
73769: LD_INT 8
73771: EQUAL
73772: IFFALSE 73784
// j := 0 else
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_INT 0
73781: ST_TO_ADDR
73782: GO 73798
// j := j + 1 ;
73784: LD_ADDR_VAR 0 3
73788: PUSH
73789: LD_VAR 0 3
73793: PUSH
73794: LD_INT 1
73796: PLUS
73797: ST_TO_ADDR
// SetSide ( i , j ) ;
73798: LD_VAR 0 2
73802: PPUSH
73803: LD_VAR 0 3
73807: PPUSH
73808: CALL_OW 235
// end ;
73812: GO 73735
73814: POP
73815: POP
// end ;
73816: LD_VAR 0 1
73820: RET
// export function hHackFog ; begin
73821: LD_INT 0
73823: PPUSH
// FogOff ( true ) ;
73824: LD_INT 1
73826: PPUSH
73827: CALL_OW 344
// end ;
73831: LD_VAR 0 1
73835: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73836: LD_INT 0
73838: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73839: LD_VAR 0 1
73843: PPUSH
73844: LD_VAR 0 2
73848: PPUSH
73849: LD_VAR 0 3
73853: PPUSH
73854: LD_INT 1
73856: PPUSH
73857: LD_INT 1
73859: PPUSH
73860: CALL_OW 483
// CenterOnXY ( x , y ) ;
73864: LD_VAR 0 2
73868: PPUSH
73869: LD_VAR 0 3
73873: PPUSH
73874: CALL_OW 84
// end ;
73878: LD_VAR 0 4
73882: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73883: LD_INT 0
73885: PPUSH
73886: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73887: LD_VAR 0 1
73891: NOT
73892: IFTRUE 73911
73894: PUSH
73895: LD_VAR 0 2
73899: PPUSH
73900: LD_VAR 0 3
73904: PPUSH
73905: CALL_OW 488
73909: NOT
73910: OR
73911: IFTRUE 73946
73913: PUSH
73914: LD_VAR 0 1
73918: PPUSH
73919: CALL_OW 266
73923: PUSH
73924: LD_INT 3
73926: NONEQUAL
73927: IFFALSE 73945
73929: PUSH
73930: LD_VAR 0 1
73934: PPUSH
73935: CALL_OW 247
73939: PUSH
73940: LD_INT 1
73942: EQUAL
73943: NOT
73944: AND
73945: OR
73946: IFFALSE 73950
// exit ;
73948: GO 74232
// if GetType ( factory ) = unit_human then
73950: LD_VAR 0 1
73954: PPUSH
73955: CALL_OW 247
73959: PUSH
73960: LD_INT 1
73962: EQUAL
73963: IFFALSE 73980
// factory := IsInUnit ( factory ) ;
73965: LD_ADDR_VAR 0 1
73969: PUSH
73970: LD_VAR 0 1
73974: PPUSH
73975: CALL_OW 310
73979: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73980: LD_VAR 0 1
73984: PPUSH
73985: CALL_OW 266
73989: PUSH
73990: LD_INT 3
73992: NONEQUAL
73993: IFFALSE 73997
// exit ;
73995: GO 74232
// for i := 1 to Count ( factoryWaypoints ) do
73997: LD_ADDR_VAR 0 5
74001: PUSH
74002: DOUBLE
74003: LD_INT 1
74005: DEC
74006: ST_TO_ADDR
74007: LD_EXP 119
74011: PPUSH
74012: CALL 17922 0 1
74016: PUSH
74017: FOR_TO
74018: IFFALSE 74180
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
74020: LD_VAR 0 2
74024: PPUSH
74025: LD_VAR 0 3
74029: PPUSH
74030: CALL_OW 428
74034: PUSH
74035: LD_EXP 119
74039: PUSH
74040: LD_VAR 0 5
74044: ARRAY
74045: PUSH
74046: LD_INT 2
74048: ARRAY
74049: EQUAL
74050: IFFALSE 74082
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74052: LD_ADDR_EXP 119
74056: PUSH
74057: LD_EXP 119
74061: PPUSH
74062: LD_VAR 0 5
74066: PPUSH
74067: CALL_OW 3
74071: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74072: CALL 74237 0 0
// exit ;
74076: POP
74077: POP
74078: GO 74232
// end else
74080: GO 74178
// if factory = factoryWaypoints [ i ] [ 2 ] then
74082: LD_VAR 0 1
74086: PUSH
74087: LD_EXP 119
74091: PUSH
74092: LD_VAR 0 5
74096: ARRAY
74097: PUSH
74098: LD_INT 2
74100: ARRAY
74101: EQUAL
74102: IFFALSE 74178
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
74104: LD_ADDR_EXP 119
74108: PUSH
74109: LD_EXP 119
74113: PPUSH
74114: LD_VAR 0 5
74118: PPUSH
74119: CALL_OW 3
74123: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74124: LD_ADDR_EXP 119
74128: PUSH
74129: LD_EXP 119
74133: PPUSH
74134: LD_VAR 0 1
74138: PPUSH
74139: CALL_OW 255
74143: PUSH
74144: LD_VAR 0 1
74148: PUSH
74149: LD_VAR 0 2
74153: PUSH
74154: LD_VAR 0 3
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: LIST
74163: LIST
74164: PPUSH
74165: CALL 53898 0 2
74169: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74170: CALL 74237 0 0
// exit ;
74174: POP
74175: POP
74176: GO 74232
// end ; end ;
74178: GO 74017
74180: POP
74181: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
74182: LD_ADDR_EXP 119
74186: PUSH
74187: LD_EXP 119
74191: PPUSH
74192: LD_VAR 0 1
74196: PPUSH
74197: CALL_OW 255
74201: PUSH
74202: LD_VAR 0 1
74206: PUSH
74207: LD_VAR 0 2
74211: PUSH
74212: LD_VAR 0 3
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: PPUSH
74223: CALL 53898 0 2
74227: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74228: CALL 74237 0 0
// end ;
74232: LD_VAR 0 4
74236: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74237: LD_INT 0
74239: PPUSH
74240: PPUSH
74241: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74242: LD_STRING resetFactoryWaypoint();
74244: PPUSH
74245: CALL_OW 559
// if factoryWaypoints then
74249: LD_EXP 119
74253: IFFALSE 74374
// begin list := factoryWaypoints ;
74255: LD_ADDR_VAR 0 3
74259: PUSH
74260: LD_EXP 119
74264: ST_TO_ADDR
// for i := 1 to list do
74265: LD_ADDR_VAR 0 2
74269: PUSH
74270: DOUBLE
74271: LD_INT 1
74273: DEC
74274: ST_TO_ADDR
74275: LD_VAR 0 3
74279: PUSH
74280: FOR_TO
74281: IFFALSE 74372
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74283: LD_STRING setFactoryWaypointXY(
74285: PUSH
74286: LD_VAR 0 3
74290: PUSH
74291: LD_VAR 0 2
74295: ARRAY
74296: PUSH
74297: LD_INT 1
74299: ARRAY
74300: STR
74301: PUSH
74302: LD_STRING ,
74304: STR
74305: PUSH
74306: LD_VAR 0 3
74310: PUSH
74311: LD_VAR 0 2
74315: ARRAY
74316: PUSH
74317: LD_INT 2
74319: ARRAY
74320: STR
74321: PUSH
74322: LD_STRING ,
74324: STR
74325: PUSH
74326: LD_VAR 0 3
74330: PUSH
74331: LD_VAR 0 2
74335: ARRAY
74336: PUSH
74337: LD_INT 3
74339: ARRAY
74340: STR
74341: PUSH
74342: LD_STRING ,
74344: STR
74345: PUSH
74346: LD_VAR 0 3
74350: PUSH
74351: LD_VAR 0 2
74355: ARRAY
74356: PUSH
74357: LD_INT 4
74359: ARRAY
74360: STR
74361: PUSH
74362: LD_STRING )
74364: STR
74365: PPUSH
74366: CALL_OW 559
74370: GO 74280
74372: POP
74373: POP
// end ; end ;
74374: LD_VAR 0 1
74378: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74379: LD_INT 0
74381: PPUSH
// if HexInfo ( x , y ) = warehouse then
74382: LD_VAR 0 2
74386: PPUSH
74387: LD_VAR 0 3
74391: PPUSH
74392: CALL_OW 428
74396: PUSH
74397: LD_VAR 0 1
74401: EQUAL
74402: IFFALSE 74429
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74404: LD_ADDR_EXP 121
74408: PUSH
74409: LD_EXP 121
74413: PPUSH
74414: LD_VAR 0 1
74418: PPUSH
74419: LD_INT 0
74421: PPUSH
74422: CALL_OW 1
74426: ST_TO_ADDR
74427: GO 74480
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74429: LD_ADDR_EXP 121
74433: PUSH
74434: LD_EXP 121
74438: PPUSH
74439: LD_VAR 0 1
74443: PPUSH
74444: LD_VAR 0 1
74448: PPUSH
74449: CALL_OW 255
74453: PUSH
74454: LD_VAR 0 1
74458: PUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_VAR 0 3
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: PPUSH
74475: CALL_OW 1
74479: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74480: CALL 74489 0 0
// end ;
74484: LD_VAR 0 4
74488: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74489: LD_INT 0
74491: PPUSH
74492: PPUSH
74493: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74494: LD_STRING resetWarehouseGatheringPoints();
74496: PPUSH
74497: CALL_OW 559
// if warehouseGatheringPoints then
74501: LD_EXP 121
74505: IFFALSE 74631
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74507: LD_ADDR_VAR 0 3
74511: PUSH
74512: LD_EXP 121
74516: PPUSH
74517: CALL 57832 0 1
74521: ST_TO_ADDR
// for i := 1 to list do
74522: LD_ADDR_VAR 0 2
74526: PUSH
74527: DOUBLE
74528: LD_INT 1
74530: DEC
74531: ST_TO_ADDR
74532: LD_VAR 0 3
74536: PUSH
74537: FOR_TO
74538: IFFALSE 74629
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74540: LD_STRING setWarehouseGatheringPointXY(
74542: PUSH
74543: LD_VAR 0 3
74547: PUSH
74548: LD_VAR 0 2
74552: ARRAY
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: STR
74558: PUSH
74559: LD_STRING ,
74561: STR
74562: PUSH
74563: LD_VAR 0 3
74567: PUSH
74568: LD_VAR 0 2
74572: ARRAY
74573: PUSH
74574: LD_INT 2
74576: ARRAY
74577: STR
74578: PUSH
74579: LD_STRING ,
74581: STR
74582: PUSH
74583: LD_VAR 0 3
74587: PUSH
74588: LD_VAR 0 2
74592: ARRAY
74593: PUSH
74594: LD_INT 3
74596: ARRAY
74597: STR
74598: PUSH
74599: LD_STRING ,
74601: STR
74602: PUSH
74603: LD_VAR 0 3
74607: PUSH
74608: LD_VAR 0 2
74612: ARRAY
74613: PUSH
74614: LD_INT 4
74616: ARRAY
74617: STR
74618: PUSH
74619: LD_STRING )
74621: STR
74622: PPUSH
74623: CALL_OW 559
74627: GO 74537
74629: POP
74630: POP
// end ; end ;
74631: LD_VAR 0 1
74635: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74636: LD_EXP 121
74640: IFFALSE 75335
74642: GO 74644
74644: DISABLE
74645: LD_INT 0
74647: PPUSH
74648: PPUSH
74649: PPUSH
74650: PPUSH
74651: PPUSH
74652: PPUSH
74653: PPUSH
74654: PPUSH
74655: PPUSH
// begin enable ;
74656: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74657: LD_ADDR_VAR 0 3
74661: PUSH
74662: LD_EXP 121
74666: PPUSH
74667: CALL 57832 0 1
74671: ST_TO_ADDR
// if not list then
74672: LD_VAR 0 3
74676: NOT
74677: IFFALSE 74681
// exit ;
74679: GO 75335
// for i := 1 to list do
74681: LD_ADDR_VAR 0 1
74685: PUSH
74686: DOUBLE
74687: LD_INT 1
74689: DEC
74690: ST_TO_ADDR
74691: LD_VAR 0 3
74695: PUSH
74696: FOR_TO
74697: IFFALSE 75333
// begin depot := list [ i ] [ 2 ] ;
74699: LD_ADDR_VAR 0 8
74703: PUSH
74704: LD_VAR 0 3
74708: PUSH
74709: LD_VAR 0 1
74713: ARRAY
74714: PUSH
74715: LD_INT 2
74717: ARRAY
74718: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74719: LD_ADDR_VAR 0 5
74723: PUSH
74724: LD_VAR 0 3
74728: PUSH
74729: LD_VAR 0 1
74733: ARRAY
74734: PUSH
74735: LD_INT 1
74737: ARRAY
74738: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74739: LD_VAR 0 8
74743: PPUSH
74744: CALL_OW 301
74748: IFTRUE 74767
74750: PUSH
74751: LD_VAR 0 5
74755: PUSH
74756: LD_VAR 0 8
74760: PPUSH
74761: CALL_OW 255
74765: NONEQUAL
74766: OR
74767: IFFALSE 74796
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74769: LD_ADDR_EXP 121
74773: PUSH
74774: LD_EXP 121
74778: PPUSH
74779: LD_VAR 0 8
74783: PPUSH
74784: LD_INT 0
74786: PPUSH
74787: CALL_OW 1
74791: ST_TO_ADDR
// exit ;
74792: POP
74793: POP
74794: GO 75335
// end ; x := list [ i ] [ 3 ] ;
74796: LD_ADDR_VAR 0 6
74800: PUSH
74801: LD_VAR 0 3
74805: PUSH
74806: LD_VAR 0 1
74810: ARRAY
74811: PUSH
74812: LD_INT 3
74814: ARRAY
74815: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74816: LD_ADDR_VAR 0 7
74820: PUSH
74821: LD_VAR 0 3
74825: PUSH
74826: LD_VAR 0 1
74830: ARRAY
74831: PUSH
74832: LD_INT 4
74834: ARRAY
74835: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74836: LD_ADDR_VAR 0 9
74840: PUSH
74841: LD_VAR 0 6
74845: PPUSH
74846: LD_VAR 0 7
74850: PPUSH
74851: LD_INT 16
74853: PPUSH
74854: CALL 56406 0 3
74858: ST_TO_ADDR
// if not cratesNearbyPoint then
74859: LD_VAR 0 9
74863: NOT
74864: IFFALSE 74870
// exit ;
74866: POP
74867: POP
74868: GO 75335
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74870: LD_ADDR_VAR 0 4
74874: PUSH
74875: LD_INT 22
74877: PUSH
74878: LD_VAR 0 5
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 3
74889: PUSH
74890: LD_INT 60
74892: PUSH
74893: EMPTY
74894: LIST
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: PUSH
74900: LD_INT 91
74902: PUSH
74903: LD_VAR 0 8
74907: PUSH
74908: LD_INT 6
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 2
74918: PUSH
74919: LD_INT 25
74921: PUSH
74922: LD_INT 2
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 25
74931: PUSH
74932: LD_INT 16
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: LIST
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: PPUSH
74950: CALL_OW 69
74954: PUSH
74955: LD_VAR 0 8
74959: PPUSH
74960: CALL_OW 313
74964: PPUSH
74965: LD_INT 3
74967: PUSH
74968: LD_INT 60
74970: PUSH
74971: EMPTY
74972: LIST
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: LD_INT 25
74983: PUSH
74984: LD_INT 2
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 25
74993: PUSH
74994: LD_INT 16
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PPUSH
75010: CALL_OW 72
75014: UNION
75015: ST_TO_ADDR
// if tmp then
75016: LD_VAR 0 4
75020: IFFALSE 75100
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75022: LD_ADDR_VAR 0 4
75026: PUSH
75027: LD_VAR 0 4
75031: PPUSH
75032: LD_INT 3
75034: PPUSH
75035: CALL 54213 0 2
75039: ST_TO_ADDR
// for j in tmp do
75040: LD_ADDR_VAR 0 2
75044: PUSH
75045: LD_VAR 0 4
75049: PUSH
75050: FOR_IN
75051: IFFALSE 75094
// begin if IsInUnit ( j ) then
75053: LD_VAR 0 2
75057: PPUSH
75058: CALL_OW 310
75062: IFFALSE 75073
// ComExit ( j ) ;
75064: LD_VAR 0 2
75068: PPUSH
75069: CALL 54296 0 1
// AddComCollect ( j , x , y ) ;
75073: LD_VAR 0 2
75077: PPUSH
75078: LD_VAR 0 6
75082: PPUSH
75083: LD_VAR 0 7
75087: PPUSH
75088: CALL_OW 177
// end ;
75092: GO 75050
75094: POP
75095: POP
// exit ;
75096: POP
75097: POP
75098: GO 75335
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_INT 22
75107: PUSH
75108: LD_VAR 0 5
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 91
75119: PUSH
75120: LD_VAR 0 8
75124: PUSH
75125: LD_INT 8
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: LIST
75132: PUSH
75133: LD_INT 2
75135: PUSH
75136: LD_INT 34
75138: PUSH
75139: LD_INT 12
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 34
75148: PUSH
75149: LD_INT 51
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 34
75158: PUSH
75159: LD_INT 32
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 34
75168: PUSH
75169: LD_INT 89
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: LIST
75187: PPUSH
75188: CALL_OW 69
75192: ST_TO_ADDR
// if tmp then
75193: LD_VAR 0 4
75197: IFFALSE 75331
// begin for j in tmp do
75199: LD_ADDR_VAR 0 2
75203: PUSH
75204: LD_VAR 0 4
75208: PUSH
75209: FOR_IN
75210: IFFALSE 75329
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75212: LD_VAR 0 2
75216: PPUSH
75217: CALL_OW 262
75221: PUSH
75222: LD_INT 3
75224: EQUAL
75225: IFTRUE 75242
75227: PUSH
75228: LD_VAR 0 2
75232: PPUSH
75233: CALL_OW 261
75237: PUSH
75238: LD_INT 20
75240: GREATER
75241: OR
75242: IFFALSE 75256
75244: PUSH
75245: LD_VAR 0 2
75249: PPUSH
75250: CALL_OW 314
75254: NOT
75255: AND
75256: IFFALSE 75286
75258: PUSH
75259: LD_VAR 0 2
75263: PPUSH
75264: CALL_OW 263
75268: PUSH
75269: LD_INT 1
75271: NONEQUAL
75272: IFTRUE 75285
75274: PUSH
75275: LD_VAR 0 2
75279: PPUSH
75280: CALL_OW 311
75284: OR
75285: AND
75286: IFFALSE 75327
// begin ComCollect ( j , x , y ) ;
75288: LD_VAR 0 2
75292: PPUSH
75293: LD_VAR 0 6
75297: PPUSH
75298: LD_VAR 0 7
75302: PPUSH
75303: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75307: LD_VAR 0 2
75311: PPUSH
75312: LD_VAR 0 8
75316: PPUSH
75317: CALL_OW 172
// exit ;
75321: POP
75322: POP
75323: POP
75324: POP
75325: GO 75335
// end ;
75327: GO 75209
75329: POP
75330: POP
// end ; end ;
75331: GO 74696
75333: POP
75334: POP
// end ; end_of_file
75335: PPOPN 9
75337: END
// export function SOS_UnitDestroyed ( un ) ; begin
75338: LD_INT 0
75340: PPUSH
// ComRadiation ( un ) ;
75341: LD_VAR 0 1
75345: PPUSH
75346: CALL 76508 0 1
// end ;
75350: LD_VAR 0 2
75354: RET
// export function SOS_UnitKamikazed ( un ) ; begin
75355: LD_INT 0
75357: PPUSH
// ComRadiation ( un ) ;
75358: LD_VAR 0 1
75362: PPUSH
75363: CALL 76508 0 1
// end ;
75367: LD_VAR 0 2
75371: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75372: LD_INT 0
75374: PPUSH
// end ;
75375: LD_VAR 0 4
75379: RET
// export function SOS_Command ( cmd ) ; begin
75380: LD_INT 0
75382: PPUSH
// end ;
75383: LD_VAR 0 2
75387: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75388: LD_INT 0
75390: PPUSH
// end ;
75391: LD_VAR 0 6
75395: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
75396: LD_INT 0
75398: PPUSH
75399: PPUSH
75400: PPUSH
75401: PPUSH
75402: PPUSH
// if not vehicle or not factory then
75403: LD_VAR 0 1
75407: NOT
75408: IFTRUE 75417
75410: PUSH
75411: LD_VAR 0 2
75415: NOT
75416: OR
75417: IFFALSE 75421
// exit ;
75419: GO 76083
// weapon := GetWeapon ( vehicle ) ;
75421: LD_ADDR_VAR 0 7
75425: PUSH
75426: LD_VAR 0 1
75430: PPUSH
75431: CALL_OW 264
75435: ST_TO_ADDR
// if weapon = ar_miner then
75436: LD_VAR 0 7
75440: PUSH
75441: LD_INT 81
75443: EQUAL
75444: IFFALSE 75501
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
75446: LD_ADDR_EXP 130
75450: PUSH
75451: LD_EXP 130
75455: PPUSH
75456: LD_EXP 130
75460: PUSH
75461: LD_INT 1
75463: PLUS
75464: PPUSH
75465: LD_VAR 0 1
75469: PPUSH
75470: CALL_OW 1
75474: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75475: LD_ADDR_EXP 131
75479: PUSH
75480: LD_EXP 131
75484: PPUSH
75485: LD_EXP 131
75489: PUSH
75490: LD_INT 1
75492: PLUS
75493: PPUSH
75494: EMPTY
75495: PPUSH
75496: CALL_OW 1
75500: ST_TO_ADDR
// end ; if not factoryWaypoints then
75501: LD_EXP 119
75505: NOT
75506: IFFALSE 75510
// exit ;
75508: GO 76083
// for i := 1 to Count ( factoryWaypoints ) do
75510: LD_ADDR_VAR 0 4
75514: PUSH
75515: DOUBLE
75516: LD_INT 1
75518: DEC
75519: ST_TO_ADDR
75520: LD_EXP 119
75524: PPUSH
75525: CALL 17922 0 1
75529: PUSH
75530: FOR_TO
75531: IFFALSE 76081
// if factoryWaypoints [ i ] [ 2 ] = factory then
75533: LD_EXP 119
75537: PUSH
75538: LD_VAR 0 4
75542: ARRAY
75543: PUSH
75544: LD_INT 2
75546: ARRAY
75547: PUSH
75548: LD_VAR 0 2
75552: EQUAL
75553: IFFALSE 76079
// begin if GetControl ( vehicle ) = control_manual then
75555: LD_VAR 0 1
75559: PPUSH
75560: CALL_OW 263
75564: PUSH
75565: LD_INT 1
75567: EQUAL
75568: IFFALSE 75932
// begin driver := IsDrivenBy ( vehicle ) ;
75570: LD_ADDR_VAR 0 5
75574: PUSH
75575: LD_VAR 0 1
75579: PPUSH
75580: CALL_OW 311
75584: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
75585: LD_VAR 0 5
75589: PUSH
75590: LD_EXP 120
75594: IN
75595: IFTRUE 75609
75597: PUSH
75598: LD_VAR 0 1
75602: PUSH
75603: LD_EXP 120
75607: IN
75608: OR
75609: IFFALSE 75615
// exit ;
75611: POP
75612: POP
75613: GO 76083
// if not HasTask ( driver ) then
75615: LD_VAR 0 5
75619: PPUSH
75620: CALL_OW 314
75624: NOT
75625: IFFALSE 75930
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
75627: LD_ADDR_EXP 120
75631: PUSH
75632: LD_EXP 120
75636: PPUSH
75637: LD_VAR 0 5
75641: PPUSH
75642: CALL 53898 0 2
75646: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
75647: LD_ADDR_EXP 120
75651: PUSH
75652: LD_EXP 120
75656: PPUSH
75657: LD_VAR 0 1
75661: PPUSH
75662: CALL 53898 0 2
75666: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75667: LD_ADDR_VAR 0 6
75671: PUSH
75672: LD_EXP 119
75676: PUSH
75677: LD_VAR 0 4
75681: ARRAY
75682: PUSH
75683: LD_INT 3
75685: ARRAY
75686: PPUSH
75687: LD_EXP 119
75691: PUSH
75692: LD_VAR 0 4
75696: ARRAY
75697: PUSH
75698: LD_INT 4
75700: ARRAY
75701: PPUSH
75702: CALL_OW 428
75706: ST_TO_ADDR
// if hex then
75707: LD_VAR 0 6
75711: IFFALSE 75729
// ComMoveUnit ( driver , hex ) else
75713: LD_VAR 0 5
75717: PPUSH
75718: LD_VAR 0 6
75722: PPUSH
75723: CALL_OW 112
75727: GO 75813
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
75729: LD_VAR 0 1
75733: PPUSH
75734: LD_EXP 119
75738: PUSH
75739: LD_VAR 0 4
75743: ARRAY
75744: PUSH
75745: LD_INT 3
75747: ARRAY
75748: PPUSH
75749: LD_EXP 119
75753: PUSH
75754: LD_VAR 0 4
75758: ARRAY
75759: PUSH
75760: LD_INT 4
75762: ARRAY
75763: PPUSH
75764: CALL_OW 297
75768: PUSH
75769: LD_INT 0
75771: GREATER
75772: IFFALSE 75813
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75774: LD_VAR 0 5
75778: PPUSH
75779: LD_EXP 119
75783: PUSH
75784: LD_VAR 0 4
75788: ARRAY
75789: PUSH
75790: LD_INT 3
75792: ARRAY
75793: PPUSH
75794: LD_EXP 119
75798: PUSH
75799: LD_VAR 0 4
75803: ARRAY
75804: PUSH
75805: LD_INT 4
75807: ARRAY
75808: PPUSH
75809: CALL_OW 111
// AddComExitVehicle ( driver ) ;
75813: LD_VAR 0 5
75817: PPUSH
75818: CALL_OW 181
// if Multiplayer then
75822: LD_OWVAR 4
75826: IFFALSE 75875
// begin repeat wait ( 10 ) ;
75828: LD_INT 10
75830: PPUSH
75831: CALL_OW 67
// until not IsInUnit ( driver ) ;
75835: LD_VAR 0 5
75839: PPUSH
75840: CALL_OW 310
75844: NOT
75845: IFFALSE 75828
// if not HasTask ( driver ) then
75847: LD_VAR 0 5
75851: PPUSH
75852: CALL_OW 314
75856: NOT
75857: IFFALSE 75873
// ComEnterUnit ( driver , factory ) ;
75859: LD_VAR 0 5
75863: PPUSH
75864: LD_VAR 0 2
75868: PPUSH
75869: CALL_OW 120
// end else
75873: GO 75889
// AddComEnterUnit ( driver , factory ) ;
75875: LD_VAR 0 5
75879: PPUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: CALL_OW 180
// wait ( 0 0$1 ) ;
75889: LD_INT 35
75891: PPUSH
75892: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
75896: LD_ADDR_EXP 120
75900: PUSH
75901: LD_EXP 120
75905: PUSH
75906: LD_VAR 0 5
75910: DIFF
75911: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
75912: LD_ADDR_EXP 120
75916: PUSH
75917: LD_EXP 120
75921: PUSH
75922: LD_VAR 0 1
75926: DIFF
75927: ST_TO_ADDR
// break ;
75928: GO 76081
// end ; end else
75930: GO 76079
// if GetControl ( vehicle ) = control_remote then
75932: LD_VAR 0 1
75936: PPUSH
75937: CALL_OW 263
75941: PUSH
75942: LD_INT 2
75944: EQUAL
75945: IFFALSE 76031
// begin wait ( 0 0$2 ) ;
75947: LD_INT 70
75949: PPUSH
75950: CALL_OW 67
// repeat wait ( 10 ) ;
75954: LD_INT 10
75956: PPUSH
75957: CALL_OW 67
// Connect ( vehicle ) ;
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL 24200 0 1
// until IsControledBy ( vehicle ) ;
75970: LD_VAR 0 1
75974: PPUSH
75975: CALL_OW 312
75979: IFFALSE 75954
// wait ( 10 ) ;
75981: LD_INT 10
75983: PPUSH
75984: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
75988: LD_VAR 0 1
75992: PPUSH
75993: LD_EXP 119
75997: PUSH
75998: LD_VAR 0 4
76002: ARRAY
76003: PUSH
76004: LD_INT 3
76006: ARRAY
76007: PPUSH
76008: LD_EXP 119
76012: PUSH
76013: LD_VAR 0 4
76017: ARRAY
76018: PUSH
76019: LD_INT 4
76021: ARRAY
76022: PPUSH
76023: CALL_OW 111
// break ;
76027: GO 76081
// end else
76029: GO 76079
// begin wait ( 0 0$3 ) ;
76031: LD_INT 105
76033: PPUSH
76034: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
76038: LD_VAR 0 1
76042: PPUSH
76043: LD_EXP 119
76047: PUSH
76048: LD_VAR 0 4
76052: ARRAY
76053: PUSH
76054: LD_INT 3
76056: ARRAY
76057: PPUSH
76058: LD_EXP 119
76062: PUSH
76063: LD_VAR 0 4
76067: ARRAY
76068: PUSH
76069: LD_INT 4
76071: ARRAY
76072: PPUSH
76073: CALL_OW 111
// break ;
76077: GO 76081
// end ; end ;
76079: GO 75530
76081: POP
76082: POP
// end ;
76083: LD_VAR 0 3
76087: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76088: LD_INT 0
76090: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76091: LD_VAR 0 1
76095: PUSH
76096: LD_INT 250
76098: EQUAL
76099: IFFALSE 76116
76101: PUSH
76102: LD_VAR 0 2
76106: PPUSH
76107: CALL_OW 264
76111: PUSH
76112: LD_INT 81
76114: EQUAL
76115: AND
76116: IFFALSE 76137
// MinerPlaceMine ( unit , x , y ) ;
76118: LD_VAR 0 2
76122: PPUSH
76123: LD_VAR 0 4
76127: PPUSH
76128: LD_VAR 0 5
76132: PPUSH
76133: CALL 79483 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76137: LD_VAR 0 1
76141: PUSH
76142: LD_INT 251
76144: EQUAL
76145: IFFALSE 76162
76147: PUSH
76148: LD_VAR 0 2
76152: PPUSH
76153: CALL_OW 264
76157: PUSH
76158: LD_INT 81
76160: EQUAL
76161: AND
76162: IFFALSE 76183
// MinerDetonateMine ( unit , x , y ) ;
76164: LD_VAR 0 2
76168: PPUSH
76169: LD_VAR 0 4
76173: PPUSH
76174: LD_VAR 0 5
76178: PPUSH
76179: CALL 79890 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76183: LD_VAR 0 1
76187: PUSH
76188: LD_INT 252
76190: EQUAL
76191: IFFALSE 76208
76193: PUSH
76194: LD_VAR 0 2
76198: PPUSH
76199: CALL_OW 264
76203: PUSH
76204: LD_INT 81
76206: EQUAL
76207: AND
76208: IFFALSE 76229
// MinerCreateMinefield ( unit , x , y ) ;
76210: LD_VAR 0 2
76214: PPUSH
76215: LD_VAR 0 4
76219: PPUSH
76220: LD_VAR 0 5
76224: PPUSH
76225: CALL 80122 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76229: LD_VAR 0 1
76233: PUSH
76234: LD_INT 253
76236: EQUAL
76237: IFFALSE 76254
76239: PUSH
76240: LD_VAR 0 2
76244: PPUSH
76245: CALL_OW 257
76249: PUSH
76250: LD_INT 5
76252: EQUAL
76253: AND
76254: IFFALSE 76275
// ComBinocular ( unit , x , y ) ;
76256: LD_VAR 0 2
76260: PPUSH
76261: LD_VAR 0 4
76265: PPUSH
76266: LD_VAR 0 5
76270: PPUSH
76271: CALL 80497 0 3
// if selectedUnit then
76275: LD_VAR 0 3
76279: IFFALSE 76339
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76281: LD_VAR 0 1
76285: PUSH
76286: LD_INT 254
76288: EQUAL
76289: IFFALSE 76306
76291: PUSH
76292: LD_VAR 0 2
76296: PPUSH
76297: CALL_OW 264
76301: PUSH
76302: LD_INT 99
76304: EQUAL
76305: AND
76306: IFFALSE 76323
76308: PUSH
76309: LD_VAR 0 3
76313: PPUSH
76314: CALL_OW 263
76318: PUSH
76319: LD_INT 3
76321: EQUAL
76322: AND
76323: IFFALSE 76339
// HackDestroyVehicle ( unit , selectedUnit ) ;
76325: LD_VAR 0 2
76329: PPUSH
76330: LD_VAR 0 3
76334: PPUSH
76335: CALL 78673 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76339: LD_VAR 0 1
76343: PUSH
76344: LD_INT 255
76346: EQUAL
76347: IFFALSE 76371
76349: PUSH
76350: LD_VAR 0 2
76354: PPUSH
76355: CALL_OW 264
76359: PUSH
76360: LD_INT 14
76362: PUSH
76363: LD_INT 53
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: IN
76370: AND
76371: IFFALSE 76389
76373: PUSH
76374: LD_VAR 0 4
76378: PPUSH
76379: LD_VAR 0 5
76383: PPUSH
76384: CALL_OW 488
76388: AND
76389: IFFALSE 76413
// CutTreeXYR ( unit , x , y , 12 ) ;
76391: LD_VAR 0 2
76395: PPUSH
76396: LD_VAR 0 4
76400: PPUSH
76401: LD_VAR 0 5
76405: PPUSH
76406: LD_INT 12
76408: PPUSH
76409: CALL 76604 0 4
// if cmd = 256 then
76413: LD_VAR 0 1
76417: PUSH
76418: LD_INT 256
76420: EQUAL
76421: IFFALSE 76442
// SetFactoryWaypoint ( unit , x , y ) ;
76423: LD_VAR 0 2
76427: PPUSH
76428: LD_VAR 0 4
76432: PPUSH
76433: LD_VAR 0 5
76437: PPUSH
76438: CALL 73883 0 3
// if cmd = 257 then
76442: LD_VAR 0 1
76446: PUSH
76447: LD_INT 257
76449: EQUAL
76450: IFFALSE 76471
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76452: LD_VAR 0 2
76456: PPUSH
76457: LD_VAR 0 4
76461: PPUSH
76462: LD_VAR 0 5
76466: PPUSH
76467: CALL 74379 0 3
// if cmd = 258 then
76471: LD_VAR 0 1
76475: PUSH
76476: LD_INT 258
76478: EQUAL
76479: IFFALSE 76503
// BurnTreeXYR ( unit , x , y , 8 ) ;
76481: LD_VAR 0 2
76485: PPUSH
76486: LD_VAR 0 4
76490: PPUSH
76491: LD_VAR 0 5
76495: PPUSH
76496: LD_INT 8
76498: PPUSH
76499: CALL 77026 0 4
// end ;
76503: LD_VAR 0 6
76507: RET
// export function ComRadiation ( un ) ; var eff ; begin
76508: LD_INT 0
76510: PPUSH
76511: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
76512: LD_VAR 0 1
76516: PPUSH
76517: CALL_OW 264
76521: PUSH
76522: LD_INT 91
76524: NONEQUAL
76525: IFFALSE 76529
// exit ;
76527: GO 76599
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
76529: LD_INT 68
76531: PPUSH
76532: LD_VAR 0 1
76536: PPUSH
76537: CALL_OW 255
76541: PPUSH
76542: CALL_OW 321
76546: PUSH
76547: LD_INT 2
76549: EQUAL
76550: IFFALSE 76562
// eff := 50 else
76552: LD_ADDR_VAR 0 3
76556: PUSH
76557: LD_INT 50
76559: ST_TO_ADDR
76560: GO 76570
// eff := 25 ;
76562: LD_ADDR_VAR 0 3
76566: PUSH
76567: LD_INT 25
76569: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
76570: LD_VAR 0 1
76574: PPUSH
76575: CALL_OW 250
76579: PPUSH
76580: LD_VAR 0 1
76584: PPUSH
76585: CALL_OW 251
76589: PPUSH
76590: LD_VAR 0 3
76594: PPUSH
76595: CALL_OW 495
// end ;
76599: LD_VAR 0 2
76603: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76604: LD_INT 0
76606: PPUSH
76607: PPUSH
76608: PPUSH
76609: PPUSH
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
76614: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76615: LD_VAR 0 1
76619: PPUSH
76620: CALL_OW 302
76624: NOT
76625: IFTRUE 76644
76627: PUSH
76628: LD_VAR 0 2
76632: PPUSH
76633: LD_VAR 0 3
76637: PPUSH
76638: CALL_OW 488
76642: NOT
76643: OR
76644: IFTRUE 76653
76646: PUSH
76647: LD_VAR 0 4
76651: NOT
76652: OR
76653: IFFALSE 76657
// exit ;
76655: GO 77021
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
76657: LD_VAR 0 1
76661: PPUSH
76662: CALL_OW 437
76666: PPUSH
76667: CALL 17922 0 1
76671: PUSH
76672: LD_INT 10
76674: GREATER
76675: IFFALSE 76679
// exit ;
76677: GO 77021
// list := [ ] ;
76679: LD_ADDR_VAR 0 13
76683: PUSH
76684: EMPTY
76685: ST_TO_ADDR
// if x - r < 0 then
76686: LD_VAR 0 2
76690: PUSH
76691: LD_VAR 0 4
76695: MINUS
76696: PUSH
76697: LD_INT 0
76699: LESS
76700: IFFALSE 76712
// min_x := 0 else
76702: LD_ADDR_VAR 0 7
76706: PUSH
76707: LD_INT 0
76709: ST_TO_ADDR
76710: GO 76728
// min_x := x - r ;
76712: LD_ADDR_VAR 0 7
76716: PUSH
76717: LD_VAR 0 2
76721: PUSH
76722: LD_VAR 0 4
76726: MINUS
76727: ST_TO_ADDR
// if y - r < 0 then
76728: LD_VAR 0 3
76732: PUSH
76733: LD_VAR 0 4
76737: MINUS
76738: PUSH
76739: LD_INT 0
76741: LESS
76742: IFFALSE 76754
// min_y := 0 else
76744: LD_ADDR_VAR 0 8
76748: PUSH
76749: LD_INT 0
76751: ST_TO_ADDR
76752: GO 76770
// min_y := y - r ;
76754: LD_ADDR_VAR 0 8
76758: PUSH
76759: LD_VAR 0 3
76763: PUSH
76764: LD_VAR 0 4
76768: MINUS
76769: ST_TO_ADDR
// max_x := x + r ;
76770: LD_ADDR_VAR 0 9
76774: PUSH
76775: LD_VAR 0 2
76779: PUSH
76780: LD_VAR 0 4
76784: PLUS
76785: ST_TO_ADDR
// max_y := y + r ;
76786: LD_ADDR_VAR 0 10
76790: PUSH
76791: LD_VAR 0 3
76795: PUSH
76796: LD_VAR 0 4
76800: PLUS
76801: ST_TO_ADDR
// for _x = min_x to max_x do
76802: LD_ADDR_VAR 0 11
76806: PUSH
76807: DOUBLE
76808: LD_VAR 0 7
76812: DEC
76813: ST_TO_ADDR
76814: LD_VAR 0 9
76818: PUSH
76819: FOR_TO
76820: IFFALSE 76939
// for _y = min_y to max_y do
76822: LD_ADDR_VAR 0 12
76826: PUSH
76827: DOUBLE
76828: LD_VAR 0 8
76832: DEC
76833: ST_TO_ADDR
76834: LD_VAR 0 10
76838: PUSH
76839: FOR_TO
76840: IFFALSE 76935
// begin if not ValidHex ( _x , _y ) then
76842: LD_VAR 0 11
76846: PPUSH
76847: LD_VAR 0 12
76851: PPUSH
76852: CALL_OW 488
76856: NOT
76857: IFFALSE 76861
// continue ;
76859: GO 76839
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76861: LD_VAR 0 11
76865: PPUSH
76866: LD_VAR 0 12
76870: PPUSH
76871: CALL_OW 351
76875: IFFALSE 76893
76877: PUSH
76878: LD_VAR 0 11
76882: PPUSH
76883: LD_VAR 0 12
76887: PPUSH
76888: CALL_OW 554
76892: AND
76893: IFFALSE 76933
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76895: LD_ADDR_VAR 0 13
76899: PUSH
76900: LD_VAR 0 13
76904: PPUSH
76905: LD_VAR 0 13
76909: PUSH
76910: LD_INT 1
76912: PLUS
76913: PPUSH
76914: LD_VAR 0 11
76918: PUSH
76919: LD_VAR 0 12
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PPUSH
76928: CALL_OW 2
76932: ST_TO_ADDR
// end ;
76933: GO 76839
76935: POP
76936: POP
76937: GO 76819
76939: POP
76940: POP
// if not list then
76941: LD_VAR 0 13
76945: NOT
76946: IFFALSE 76950
// exit ;
76948: GO 77021
// for i in list do
76950: LD_ADDR_VAR 0 6
76954: PUSH
76955: LD_VAR 0 13
76959: PUSH
76960: FOR_IN
76961: IFFALSE 77019
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76963: LD_VAR 0 1
76967: PPUSH
76968: LD_STRING M
76970: PUSH
76971: LD_VAR 0 6
76975: PUSH
76976: LD_INT 1
76978: ARRAY
76979: PUSH
76980: LD_VAR 0 6
76984: PUSH
76985: LD_INT 2
76987: ARRAY
76988: PUSH
76989: LD_INT 0
76991: PUSH
76992: LD_INT 0
76994: PUSH
76995: LD_INT 0
76997: PUSH
76998: LD_INT 0
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: PUSH
77010: EMPTY
77011: LIST
77012: PPUSH
77013: CALL_OW 447
77017: GO 76960
77019: POP
77020: POP
// end ;
77021: LD_VAR 0 5
77025: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
77026: LD_INT 0
77028: PPUSH
77029: PPUSH
77030: PPUSH
77031: PPUSH
77032: PPUSH
77033: PPUSH
77034: PPUSH
77035: PPUSH
77036: PPUSH
77037: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
77038: LD_VAR 0 1
77042: PPUSH
77043: CALL_OW 302
77047: NOT
77048: IFTRUE 77067
77050: PUSH
77051: LD_VAR 0 2
77055: PPUSH
77056: LD_VAR 0 3
77060: PPUSH
77061: CALL_OW 488
77065: NOT
77066: OR
77067: IFTRUE 77076
77069: PUSH
77070: LD_VAR 0 4
77074: NOT
77075: OR
77076: IFFALSE 77080
// exit ;
77078: GO 77619
// if Count ( GetTaskList ( flame ) ) > 10 then
77080: LD_VAR 0 1
77084: PPUSH
77085: CALL_OW 437
77089: PPUSH
77090: CALL 17922 0 1
77094: PUSH
77095: LD_INT 10
77097: GREATER
77098: IFFALSE 77102
// exit ;
77100: GO 77619
// list := [ ] ;
77102: LD_ADDR_VAR 0 13
77106: PUSH
77107: EMPTY
77108: ST_TO_ADDR
// if x - r < 0 then
77109: LD_VAR 0 2
77113: PUSH
77114: LD_VAR 0 4
77118: MINUS
77119: PUSH
77120: LD_INT 0
77122: LESS
77123: IFFALSE 77135
// min_x := 0 else
77125: LD_ADDR_VAR 0 7
77129: PUSH
77130: LD_INT 0
77132: ST_TO_ADDR
77133: GO 77151
// min_x := x - r ;
77135: LD_ADDR_VAR 0 7
77139: PUSH
77140: LD_VAR 0 2
77144: PUSH
77145: LD_VAR 0 4
77149: MINUS
77150: ST_TO_ADDR
// if y - r < 0 then
77151: LD_VAR 0 3
77155: PUSH
77156: LD_VAR 0 4
77160: MINUS
77161: PUSH
77162: LD_INT 0
77164: LESS
77165: IFFALSE 77177
// min_y := 0 else
77167: LD_ADDR_VAR 0 8
77171: PUSH
77172: LD_INT 0
77174: ST_TO_ADDR
77175: GO 77193
// min_y := y - r ;
77177: LD_ADDR_VAR 0 8
77181: PUSH
77182: LD_VAR 0 3
77186: PUSH
77187: LD_VAR 0 4
77191: MINUS
77192: ST_TO_ADDR
// max_x := x + r ;
77193: LD_ADDR_VAR 0 9
77197: PUSH
77198: LD_VAR 0 2
77202: PUSH
77203: LD_VAR 0 4
77207: PLUS
77208: ST_TO_ADDR
// max_y := y + r ;
77209: LD_ADDR_VAR 0 10
77213: PUSH
77214: LD_VAR 0 3
77218: PUSH
77219: LD_VAR 0 4
77223: PLUS
77224: ST_TO_ADDR
// for _x = min_x to max_x do
77225: LD_ADDR_VAR 0 11
77229: PUSH
77230: DOUBLE
77231: LD_VAR 0 7
77235: DEC
77236: ST_TO_ADDR
77237: LD_VAR 0 9
77241: PUSH
77242: FOR_TO
77243: IFFALSE 77362
// for _y = min_y to max_y do
77245: LD_ADDR_VAR 0 12
77249: PUSH
77250: DOUBLE
77251: LD_VAR 0 8
77255: DEC
77256: ST_TO_ADDR
77257: LD_VAR 0 10
77261: PUSH
77262: FOR_TO
77263: IFFALSE 77358
// begin if not ValidHex ( _x , _y ) then
77265: LD_VAR 0 11
77269: PPUSH
77270: LD_VAR 0 12
77274: PPUSH
77275: CALL_OW 488
77279: NOT
77280: IFFALSE 77284
// continue ;
77282: GO 77262
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77284: LD_VAR 0 11
77288: PPUSH
77289: LD_VAR 0 12
77293: PPUSH
77294: CALL_OW 351
77298: IFFALSE 77316
77300: PUSH
77301: LD_VAR 0 11
77305: PPUSH
77306: LD_VAR 0 12
77310: PPUSH
77311: CALL_OW 554
77315: AND
77316: IFFALSE 77356
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77318: LD_ADDR_VAR 0 13
77322: PUSH
77323: LD_VAR 0 13
77327: PPUSH
77328: LD_VAR 0 13
77332: PUSH
77333: LD_INT 1
77335: PLUS
77336: PPUSH
77337: LD_VAR 0 11
77341: PUSH
77342: LD_VAR 0 12
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PPUSH
77351: CALL_OW 2
77355: ST_TO_ADDR
// end ;
77356: GO 77262
77358: POP
77359: POP
77360: GO 77242
77362: POP
77363: POP
// if not list then
77364: LD_VAR 0 13
77368: NOT
77369: IFFALSE 77373
// exit ;
77371: GO 77619
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77373: LD_ADDR_VAR 0 13
77377: PUSH
77378: LD_VAR 0 1
77382: PPUSH
77383: LD_VAR 0 13
77387: PPUSH
77388: LD_INT 1
77390: PPUSH
77391: LD_INT 1
77393: PPUSH
77394: CALL 21328 0 4
77398: ST_TO_ADDR
// ComStop ( flame ) ;
77399: LD_VAR 0 1
77403: PPUSH
77404: CALL_OW 141
// for i in list do
77408: LD_ADDR_VAR 0 6
77412: PUSH
77413: LD_VAR 0 13
77417: PUSH
77418: FOR_IN
77419: IFFALSE 77450
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77421: LD_VAR 0 1
77425: PPUSH
77426: LD_VAR 0 6
77430: PUSH
77431: LD_INT 1
77433: ARRAY
77434: PPUSH
77435: LD_VAR 0 6
77439: PUSH
77440: LD_INT 2
77442: ARRAY
77443: PPUSH
77444: CALL_OW 176
77448: GO 77418
77450: POP
77451: POP
// repeat wait ( 0 0$1 ) ;
77452: LD_INT 35
77454: PPUSH
77455: CALL_OW 67
// task := GetTaskList ( flame ) ;
77459: LD_ADDR_VAR 0 14
77463: PUSH
77464: LD_VAR 0 1
77468: PPUSH
77469: CALL_OW 437
77473: ST_TO_ADDR
// if not task then
77474: LD_VAR 0 14
77478: NOT
77479: IFFALSE 77483
// exit ;
77481: GO 77619
// if task [ 1 ] [ 1 ] <> | then
77483: LD_VAR 0 14
77487: PUSH
77488: LD_INT 1
77490: ARRAY
77491: PUSH
77492: LD_INT 1
77494: ARRAY
77495: PUSH
77496: LD_STRING |
77498: NONEQUAL
77499: IFFALSE 77503
// exit ;
77501: GO 77619
// _x := task [ 1 ] [ 2 ] ;
77503: LD_ADDR_VAR 0 11
77507: PUSH
77508: LD_VAR 0 14
77512: PUSH
77513: LD_INT 1
77515: ARRAY
77516: PUSH
77517: LD_INT 2
77519: ARRAY
77520: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77521: LD_ADDR_VAR 0 12
77525: PUSH
77526: LD_VAR 0 14
77530: PUSH
77531: LD_INT 1
77533: ARRAY
77534: PUSH
77535: LD_INT 3
77537: ARRAY
77538: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77539: LD_VAR 0 11
77543: PPUSH
77544: LD_VAR 0 12
77548: PPUSH
77549: CALL_OW 351
77553: NOT
77554: IFTRUE 77573
77556: PUSH
77557: LD_VAR 0 11
77561: PPUSH
77562: LD_VAR 0 12
77566: PPUSH
77567: CALL_OW 554
77571: NOT
77572: OR
77573: IFFALSE 77607
// begin task := Delete ( task , 1 ) ;
77575: LD_ADDR_VAR 0 14
77579: PUSH
77580: LD_VAR 0 14
77584: PPUSH
77585: LD_INT 1
77587: PPUSH
77588: CALL_OW 3
77592: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77593: LD_VAR 0 1
77597: PPUSH
77598: LD_VAR 0 14
77602: PPUSH
77603: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77607: LD_VAR 0 1
77611: PPUSH
77612: CALL_OW 314
77616: NOT
77617: IFFALSE 77452
// end ;
77619: LD_VAR 0 5
77623: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77624: LD_EXP 123
77628: NOT
77629: IFFALSE 77679
77631: GO 77633
77633: DISABLE
// begin initHack := true ;
77634: LD_ADDR_EXP 123
77638: PUSH
77639: LD_INT 1
77641: ST_TO_ADDR
// hackTanks := [ ] ;
77642: LD_ADDR_EXP 124
77646: PUSH
77647: EMPTY
77648: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77649: LD_ADDR_EXP 125
77653: PUSH
77654: EMPTY
77655: ST_TO_ADDR
// hackLimit := 3 ;
77656: LD_ADDR_EXP 126
77660: PUSH
77661: LD_INT 3
77663: ST_TO_ADDR
// hackDist := 12 ;
77664: LD_ADDR_EXP 127
77668: PUSH
77669: LD_INT 12
77671: ST_TO_ADDR
// hackCounter := [ ] ;
77672: LD_ADDR_EXP 128
77676: PUSH
77677: EMPTY
77678: ST_TO_ADDR
// end ;
77679: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77680: LD_EXP 123
77684: IFFALSE 77702
77686: PUSH
77687: LD_INT 34
77689: PUSH
77690: LD_INT 99
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: PPUSH
77697: CALL_OW 69
77701: AND
77702: IFFALSE 77955
77704: GO 77706
77706: DISABLE
77707: LD_INT 0
77709: PPUSH
77710: PPUSH
// begin enable ;
77711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77712: LD_ADDR_VAR 0 1
77716: PUSH
77717: LD_INT 34
77719: PUSH
77720: LD_INT 99
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PPUSH
77727: CALL_OW 69
77731: PUSH
77732: FOR_IN
77733: IFFALSE 77953
// begin if not i in hackTanks then
77735: LD_VAR 0 1
77739: PUSH
77740: LD_EXP 124
77744: IN
77745: NOT
77746: IFFALSE 77829
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77748: LD_ADDR_EXP 124
77752: PUSH
77753: LD_EXP 124
77757: PPUSH
77758: LD_EXP 124
77762: PUSH
77763: LD_INT 1
77765: PLUS
77766: PPUSH
77767: LD_VAR 0 1
77771: PPUSH
77772: CALL_OW 1
77776: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77777: LD_ADDR_EXP 125
77781: PUSH
77782: LD_EXP 125
77786: PPUSH
77787: LD_EXP 125
77791: PUSH
77792: LD_INT 1
77794: PLUS
77795: PPUSH
77796: EMPTY
77797: PPUSH
77798: CALL_OW 1
77802: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77803: LD_ADDR_EXP 128
77807: PUSH
77808: LD_EXP 128
77812: PPUSH
77813: LD_EXP 128
77817: PUSH
77818: LD_INT 1
77820: PLUS
77821: PPUSH
77822: EMPTY
77823: PPUSH
77824: CALL_OW 1
77828: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77829: LD_VAR 0 1
77833: PPUSH
77834: CALL_OW 302
77838: NOT
77839: IFFALSE 77852
// begin HackUnlinkAll ( i ) ;
77841: LD_VAR 0 1
77845: PPUSH
77846: CALL 77958 0 1
// continue ;
77850: GO 77732
// end ; HackCheckCapturedStatus ( i ) ;
77852: LD_VAR 0 1
77856: PPUSH
77857: CALL 78403 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77861: LD_ADDR_VAR 0 2
77865: PUSH
77866: LD_INT 81
77868: PUSH
77869: LD_VAR 0 1
77873: PPUSH
77874: CALL_OW 255
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 33
77885: PUSH
77886: LD_INT 3
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 91
77895: PUSH
77896: LD_VAR 0 1
77900: PUSH
77901: LD_EXP 127
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: LIST
77910: PUSH
77911: LD_INT 50
77913: PUSH
77914: EMPTY
77915: LIST
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: PPUSH
77923: CALL_OW 69
77927: ST_TO_ADDR
// if not tmp then
77928: LD_VAR 0 2
77932: NOT
77933: IFFALSE 77937
// continue ;
77935: GO 77732
// HackLink ( i , tmp ) ;
77937: LD_VAR 0 1
77941: PPUSH
77942: LD_VAR 0 2
77946: PPUSH
77947: CALL 78094 0 2
// end ;
77951: GO 77732
77953: POP
77954: POP
// end ;
77955: PPOPN 2
77957: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77958: LD_INT 0
77960: PPUSH
77961: PPUSH
77962: PPUSH
// if not hack in hackTanks then
77963: LD_VAR 0 1
77967: PUSH
77968: LD_EXP 124
77972: IN
77973: NOT
77974: IFFALSE 77978
// exit ;
77976: GO 78089
// index := GetElementIndex ( hackTanks , hack ) ;
77978: LD_ADDR_VAR 0 4
77982: PUSH
77983: LD_EXP 124
77987: PPUSH
77988: LD_VAR 0 1
77992: PPUSH
77993: CALL 20623 0 2
77997: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77998: LD_EXP 125
78002: PUSH
78003: LD_VAR 0 4
78007: ARRAY
78008: IFFALSE 78089
// begin for i in hackTanksCaptured [ index ] do
78010: LD_ADDR_VAR 0 3
78014: PUSH
78015: LD_EXP 125
78019: PUSH
78020: LD_VAR 0 4
78024: ARRAY
78025: PUSH
78026: FOR_IN
78027: IFFALSE 78053
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
78029: LD_VAR 0 3
78033: PUSH
78034: LD_INT 1
78036: ARRAY
78037: PPUSH
78038: LD_VAR 0 3
78042: PUSH
78043: LD_INT 2
78045: ARRAY
78046: PPUSH
78047: CALL_OW 235
78051: GO 78026
78053: POP
78054: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
78055: LD_ADDR_EXP 125
78059: PUSH
78060: LD_EXP 125
78064: PPUSH
78065: LD_VAR 0 4
78069: PPUSH
78070: EMPTY
78071: PPUSH
78072: CALL_OW 1
78076: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
78077: LD_VAR 0 1
78081: PPUSH
78082: LD_INT 0
78084: PPUSH
78085: CALL_OW 505
// end ; end ;
78089: LD_VAR 0 2
78093: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78094: LD_INT 0
78096: PPUSH
78097: PPUSH
78098: PPUSH
// if not hack in hackTanks or not vehicles then
78099: LD_VAR 0 1
78103: PUSH
78104: LD_EXP 124
78108: IN
78109: NOT
78110: IFTRUE 78119
78112: PUSH
78113: LD_VAR 0 2
78117: NOT
78118: OR
78119: IFFALSE 78123
// exit ;
78121: GO 78398
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78123: LD_ADDR_VAR 0 2
78127: PUSH
78128: LD_VAR 0 1
78132: PPUSH
78133: LD_VAR 0 2
78137: PPUSH
78138: LD_INT 1
78140: PPUSH
78141: LD_INT 1
78143: PPUSH
78144: CALL 21275 0 4
78148: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78149: LD_ADDR_VAR 0 5
78153: PUSH
78154: LD_EXP 124
78158: PPUSH
78159: LD_VAR 0 1
78163: PPUSH
78164: CALL 20623 0 2
78168: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78169: LD_EXP 125
78173: PUSH
78174: LD_VAR 0 5
78178: ARRAY
78179: PUSH
78180: LD_EXP 126
78184: LESS
78185: IFFALSE 78374
// begin for i := 1 to vehicles do
78187: LD_ADDR_VAR 0 4
78191: PUSH
78192: DOUBLE
78193: LD_INT 1
78195: DEC
78196: ST_TO_ADDR
78197: LD_VAR 0 2
78201: PUSH
78202: FOR_TO
78203: IFFALSE 78372
// begin if hackTanksCaptured [ index ] = hackLimit then
78205: LD_EXP 125
78209: PUSH
78210: LD_VAR 0 5
78214: ARRAY
78215: PUSH
78216: LD_EXP 126
78220: EQUAL
78221: IFFALSE 78225
// break ;
78223: GO 78372
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78225: LD_ADDR_EXP 128
78229: PUSH
78230: LD_EXP 128
78234: PPUSH
78235: LD_VAR 0 5
78239: PPUSH
78240: LD_EXP 128
78244: PUSH
78245: LD_VAR 0 5
78249: ARRAY
78250: PUSH
78251: LD_INT 1
78253: PLUS
78254: PPUSH
78255: CALL_OW 1
78259: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78260: LD_ADDR_EXP 125
78264: PUSH
78265: LD_EXP 125
78269: PPUSH
78270: LD_VAR 0 5
78274: PUSH
78275: LD_EXP 125
78279: PUSH
78280: LD_VAR 0 5
78284: ARRAY
78285: PUSH
78286: LD_INT 1
78288: PLUS
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PPUSH
78294: LD_VAR 0 2
78298: PUSH
78299: LD_VAR 0 4
78303: ARRAY
78304: PUSH
78305: LD_VAR 0 2
78309: PUSH
78310: LD_VAR 0 4
78314: ARRAY
78315: PPUSH
78316: CALL_OW 255
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PPUSH
78325: CALL 20840 0 3
78329: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78330: LD_VAR 0 2
78334: PUSH
78335: LD_VAR 0 4
78339: ARRAY
78340: PPUSH
78341: LD_VAR 0 1
78345: PPUSH
78346: CALL_OW 255
78350: PPUSH
78351: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78355: LD_VAR 0 2
78359: PUSH
78360: LD_VAR 0 4
78364: ARRAY
78365: PPUSH
78366: CALL_OW 141
// end ;
78370: GO 78202
78372: POP
78373: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78374: LD_VAR 0 1
78378: PPUSH
78379: LD_EXP 125
78383: PUSH
78384: LD_VAR 0 5
78388: ARRAY
78389: PUSH
78390: LD_INT 0
78392: PLUS
78393: PPUSH
78394: CALL_OW 505
// end ;
78398: LD_VAR 0 3
78402: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78403: LD_INT 0
78405: PPUSH
78406: PPUSH
78407: PPUSH
78408: PPUSH
// if not hack in hackTanks then
78409: LD_VAR 0 1
78413: PUSH
78414: LD_EXP 124
78418: IN
78419: NOT
78420: IFFALSE 78424
// exit ;
78422: GO 78668
// index := GetElementIndex ( hackTanks , hack ) ;
78424: LD_ADDR_VAR 0 4
78428: PUSH
78429: LD_EXP 124
78433: PPUSH
78434: LD_VAR 0 1
78438: PPUSH
78439: CALL 20623 0 2
78443: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78444: LD_ADDR_VAR 0 3
78448: PUSH
78449: DOUBLE
78450: LD_EXP 125
78454: PUSH
78455: LD_VAR 0 4
78459: ARRAY
78460: INC
78461: ST_TO_ADDR
78462: LD_INT 1
78464: PUSH
78465: FOR_DOWNTO
78466: IFFALSE 78642
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78468: LD_ADDR_VAR 0 5
78472: PUSH
78473: LD_EXP 125
78477: PUSH
78478: LD_VAR 0 4
78482: ARRAY
78483: PUSH
78484: LD_VAR 0 3
78488: ARRAY
78489: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78490: LD_VAR 0 5
78494: PUSH
78495: LD_INT 1
78497: ARRAY
78498: PPUSH
78499: CALL_OW 302
78503: NOT
78504: IFTRUE 78532
78506: PUSH
78507: LD_VAR 0 5
78511: PUSH
78512: LD_INT 1
78514: ARRAY
78515: PPUSH
78516: CALL_OW 255
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: CALL_OW 255
78530: NONEQUAL
78531: OR
78532: IFFALSE 78640
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78534: LD_VAR 0 5
78538: PUSH
78539: LD_INT 1
78541: ARRAY
78542: PPUSH
78543: CALL_OW 305
78547: IFFALSE 78575
78549: PUSH
78550: LD_VAR 0 5
78554: PUSH
78555: LD_INT 1
78557: ARRAY
78558: PPUSH
78559: CALL_OW 255
78563: PUSH
78564: LD_VAR 0 1
78568: PPUSH
78569: CALL_OW 255
78573: EQUAL
78574: AND
78575: IFFALSE 78599
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78577: LD_VAR 0 5
78581: PUSH
78582: LD_INT 1
78584: ARRAY
78585: PPUSH
78586: LD_VAR 0 5
78590: PUSH
78591: LD_INT 2
78593: ARRAY
78594: PPUSH
78595: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78599: LD_ADDR_EXP 125
78603: PUSH
78604: LD_EXP 125
78608: PPUSH
78609: LD_VAR 0 4
78613: PPUSH
78614: LD_EXP 125
78618: PUSH
78619: LD_VAR 0 4
78623: ARRAY
78624: PPUSH
78625: LD_VAR 0 3
78629: PPUSH
78630: CALL_OW 3
78634: PPUSH
78635: CALL_OW 1
78639: ST_TO_ADDR
// end ; end ;
78640: GO 78465
78642: POP
78643: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78644: LD_VAR 0 1
78648: PPUSH
78649: LD_EXP 125
78653: PUSH
78654: LD_VAR 0 4
78658: ARRAY
78659: PUSH
78660: LD_INT 0
78662: PLUS
78663: PPUSH
78664: CALL_OW 505
// end ;
78668: LD_VAR 0 2
78672: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78673: LD_INT 0
78675: PPUSH
78676: PPUSH
78677: PPUSH
78678: PPUSH
// if not hack in hackTanks then
78679: LD_VAR 0 1
78683: PUSH
78684: LD_EXP 124
78688: IN
78689: NOT
78690: IFFALSE 78694
// exit ;
78692: GO 78779
// index := GetElementIndex ( hackTanks , hack ) ;
78694: LD_ADDR_VAR 0 5
78698: PUSH
78699: LD_EXP 124
78703: PPUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: CALL 20623 0 2
78713: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78714: LD_ADDR_VAR 0 4
78718: PUSH
78719: DOUBLE
78720: LD_INT 1
78722: DEC
78723: ST_TO_ADDR
78724: LD_EXP 125
78728: PUSH
78729: LD_VAR 0 5
78733: ARRAY
78734: PUSH
78735: FOR_TO
78736: IFFALSE 78777
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78738: LD_EXP 125
78742: PUSH
78743: LD_VAR 0 5
78747: ARRAY
78748: PUSH
78749: LD_VAR 0 4
78753: ARRAY
78754: PUSH
78755: LD_INT 1
78757: ARRAY
78758: PUSH
78759: LD_VAR 0 2
78763: EQUAL
78764: IFFALSE 78775
// KillUnit ( vehicle ) ;
78766: LD_VAR 0 2
78770: PPUSH
78771: CALL_OW 66
78775: GO 78735
78777: POP
78778: POP
// end ;
78779: LD_VAR 0 3
78783: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
78784: LD_EXP 129
78788: NOT
78789: IFFALSE 78922
78791: GO 78793
78793: DISABLE
78794: LD_INT 0
78796: PPUSH
// begin initMiner := true ;
78797: LD_ADDR_EXP 129
78801: PUSH
78802: LD_INT 1
78804: ST_TO_ADDR
// minersList := [ ] ;
78805: LD_ADDR_EXP 130
78809: PUSH
78810: EMPTY
78811: ST_TO_ADDR
// minerMinesList := [ ] ;
78812: LD_ADDR_EXP 131
78816: PUSH
78817: EMPTY
78818: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
78819: LD_ADDR_EXP 132
78823: PUSH
78824: LD_INT 10
78826: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78827: LD_ADDR_VAR 0 1
78831: PUSH
78832: LD_INT 34
78834: PUSH
78835: LD_INT 81
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: PPUSH
78842: CALL_OW 69
78846: PUSH
78847: FOR_IN
78848: IFFALSE 78920
// begin if not i in minersList then
78850: LD_VAR 0 1
78854: PUSH
78855: LD_EXP 130
78859: IN
78860: NOT
78861: IFFALSE 78918
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78863: LD_ADDR_EXP 130
78867: PUSH
78868: LD_EXP 130
78872: PPUSH
78873: LD_EXP 130
78877: PUSH
78878: LD_INT 1
78880: PLUS
78881: PPUSH
78882: LD_VAR 0 1
78886: PPUSH
78887: CALL_OW 1
78891: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78892: LD_ADDR_EXP 131
78896: PUSH
78897: LD_EXP 131
78901: PPUSH
78902: LD_EXP 131
78906: PUSH
78907: LD_INT 1
78909: PLUS
78910: PPUSH
78911: EMPTY
78912: PPUSH
78913: CALL_OW 1
78917: ST_TO_ADDR
// end end ;
78918: GO 78847
78920: POP
78921: POP
// end ;
78922: PPOPN 1
78924: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
78925: LD_EXP 129
78929: IFFALSE 78960
78931: PUSH
78932: LD_EXP 131
78936: PPUSH
78937: CALL 17922 0 1
78941: IFTRUE 78959
78943: PUSH
78944: LD_INT 34
78946: PUSH
78947: LD_INT 81
78949: PUSH
78950: EMPTY
78951: LIST
78952: LIST
78953: PPUSH
78954: CALL_OW 69
78958: OR
78959: AND
78960: IFFALSE 79480
78962: GO 78964
78964: DISABLE
78965: LD_INT 0
78967: PPUSH
78968: PPUSH
78969: PPUSH
78970: PPUSH
// begin enable ;
78971: ENABLE
// for i := minerMinesList downto 1 do
78972: LD_ADDR_VAR 0 1
78976: PUSH
78977: DOUBLE
78978: LD_EXP 131
78982: INC
78983: ST_TO_ADDR
78984: LD_INT 1
78986: PUSH
78987: FOR_DOWNTO
78988: IFFALSE 79478
// begin side := GetSide ( minersList [ i ] ) ;
78990: LD_ADDR_VAR 0 3
78994: PUSH
78995: LD_EXP 130
78999: PUSH
79000: LD_VAR 0 1
79004: ARRAY
79005: PPUSH
79006: CALL_OW 255
79010: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
79011: LD_EXP 130
79015: PUSH
79016: LD_VAR 0 1
79020: ARRAY
79021: PPUSH
79022: CALL_OW 300
79026: IFFALSE 79047
79028: PUSH
79029: LD_VAR 0 3
79033: PUSH
79034: LD_OWVAR 2
79038: PUSH
79039: LD_INT 9
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: IN
79046: AND
79047: IFFALSE 79080
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
79049: LD_EXP 130
79053: PUSH
79054: LD_VAR 0 1
79058: ARRAY
79059: PPUSH
79060: LD_EXP 131
79064: PUSH
79065: LD_VAR 0 1
79069: ARRAY
79070: PPUSH
79071: CALL 17922 0 1
79075: PPUSH
79076: CALL_OW 505
// if not minerMinesList [ i ] then
79080: LD_EXP 131
79084: PUSH
79085: LD_VAR 0 1
79089: ARRAY
79090: NOT
79091: IFFALSE 79095
// continue ;
79093: GO 78987
// for j := minerMinesList [ i ] downto 1 do
79095: LD_ADDR_VAR 0 2
79099: PUSH
79100: DOUBLE
79101: LD_EXP 131
79105: PUSH
79106: LD_VAR 0 1
79110: ARRAY
79111: INC
79112: ST_TO_ADDR
79113: LD_INT 1
79115: PUSH
79116: FOR_DOWNTO
79117: IFFALSE 79474
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
79119: LD_EXP 130
79123: PUSH
79124: LD_VAR 0 1
79128: ARRAY
79129: PPUSH
79130: CALL_OW 301
79134: IFTRUE 79154
79136: PUSH
79137: LD_EXP 130
79141: PUSH
79142: LD_VAR 0 1
79146: ARRAY
79147: PPUSH
79148: CALL_OW 305
79152: NOT
79153: OR
79154: IFFALSE 79245
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79156: LD_EXP 131
79160: PUSH
79161: LD_VAR 0 1
79165: ARRAY
79166: PUSH
79167: LD_VAR 0 2
79171: ARRAY
79172: PUSH
79173: LD_INT 1
79175: ARRAY
79176: PPUSH
79177: LD_EXP 131
79181: PUSH
79182: LD_VAR 0 1
79186: ARRAY
79187: PUSH
79188: LD_VAR 0 2
79192: ARRAY
79193: PUSH
79194: LD_INT 2
79196: ARRAY
79197: PPUSH
79198: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79202: LD_ADDR_EXP 131
79206: PUSH
79207: LD_EXP 131
79211: PPUSH
79212: LD_VAR 0 1
79216: PPUSH
79217: LD_EXP 131
79221: PUSH
79222: LD_VAR 0 1
79226: ARRAY
79227: PPUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: CALL_OW 3
79237: PPUSH
79238: CALL_OW 1
79242: ST_TO_ADDR
// continue ;
79243: GO 79116
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
79245: LD_ADDR_VAR 0 4
79249: PUSH
79250: LD_EXP 131
79254: PUSH
79255: LD_VAR 0 1
79259: ARRAY
79260: PUSH
79261: LD_VAR 0 2
79265: ARRAY
79266: PUSH
79267: LD_INT 1
79269: ARRAY
79270: PPUSH
79271: LD_EXP 131
79275: PUSH
79276: LD_VAR 0 1
79280: ARRAY
79281: PUSH
79282: LD_VAR 0 2
79286: ARRAY
79287: PUSH
79288: LD_INT 2
79290: ARRAY
79291: PPUSH
79292: CALL_OW 428
79296: ST_TO_ADDR
// if not tmp then
79297: LD_VAR 0 4
79301: NOT
79302: IFFALSE 79306
// continue ;
79304: GO 79116
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79306: LD_VAR 0 4
79310: PUSH
79311: LD_INT 81
79313: PUSH
79314: LD_VAR 0 3
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: PPUSH
79323: CALL_OW 69
79327: IN
79328: IFFALSE 79378
79330: PUSH
79331: LD_EXP 131
79335: PUSH
79336: LD_VAR 0 1
79340: ARRAY
79341: PUSH
79342: LD_VAR 0 2
79346: ARRAY
79347: PUSH
79348: LD_INT 1
79350: ARRAY
79351: PPUSH
79352: LD_EXP 131
79356: PUSH
79357: LD_VAR 0 1
79361: ARRAY
79362: PUSH
79363: LD_VAR 0 2
79367: ARRAY
79368: PUSH
79369: LD_INT 2
79371: ARRAY
79372: PPUSH
79373: CALL_OW 458
79377: AND
79378: IFFALSE 79472
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79380: LD_EXP 131
79384: PUSH
79385: LD_VAR 0 1
79389: ARRAY
79390: PUSH
79391: LD_VAR 0 2
79395: ARRAY
79396: PUSH
79397: LD_INT 1
79399: ARRAY
79400: PPUSH
79401: LD_EXP 131
79405: PUSH
79406: LD_VAR 0 1
79410: ARRAY
79411: PUSH
79412: LD_VAR 0 2
79416: ARRAY
79417: PUSH
79418: LD_INT 2
79420: ARRAY
79421: PPUSH
79422: LD_VAR 0 3
79426: PPUSH
79427: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79431: LD_ADDR_EXP 131
79435: PUSH
79436: LD_EXP 131
79440: PPUSH
79441: LD_VAR 0 1
79445: PPUSH
79446: LD_EXP 131
79450: PUSH
79451: LD_VAR 0 1
79455: ARRAY
79456: PPUSH
79457: LD_VAR 0 2
79461: PPUSH
79462: CALL_OW 3
79466: PPUSH
79467: CALL_OW 1
79471: ST_TO_ADDR
// end ; end ;
79472: GO 79116
79474: POP
79475: POP
// end ;
79476: GO 78987
79478: POP
79479: POP
// end ;
79480: PPOPN 4
79482: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
79483: LD_INT 0
79485: PPUSH
79486: PPUSH
79487: PPUSH
79488: PPUSH
// result := false ;
79489: LD_ADDR_VAR 0 4
79493: PUSH
79494: LD_INT 0
79496: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79497: LD_VAR 0 1
79501: PPUSH
79502: CALL_OW 264
79506: PUSH
79507: LD_INT 81
79509: EQUAL
79510: NOT
79511: IFFALSE 79515
// exit ;
79513: GO 79885
// side := GetSide ( unit ) ;
79515: LD_ADDR_VAR 0 6
79519: PUSH
79520: LD_VAR 0 1
79524: PPUSH
79525: CALL_OW 255
79529: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
79530: LD_ADDR_VAR 0 5
79534: PUSH
79535: LD_EXP 130
79539: PPUSH
79540: LD_VAR 0 1
79544: PPUSH
79545: CALL 20623 0 2
79549: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79550: LD_EXP 131
79554: PUSH
79555: LD_VAR 0 5
79559: ARRAY
79560: PUSH
79561: LD_EXP 132
79565: GREATEREQUAL
79566: IFFALSE 79570
// exit ;
79568: GO 79885
// ComMoveXY ( unit , x , y ) ;
79570: LD_VAR 0 1
79574: PPUSH
79575: LD_VAR 0 2
79579: PPUSH
79580: LD_VAR 0 3
79584: PPUSH
79585: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79589: LD_INT 35
79591: PPUSH
79592: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79596: LD_VAR 0 1
79600: PPUSH
79601: LD_VAR 0 2
79605: PPUSH
79606: LD_VAR 0 3
79610: PPUSH
79611: CALL 52679 0 3
79615: NOT
79616: IFFALSE 79629
79618: PUSH
79619: LD_VAR 0 1
79623: PPUSH
79624: CALL_OW 314
79628: AND
79629: IFFALSE 79633
// exit ;
79631: GO 79885
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79633: LD_VAR 0 2
79637: PPUSH
79638: LD_VAR 0 3
79642: PPUSH
79643: CALL_OW 428
79647: PUSH
79648: LD_VAR 0 1
79652: EQUAL
79653: IFFALSE 79667
79655: PUSH
79656: LD_VAR 0 1
79660: PPUSH
79661: CALL_OW 314
79665: NOT
79666: AND
79667: IFFALSE 79589
// if MineAtPos ( x , y ) then
79669: LD_VAR 0 2
79673: PPUSH
79674: LD_VAR 0 3
79678: PPUSH
79679: CALL_OW 458
79683: IFFALSE 79687
// exit ;
79685: GO 79885
// if your_side = side then
79687: LD_OWVAR 2
79691: PUSH
79692: LD_VAR 0 6
79696: EQUAL
79697: IFFALSE 79716
// PlaySoundXY ( x , y , PlantMine ) ;
79699: LD_VAR 0 2
79703: PPUSH
79704: LD_VAR 0 3
79708: PPUSH
79709: LD_STRING PlantMine
79711: PPUSH
79712: CALL_OW 366
// repeat wait ( 1 ) ;
79716: LD_INT 1
79718: PPUSH
79719: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
79723: LD_VAR 0 2
79727: PPUSH
79728: LD_VAR 0 3
79732: PPUSH
79733: LD_VAR 0 6
79737: PPUSH
79738: LD_INT 0
79740: PPUSH
79741: CALL_OW 454
79745: IFFALSE 79716
// if MineAtPos ( x , y ) then
79747: LD_VAR 0 2
79751: PPUSH
79752: LD_VAR 0 3
79756: PPUSH
79757: CALL_OW 458
79761: IFFALSE 79877
// begin for i in minerMinesList [ index ] do
79763: LD_ADDR_VAR 0 7
79767: PUSH
79768: LD_EXP 131
79772: PUSH
79773: LD_VAR 0 5
79777: ARRAY
79778: PUSH
79779: FOR_IN
79780: IFFALSE 79822
// if i [ 1 ] = x and i [ 2 ] = y then
79782: LD_VAR 0 7
79786: PUSH
79787: LD_INT 1
79789: ARRAY
79790: PUSH
79791: LD_VAR 0 2
79795: EQUAL
79796: IFFALSE 79814
79798: PUSH
79799: LD_VAR 0 7
79803: PUSH
79804: LD_INT 2
79806: ARRAY
79807: PUSH
79808: LD_VAR 0 3
79812: EQUAL
79813: AND
79814: IFFALSE 79820
// exit ;
79816: POP
79817: POP
79818: GO 79885
79820: GO 79779
79822: POP
79823: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79824: LD_ADDR_EXP 131
79828: PUSH
79829: LD_EXP 131
79833: PPUSH
79834: LD_VAR 0 5
79838: PUSH
79839: LD_EXP 131
79843: PUSH
79844: LD_VAR 0 5
79848: ARRAY
79849: PUSH
79850: LD_INT 1
79852: PLUS
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PPUSH
79858: LD_VAR 0 2
79862: PUSH
79863: LD_VAR 0 3
79867: PUSH
79868: EMPTY
79869: LIST
79870: LIST
79871: PPUSH
79872: CALL 20840 0 3
79876: ST_TO_ADDR
// end ; result := true ;
79877: LD_ADDR_VAR 0 4
79881: PUSH
79882: LD_INT 1
79884: ST_TO_ADDR
// end ;
79885: LD_VAR 0 4
79889: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79890: LD_INT 0
79892: PPUSH
79893: PPUSH
79894: PPUSH
// if not unit in minersList then
79895: LD_VAR 0 1
79899: PUSH
79900: LD_EXP 130
79904: IN
79905: NOT
79906: IFFALSE 79910
// exit ;
79908: GO 80117
// index := GetElementIndex ( minersList , unit ) ;
79910: LD_ADDR_VAR 0 6
79914: PUSH
79915: LD_EXP 130
79919: PPUSH
79920: LD_VAR 0 1
79924: PPUSH
79925: CALL 20623 0 2
79929: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79930: LD_ADDR_VAR 0 5
79934: PUSH
79935: DOUBLE
79936: LD_EXP 131
79940: PUSH
79941: LD_VAR 0 6
79945: ARRAY
79946: INC
79947: ST_TO_ADDR
79948: LD_INT 1
79950: PUSH
79951: FOR_DOWNTO
79952: IFFALSE 80115
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79954: LD_EXP 131
79958: PUSH
79959: LD_VAR 0 6
79963: ARRAY
79964: PUSH
79965: LD_VAR 0 5
79969: ARRAY
79970: PUSH
79971: LD_INT 1
79973: ARRAY
79974: PPUSH
79975: LD_EXP 131
79979: PUSH
79980: LD_VAR 0 6
79984: ARRAY
79985: PUSH
79986: LD_VAR 0 5
79990: ARRAY
79991: PUSH
79992: LD_INT 2
79994: ARRAY
79995: PPUSH
79996: LD_VAR 0 2
80000: PPUSH
80001: LD_VAR 0 3
80005: PPUSH
80006: CALL_OW 298
80010: PUSH
80011: LD_INT 6
80013: LESS
80014: IFFALSE 80113
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80016: LD_EXP 131
80020: PUSH
80021: LD_VAR 0 6
80025: ARRAY
80026: PUSH
80027: LD_VAR 0 5
80031: ARRAY
80032: PUSH
80033: LD_INT 1
80035: ARRAY
80036: PPUSH
80037: LD_EXP 131
80041: PUSH
80042: LD_VAR 0 6
80046: ARRAY
80047: PUSH
80048: LD_VAR 0 5
80052: ARRAY
80053: PUSH
80054: LD_INT 2
80056: ARRAY
80057: PPUSH
80058: LD_VAR 0 1
80062: PPUSH
80063: CALL_OW 255
80067: PPUSH
80068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80072: LD_ADDR_EXP 131
80076: PUSH
80077: LD_EXP 131
80081: PPUSH
80082: LD_VAR 0 6
80086: PPUSH
80087: LD_EXP 131
80091: PUSH
80092: LD_VAR 0 6
80096: ARRAY
80097: PPUSH
80098: LD_VAR 0 5
80102: PPUSH
80103: CALL_OW 3
80107: PPUSH
80108: CALL_OW 1
80112: ST_TO_ADDR
// end ; end ;
80113: GO 79951
80115: POP
80116: POP
// end ;
80117: LD_VAR 0 4
80121: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
80122: LD_INT 0
80124: PPUSH
80125: PPUSH
80126: PPUSH
80127: PPUSH
80128: PPUSH
80129: PPUSH
80130: PPUSH
80131: PPUSH
80132: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
80133: LD_VAR 0 1
80137: PPUSH
80138: CALL_OW 264
80142: PUSH
80143: LD_INT 81
80145: EQUAL
80146: NOT
80147: IFTRUE 80162
80149: PUSH
80150: LD_VAR 0 1
80154: PUSH
80155: LD_EXP 130
80159: IN
80160: NOT
80161: OR
80162: IFFALSE 80166
// exit ;
80164: GO 80492
// index := GetElementIndex ( minersList , unit ) ;
80166: LD_ADDR_VAR 0 6
80170: PUSH
80171: LD_EXP 130
80175: PPUSH
80176: LD_VAR 0 1
80180: PPUSH
80181: CALL 20623 0 2
80185: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
80186: LD_ADDR_VAR 0 8
80190: PUSH
80191: LD_EXP 132
80195: PUSH
80196: LD_EXP 131
80200: PUSH
80201: LD_VAR 0 6
80205: ARRAY
80206: MINUS
80207: ST_TO_ADDR
// if not minesFreeAmount then
80208: LD_VAR 0 8
80212: NOT
80213: IFFALSE 80217
// exit ;
80215: GO 80492
// tmp := [ ] ;
80217: LD_ADDR_VAR 0 7
80221: PUSH
80222: EMPTY
80223: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80224: LD_ADDR_VAR 0 5
80228: PUSH
80229: DOUBLE
80230: LD_INT 1
80232: DEC
80233: ST_TO_ADDR
80234: LD_VAR 0 8
80238: PUSH
80239: FOR_TO
80240: IFFALSE 80439
// begin _d := rand ( 0 , 5 ) ;
80242: LD_ADDR_VAR 0 11
80246: PUSH
80247: LD_INT 0
80249: PPUSH
80250: LD_INT 5
80252: PPUSH
80253: CALL_OW 12
80257: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80258: LD_ADDR_VAR 0 12
80262: PUSH
80263: LD_INT 2
80265: PPUSH
80266: LD_INT 6
80268: PPUSH
80269: CALL_OW 12
80273: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80274: LD_ADDR_VAR 0 9
80278: PUSH
80279: LD_VAR 0 2
80283: PPUSH
80284: LD_VAR 0 11
80288: PPUSH
80289: LD_VAR 0 12
80293: PPUSH
80294: CALL_OW 272
80298: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80299: LD_ADDR_VAR 0 10
80303: PUSH
80304: LD_VAR 0 3
80308: PPUSH
80309: LD_VAR 0 11
80313: PPUSH
80314: LD_VAR 0 12
80318: PPUSH
80319: CALL_OW 273
80323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80324: LD_VAR 0 9
80328: PPUSH
80329: LD_VAR 0 10
80333: PPUSH
80334: CALL_OW 488
80338: IFFALSE 80362
80340: PUSH
80341: LD_VAR 0 9
80345: PUSH
80346: LD_VAR 0 10
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_VAR 0 7
80359: IN
80360: NOT
80361: AND
80362: IFFALSE 80381
80364: PUSH
80365: LD_VAR 0 9
80369: PPUSH
80370: LD_VAR 0 10
80374: PPUSH
80375: CALL_OW 458
80379: NOT
80380: AND
80381: IFFALSE 80423
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80383: LD_ADDR_VAR 0 7
80387: PUSH
80388: LD_VAR 0 7
80392: PPUSH
80393: LD_VAR 0 7
80397: PUSH
80398: LD_INT 1
80400: PLUS
80401: PPUSH
80402: LD_VAR 0 9
80406: PUSH
80407: LD_VAR 0 10
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PPUSH
80416: CALL_OW 1
80420: ST_TO_ADDR
80421: GO 80437
// i := i - 1 ;
80423: LD_ADDR_VAR 0 5
80427: PUSH
80428: LD_VAR 0 5
80432: PUSH
80433: LD_INT 1
80435: MINUS
80436: ST_TO_ADDR
// end ;
80437: GO 80239
80439: POP
80440: POP
// for i in tmp do
80441: LD_ADDR_VAR 0 5
80445: PUSH
80446: LD_VAR 0 7
80450: PUSH
80451: FOR_IN
80452: IFFALSE 80490
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80454: LD_VAR 0 1
80458: PPUSH
80459: LD_VAR 0 5
80463: PUSH
80464: LD_INT 1
80466: ARRAY
80467: PPUSH
80468: LD_VAR 0 5
80472: PUSH
80473: LD_INT 2
80475: ARRAY
80476: PPUSH
80477: CALL 79483 0 3
80481: NOT
80482: IFFALSE 80488
// exit ;
80484: POP
80485: POP
80486: GO 80492
80488: GO 80451
80490: POP
80491: POP
// end ;
80492: LD_VAR 0 4
80496: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
80497: LD_INT 0
80499: PPUSH
80500: PPUSH
80501: PPUSH
80502: PPUSH
80503: PPUSH
80504: PPUSH
80505: PPUSH
80506: PPUSH
80507: PPUSH
// if GetClass ( unit ) <> class_sniper then
80508: LD_VAR 0 1
80512: PPUSH
80513: CALL_OW 257
80517: PUSH
80518: LD_INT 5
80520: NONEQUAL
80521: IFFALSE 80525
// exit ;
80523: GO 80995
// dist := 8 ;
80525: LD_ADDR_VAR 0 5
80529: PUSH
80530: LD_INT 8
80532: ST_TO_ADDR
// viewRange := 12 ;
80533: LD_ADDR_VAR 0 8
80537: PUSH
80538: LD_INT 12
80540: ST_TO_ADDR
// side := GetSide ( unit ) ;
80541: LD_ADDR_VAR 0 6
80545: PUSH
80546: LD_VAR 0 1
80550: PPUSH
80551: CALL_OW 255
80555: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80556: LD_INT 61
80558: PPUSH
80559: LD_VAR 0 6
80563: PPUSH
80564: CALL_OW 321
80568: PUSH
80569: LD_INT 2
80571: EQUAL
80572: IFFALSE 80582
// viewRange := 16 ;
80574: LD_ADDR_VAR 0 8
80578: PUSH
80579: LD_INT 16
80581: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80582: LD_VAR 0 1
80586: PPUSH
80587: LD_VAR 0 2
80591: PPUSH
80592: LD_VAR 0 3
80596: PPUSH
80597: CALL_OW 297
80601: PUSH
80602: LD_VAR 0 5
80606: GREATER
80607: IFFALSE 80686
// begin ComMoveXY ( unit , x , y ) ;
80609: LD_VAR 0 1
80613: PPUSH
80614: LD_VAR 0 2
80618: PPUSH
80619: LD_VAR 0 3
80623: PPUSH
80624: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80628: LD_INT 35
80630: PPUSH
80631: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80635: LD_VAR 0 1
80639: PPUSH
80640: LD_VAR 0 2
80644: PPUSH
80645: LD_VAR 0 3
80649: PPUSH
80650: CALL 52679 0 3
80654: NOT
80655: IFFALSE 80659
// exit ;
80657: GO 80995
// until GetDistUnitXY ( unit , x , y ) < dist ;
80659: LD_VAR 0 1
80663: PPUSH
80664: LD_VAR 0 2
80668: PPUSH
80669: LD_VAR 0 3
80673: PPUSH
80674: CALL_OW 297
80678: PUSH
80679: LD_VAR 0 5
80683: LESS
80684: IFFALSE 80628
// end ; ComTurnXY ( unit , x , y ) ;
80686: LD_VAR 0 1
80690: PPUSH
80691: LD_VAR 0 2
80695: PPUSH
80696: LD_VAR 0 3
80700: PPUSH
80701: CALL_OW 118
// repeat if Multiplayer then
80705: LD_OWVAR 4
80709: IFFALSE 80720
// wait ( 35 ) else
80711: LD_INT 35
80713: PPUSH
80714: CALL_OW 67
80718: GO 80727
// wait ( 5 ) ;
80720: LD_INT 5
80722: PPUSH
80723: CALL_OW 67
// _d := GetDir ( unit ) ;
80727: LD_ADDR_VAR 0 11
80731: PUSH
80732: LD_VAR 0 1
80736: PPUSH
80737: CALL_OW 254
80741: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
80742: LD_ADDR_VAR 0 7
80746: PUSH
80747: LD_VAR 0 1
80751: PPUSH
80752: CALL_OW 250
80756: PPUSH
80757: LD_VAR 0 1
80761: PPUSH
80762: CALL_OW 251
80766: PPUSH
80767: LD_VAR 0 2
80771: PPUSH
80772: LD_VAR 0 3
80776: PPUSH
80777: CALL 55315 0 4
80781: ST_TO_ADDR
// until dir = _d ;
80782: LD_VAR 0 7
80786: PUSH
80787: LD_VAR 0 11
80791: EQUAL
80792: IFFALSE 80705
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
80794: LD_ADDR_VAR 0 9
80798: PUSH
80799: LD_VAR 0 1
80803: PPUSH
80804: CALL_OW 250
80808: PPUSH
80809: LD_VAR 0 7
80813: PPUSH
80814: LD_VAR 0 5
80818: PPUSH
80819: CALL_OW 272
80823: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
80824: LD_ADDR_VAR 0 10
80828: PUSH
80829: LD_VAR 0 1
80833: PPUSH
80834: CALL_OW 251
80838: PPUSH
80839: LD_VAR 0 7
80843: PPUSH
80844: LD_VAR 0 5
80848: PPUSH
80849: CALL_OW 273
80853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80854: LD_VAR 0 9
80858: PPUSH
80859: LD_VAR 0 10
80863: PPUSH
80864: CALL_OW 488
80868: NOT
80869: IFFALSE 80873
// exit ;
80871: GO 80995
// ComAnimCustom ( unit , 1 ) ;
80873: LD_VAR 0 1
80877: PPUSH
80878: LD_INT 1
80880: PPUSH
80881: CALL_OW 592
// p := 0 ;
80885: LD_ADDR_VAR 0 12
80889: PUSH
80890: LD_INT 0
80892: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80893: LD_VAR 0 9
80897: PPUSH
80898: LD_VAR 0 10
80902: PPUSH
80903: LD_VAR 0 6
80907: PPUSH
80908: LD_VAR 0 8
80912: PPUSH
80913: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
80917: LD_INT 35
80919: PPUSH
80920: CALL_OW 67
// p := Inc ( p ) ;
80924: LD_ADDR_VAR 0 12
80928: PUSH
80929: LD_VAR 0 12
80933: PPUSH
80934: CALL 55271 0 1
80938: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
80939: LD_VAR 0 12
80943: PUSH
80944: LD_INT 3
80946: EQUAL
80947: IFTRUE 80961
80949: PUSH
80950: LD_VAR 0 1
80954: PPUSH
80955: CALL_OW 302
80959: NOT
80960: OR
80961: IFTRUE 80974
80963: PUSH
80964: LD_VAR 0 1
80968: PPUSH
80969: CALL_OW 301
80973: OR
80974: IFFALSE 80917
// RemoveSeeing ( _x , _y , side ) ;
80976: LD_VAR 0 9
80980: PPUSH
80981: LD_VAR 0 10
80985: PPUSH
80986: LD_VAR 0 6
80990: PPUSH
80991: CALL_OW 331
// end ;
80995: LD_VAR 0 4
80999: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
81000: LD_INT 0
81002: PPUSH
81003: PPUSH
81004: PPUSH
81005: PPUSH
81006: PPUSH
81007: PPUSH
81008: PPUSH
81009: PPUSH
81010: PPUSH
81011: PPUSH
81012: PPUSH
// if not unit then
81013: LD_VAR 0 1
81017: NOT
81018: IFFALSE 81022
// exit ;
81020: GO 81293
// side := GetSide ( unit ) ;
81022: LD_ADDR_VAR 0 3
81026: PUSH
81027: LD_VAR 0 1
81031: PPUSH
81032: CALL_OW 255
81036: ST_TO_ADDR
// x := GetX ( unit ) ;
81037: LD_ADDR_VAR 0 5
81041: PUSH
81042: LD_VAR 0 1
81046: PPUSH
81047: CALL_OW 250
81051: ST_TO_ADDR
// y := GetY ( unit ) ;
81052: LD_ADDR_VAR 0 6
81056: PUSH
81057: LD_VAR 0 1
81061: PPUSH
81062: CALL_OW 251
81066: ST_TO_ADDR
// r := 8 ;
81067: LD_ADDR_VAR 0 4
81071: PUSH
81072: LD_INT 8
81074: ST_TO_ADDR
// if x - r < 0 then
81075: LD_VAR 0 5
81079: PUSH
81080: LD_VAR 0 4
81084: MINUS
81085: PUSH
81086: LD_INT 0
81088: LESS
81089: IFFALSE 81101
// min_x := 0 else
81091: LD_ADDR_VAR 0 7
81095: PUSH
81096: LD_INT 0
81098: ST_TO_ADDR
81099: GO 81117
// min_x := x - r ;
81101: LD_ADDR_VAR 0 7
81105: PUSH
81106: LD_VAR 0 5
81110: PUSH
81111: LD_VAR 0 4
81115: MINUS
81116: ST_TO_ADDR
// if y - r < 0 then
81117: LD_VAR 0 6
81121: PUSH
81122: LD_VAR 0 4
81126: MINUS
81127: PUSH
81128: LD_INT 0
81130: LESS
81131: IFFALSE 81143
// min_y := 0 else
81133: LD_ADDR_VAR 0 8
81137: PUSH
81138: LD_INT 0
81140: ST_TO_ADDR
81141: GO 81159
// min_y := y - r ;
81143: LD_ADDR_VAR 0 8
81147: PUSH
81148: LD_VAR 0 6
81152: PUSH
81153: LD_VAR 0 4
81157: MINUS
81158: ST_TO_ADDR
// max_x := x + r ;
81159: LD_ADDR_VAR 0 9
81163: PUSH
81164: LD_VAR 0 5
81168: PUSH
81169: LD_VAR 0 4
81173: PLUS
81174: ST_TO_ADDR
// max_y := y + r ;
81175: LD_ADDR_VAR 0 10
81179: PUSH
81180: LD_VAR 0 6
81184: PUSH
81185: LD_VAR 0 4
81189: PLUS
81190: ST_TO_ADDR
// for _x = min_x to max_x do
81191: LD_ADDR_VAR 0 11
81195: PUSH
81196: DOUBLE
81197: LD_VAR 0 7
81201: DEC
81202: ST_TO_ADDR
81203: LD_VAR 0 9
81207: PUSH
81208: FOR_TO
81209: IFFALSE 81291
// for _y = min_y to max_y do
81211: LD_ADDR_VAR 0 12
81215: PUSH
81216: DOUBLE
81217: LD_VAR 0 8
81221: DEC
81222: ST_TO_ADDR
81223: LD_VAR 0 10
81227: PUSH
81228: FOR_TO
81229: IFFALSE 81287
// begin if not ValidHex ( _x , _y ) then
81231: LD_VAR 0 11
81235: PPUSH
81236: LD_VAR 0 12
81240: PPUSH
81241: CALL_OW 488
81245: NOT
81246: IFFALSE 81250
// continue ;
81248: GO 81228
// if MineAtPos ( _x , _y ) then
81250: LD_VAR 0 11
81254: PPUSH
81255: LD_VAR 0 12
81259: PPUSH
81260: CALL_OW 458
81264: IFFALSE 81285
// ViewMineAtPos ( _x , _y , side ) ;
81266: LD_VAR 0 11
81270: PPUSH
81271: LD_VAR 0 12
81275: PPUSH
81276: LD_VAR 0 3
81280: PPUSH
81281: CALL_OW 457
// end ;
81285: GO 81228
81287: POP
81288: POP
81289: GO 81208
81291: POP
81292: POP
// end ;
81293: LD_VAR 0 2
81297: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
81298: LD_INT 0
81300: PPUSH
81301: PPUSH
81302: PPUSH
81303: PPUSH
81304: PPUSH
81305: PPUSH
81306: PPUSH
// if not units then
81307: LD_VAR 0 1
81311: NOT
81312: IFFALSE 81316
// exit ;
81314: GO 81780
// scaners := [ ] ;
81316: LD_ADDR_VAR 0 6
81320: PUSH
81321: EMPTY
81322: ST_TO_ADDR
// for i in units do
81323: LD_ADDR_VAR 0 3
81327: PUSH
81328: LD_VAR 0 1
81332: PUSH
81333: FOR_IN
81334: IFFALSE 81491
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
81336: LD_VAR 0 3
81340: PPUSH
81341: CALL_OW 264
81345: PUSH
81346: LD_INT 11
81348: NONEQUAL
81349: IFTRUE 81363
81351: PUSH
81352: LD_VAR 0 3
81356: PPUSH
81357: CALL_OW 302
81361: NOT
81362: OR
81363: IFTRUE 81380
81365: PUSH
81366: LD_VAR 0 3
81370: PPUSH
81371: CALL_OW 110
81375: PUSH
81376: LD_INT 502
81378: EQUAL
81379: OR
81380: IFFALSE 81384
// continue ;
81382: GO 81333
// ComStop ( i ) ;
81384: LD_VAR 0 3
81388: PPUSH
81389: CALL_OW 141
// x := GetX ( i ) ;
81393: LD_ADDR_VAR 0 4
81397: PUSH
81398: LD_VAR 0 3
81402: PPUSH
81403: CALL_OW 250
81407: ST_TO_ADDR
// y := GetY ( i ) ;
81408: LD_ADDR_VAR 0 5
81412: PUSH
81413: LD_VAR 0 3
81417: PPUSH
81418: CALL_OW 251
81422: ST_TO_ADDR
// if GetSide ( i ) = your_side then
81423: LD_VAR 0 3
81427: PPUSH
81428: CALL_OW 255
81432: PUSH
81433: LD_OWVAR 2
81437: EQUAL
81438: IFFALSE 81457
// PlaySoundXY ( x , y , mineDetector ) ;
81440: LD_VAR 0 4
81444: PPUSH
81445: LD_VAR 0 5
81449: PPUSH
81450: LD_STRING mineDetector
81452: PPUSH
81453: CALL_OW 366
// scaners := Join ( scaners , i ) ;
81457: LD_ADDR_VAR 0 6
81461: PUSH
81462: LD_VAR 0 6
81466: PPUSH
81467: LD_VAR 0 3
81471: PPUSH
81472: CALL 53898 0 2
81476: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
81477: LD_VAR 0 3
81481: PPUSH
81482: LD_INT 502
81484: PPUSH
81485: CALL_OW 109
// end ;
81489: GO 81333
81491: POP
81492: POP
// if not scaners then
81493: LD_VAR 0 6
81497: NOT
81498: IFFALSE 81502
// exit ;
81500: GO 81780
// wait ( 3 ) ;
81502: LD_INT 3
81504: PPUSH
81505: CALL_OW 67
// timer := 6 ;
81509: LD_ADDR_VAR 0 7
81513: PUSH
81514: LD_INT 6
81516: ST_TO_ADDR
// repeat for i in scaners do
81517: LD_ADDR_VAR 0 3
81521: PUSH
81522: LD_VAR 0 6
81526: PUSH
81527: FOR_IN
81528: IFFALSE 81678
// begin side := GetSide ( i ) ;
81530: LD_ADDR_VAR 0 8
81534: PUSH
81535: LD_VAR 0 3
81539: PPUSH
81540: CALL_OW 255
81544: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
81545: LD_VAR 0 3
81549: PPUSH
81550: CALL_OW 302
81554: NOT
81555: IFTRUE 81568
81557: PUSH
81558: LD_VAR 0 3
81562: PPUSH
81563: CALL_OW 314
81567: OR
81568: IFTRUE 81599
81570: PUSH
81571: LD_VAR 0 3
81575: PPUSH
81576: CALL_OW 263
81580: PUSH
81581: LD_INT 1
81583: EQUAL
81584: IFFALSE 81598
81586: PUSH
81587: LD_VAR 0 3
81591: PPUSH
81592: CALL_OW 311
81596: NOT
81597: AND
81598: OR
81599: IFFALSE 81643
// begin SetUnitDisplayNumber ( i , 0 ) ;
81601: LD_VAR 0 3
81605: PPUSH
81606: LD_INT 0
81608: PPUSH
81609: CALL_OW 505
// SetTag ( i , 0 ) ;
81613: LD_VAR 0 3
81617: PPUSH
81618: LD_INT 0
81620: PPUSH
81621: CALL_OW 109
// scaners := scaners diff i ;
81625: LD_ADDR_VAR 0 6
81629: PUSH
81630: LD_VAR 0 6
81634: PUSH
81635: LD_VAR 0 3
81639: DIFF
81640: ST_TO_ADDR
// continue ;
81641: GO 81527
// end ; if side in [ your_side , 9 ] then
81643: LD_VAR 0 8
81647: PUSH
81648: LD_OWVAR 2
81652: PUSH
81653: LD_INT 9
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: IN
81660: IFFALSE 81676
// SetUnitDisplayNumber ( i , timer ) ;
81662: LD_VAR 0 3
81666: PPUSH
81667: LD_VAR 0 7
81671: PPUSH
81672: CALL_OW 505
// end ;
81676: GO 81527
81678: POP
81679: POP
// if not scaners then
81680: LD_VAR 0 6
81684: NOT
81685: IFFALSE 81689
// exit ;
81687: GO 81780
// timer := Dec ( timer ) ;
81689: LD_ADDR_VAR 0 7
81693: PUSH
81694: LD_VAR 0 7
81698: PPUSH
81699: CALL 55293 0 1
81703: ST_TO_ADDR
// wait ( 0 0$1 ) ;
81704: LD_INT 35
81706: PPUSH
81707: CALL_OW 67
// until timer = 0 ;
81711: LD_VAR 0 7
81715: PUSH
81716: LD_INT 0
81718: EQUAL
81719: IFFALSE 81517
// if not scaners then
81721: LD_VAR 0 6
81725: NOT
81726: IFFALSE 81730
// exit ;
81728: GO 81780
// for i in scaners do
81730: LD_ADDR_VAR 0 3
81734: PUSH
81735: LD_VAR 0 6
81739: PUSH
81740: FOR_IN
81741: IFFALSE 81778
// begin SetUnitDisplayNumber ( i , 0 ) ;
81743: LD_VAR 0 3
81747: PPUSH
81748: LD_INT 0
81750: PPUSH
81751: CALL_OW 505
// SetTag ( i , 0 ) ;
81755: LD_VAR 0 3
81759: PPUSH
81760: LD_INT 0
81762: PPUSH
81763: CALL_OW 109
// RevealDetectorMine ( i ) ;
81767: LD_VAR 0 3
81771: PPUSH
81772: CALL 81000 0 1
// end ;
81776: GO 81740
81778: POP
81779: POP
// end ;
81780: LD_VAR 0 2
81784: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
81785: LD_INT 0
81787: PPUSH
// if p1 = mine_detector_mode then
81788: LD_VAR 0 2
81792: PUSH
81793: LD_INT 103
81795: EQUAL
81796: IFFALSE 81807
// DetectMine ( units ) ;
81798: LD_VAR 0 1
81802: PPUSH
81803: CALL 81298 0 1
// end ; end_of_file
81807: LD_VAR 0 7
81811: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81812: LD_VAR 0 1
81816: PUSH
81817: LD_INT 200
81819: DOUBLE
81820: GREATEREQUAL
81821: IFFALSE 81829
81823: LD_INT 299
81825: DOUBLE
81826: LESSEQUAL
81827: IFTRUE 81831
81829: GO 81863
81831: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81832: LD_VAR 0 1
81836: PPUSH
81837: LD_VAR 0 2
81841: PPUSH
81842: LD_VAR 0 3
81846: PPUSH
81847: LD_VAR 0 4
81851: PPUSH
81852: LD_VAR 0 5
81856: PPUSH
81857: CALL 76088 0 5
81861: GO 81940
81863: LD_INT 300
81865: DOUBLE
81866: GREATEREQUAL
81867: IFFALSE 81875
81869: LD_INT 399
81871: DOUBLE
81872: LESSEQUAL
81873: IFTRUE 81877
81875: GO 81939
81877: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81878: LD_VAR 0 1
81882: PPUSH
81883: LD_VAR 0 2
81887: PPUSH
81888: LD_VAR 0 3
81892: PPUSH
81893: LD_VAR 0 4
81897: PPUSH
81898: LD_VAR 0 5
81902: PPUSH
81903: LD_VAR 0 6
81907: PPUSH
81908: LD_VAR 0 7
81912: PPUSH
81913: LD_VAR 0 8
81917: PPUSH
81918: LD_VAR 0 9
81922: PPUSH
81923: LD_VAR 0 10
81927: PPUSH
81928: LD_VAR 0 11
81932: PPUSH
81933: CALL 71891 0 11
81937: GO 81940
81939: POP
// end ;
81940: PPOPN 11
81942: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81943: LD_VAR 0 1
81947: PPUSH
81948: LD_VAR 0 2
81952: PPUSH
81953: LD_VAR 0 3
81957: PPUSH
81958: LD_VAR 0 4
81962: PPUSH
81963: LD_VAR 0 5
81967: PPUSH
81968: CALL 75388 0 5
// end ;
81972: PPOPN 5
81974: END
