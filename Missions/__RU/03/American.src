Export Sikorski, omicronTroops, americanReinforcementsTroops, omicronVehicles, omicronAttackVehicles,
       omicronTechs, omicronConstructList, omicronBuildingsToBuild;
Export function PrepareAmerican;
var i, un, limit;
begin
uc_side := omicronSide;
uc_nation := nation_american;

americanReinforcementsTroops := [];
omicronTroops := [];
omicronVehicles := [];
omicronAttackVehicles := [];
omicronTechs := GetTechNation(omicronSide, nation_american, state_enabled);
omicronBuildingsToBuild := [];
omicronConstructList := [];

SetResourceType(GetBase(usDep), mat_cans, 1000);
SetResourceType(GetBase(usDep), mat_oil, 100);

SetBName(usDep, 'omikron');

for i in FilterAllUnits([[f_side, 1], [f_type, unit_building]]) do
    SetBLevel(i, 1 + Difficulty);

limit := [10, 12, 13, 14][Difficulty];

Sikorski := NewCharacter('Sikorski');
PlaceHumanInUnit(Sikorski, usDep);

for i := 1 to limit - 5 do
    begin
    PrepareSoldier(false, [2, 2, 3, 4][Difficulty]);
    un := CreateHuman;
    omicronTroops := Join(omicronTroops, un);
    PlaceUnitXYR(un, 27, 36, 5, false);
    end;

limit := limit - 5;

for i := 1 to limit do
    begin
    PrepareHuman(false, i mod 3 + 2, 3);
    un := CreateHuman;
    omicronTroops := Join(omicronTroops, un);
    PlaceUnitXYR(un, 27, 36, 5, false);
    end;

uc_side := reinforcementsSide;

PrepareSoldier(false, 1);
un := CreateHuman;
americanReinforcementsTroops := Join(americanReinforcementsTroops, un);

PlaceUnitXYR(un, 71, 102, 3, false);
End;

Every 0$1 trigger gameStart do
begin
BaseScript(omicronSide, omicronBaseArea, omicronBaseArea, omicronBaseInnerArea, omicronBaseOuterArea,
           omicronTroops, omicronVehicles, omicronTechs, omicronConstructList, omicronBuildingsToBuild,
           [27,32], [19,14], []);
enable;
End;

// Convoys
Every 0$1 + 1$00 trigger gameStart and hasOilTower do
var i, time;
begin
time := [4$30, 4$00, 3$40, 3$20][Difficulty];

repeat
 wait(time + rand(-0$20, 0$40));
 RaiseSailEvent(eventConvoy);
 convoysCounter := Dec(convoysCounter);
until convoysCounter = 0;
End;

Export function SendConvoy;
var i, j, tmp, path, strength, parts, points, skill, un, veh,
    coords, tag, hurt, emptyVeh, driver, cr, nearbyUnits;
begin
path := rand(1,5);
coords := [
  [[102,22], [99,43], [71,36], [56,14], [21,19]], // north (1)
  [[123,41], [102,42], [81,40], [56,14], [21,19]], // east (2)
  [[98,128], [92,117], [89,111], [86,105], [82,95], [69,70], [49,46], [28,38]],  // south-west (3)
  [[119,145], [98,128], [92,117], [89,111], [86,105], [82,95], [69,70], [49,46], [28,38]], // south (4)
  [[62,118], [56,96], [33,38]] // west (5)
][path];

strength := [5, 7, 9, 11, 13, 15][7 - convoysCounter] * Difficulty;

tmp := [];

{
  gun - 25 points
  gatling - 20 points
  machine gun - 15 points
  soldier - 3 points
  eng - 5 points
  sci - 4 points
}

parts := [3, 3, 4, 5, 15, 15, 20, 25];
skill := [2, 2, 3, 4][Difficulty];

repeat
 points := parts[rand(1, Count(parts))];

 if points > strength then
    continue;

 strength := strength - points;

 uc_side := 4;
 uc_nation := nation_american;

 case points of
      3: begin
         PrepareSoldier(false, skill);
         tmp := Join(tmp, CreateHuman);
         end;
      4: begin
         PrepareScientist(false, skill);
         tmp := Join(tmp, CreateHuman);
         end;
      5: begin
         PrepareEngineer(false, skill);
         tmp := Join(tmp, CreateHuman);
         end;
      15: begin
          PrepareVehicle([us_light_wheeled, us_medium_tracked, us_medium_wheeled][rand(1,3)], [engine_solar, engine_combustion][rand(1,2)], control_manual, us_machine_gun, 100);
          veh := CreateVehicle;
          tmp := Join(tmp, veh);

          PrepareMechanic(false, skill);
          un := CreateHuman;
          tmp := Join(tmp, un);
          end;
      20: begin
          PrepareVehicle([us_medium_tracked, us_medium_wheeled][rand(1,2)], [engine_solar, engine_combustion][rand(1,2)], control_manual, us_gatling_gun, 100);
          veh := CreateVehicle;
          tmp := Join(tmp, veh);

          PrepareMechanic(false, skill);
          un := CreateHuman;
          tmp := Join(tmp, un);
          end;
      25: begin
          PrepareVehicle([us_light_wheeled, us_medium_tracked, us_medium_wheeled][rand(1,3)], [engine_solar, engine_combustion][rand(1,2)], control_manual, us_light_gun, 80);
          veh := CreateVehicle;
          tmp := Join(tmp, veh);

          PrepareMechanic(false, skill);
          un := CreateHuman;
          tmp := Join(tmp, un);
          end;
      end;

until strength < 3;

if not tmp then
   exit;

americanReinforcementsTroops := americanReinforcementsTroops union tmp;

case path of
     1: begin // north
        for i in tmp do
            begin
            emptyVeh := UnitFilter(americanReinforcementsTroops, [[f_type, unit_vehicle], [f_ok], [f_empty]]);

            if GetClass(i) = class_mechanic then
               begin
               if emptyVeh then
                  begin
                  PlaceHumanInUnit(i, emptyVeh[1]);
                  continue;
                  end;
               end;

            SetDir(i, 3);

            repeat
             wait(0$0.3);
            until PlaceUnitArea(i, omicronNorthRefSpawnArea, false);

            ComMoveXY(i, 111, 13);
            SetTag(i, 1);
            end;
        end;
     2: begin // east
        for i in tmp do
            begin
            emptyVeh := UnitFilter(americanReinforcementsTroops, [[f_type, unit_vehicle], [f_ok], [f_empty]]);

            if GetClass(i) = class_mechanic then
               begin
               if emptyVeh then
                  begin
                  PlaceHumanInUnit(i, emptyVeh[1]);
                  continue;
                  end;
               end;

            SetDir(i, 4);

            repeat
             wait(0$0.3);
            until PlaceUnitArea(i, omicronEastRefSpawnArea, false);

            ComMoveXY(i, 136, 20);
            SetTag(i, 1);
            end;
        end;
     3: begin // south-west
        for i in tmp do
            begin
            emptyVeh := UnitFilter(americanReinforcementsTroops, [[f_type, unit_vehicle], [f_ok], [f_empty]]);

            if GetClass(i) = class_mechanic then
               begin
               if emptyVeh then
                  begin
                  PlaceHumanInUnit(i, emptyVeh[1]);
                  continue;
                  end;
               end;

            SetDir(i, 0);

            repeat
             wait(0$0.3);
            until PlaceUnitArea(i, omicronWestRefSpawnArea, false);

            ComMoveXY(i, 95, 143);
            SetTag(i, 1);
            end;
        end;
     4: begin // south
        for i in tmp do
            begin
            emptyVeh := UnitFilter(americanReinforcementsTroops, [[f_type, unit_vehicle], [f_ok], [f_empty]]);

            if GetClass(i) = class_mechanic then
               begin
               if emptyVeh then
                  begin
                  PlaceHumanInUnit(i, emptyVeh[1]);
                  continue;
                  end;
               end;

            SetDir(i, 0);

            repeat
             wait(0$0.3);
            until PlaceUnitArea(i, omicronSouthRefSpawnArea, false);

            ComMoveXY(i, 120, 153);
            SetTag(i, 1);
            end;
        end;
     5: begin // west
        for i in tmp do
            begin
            emptyVeh := UnitFilter(americanReinforcementsTroops, [[f_type, unit_vehicle], [f_ok], [f_empty]]);

            if GetClass(i) = class_mechanic then
               begin
               if emptyVeh then
                  begin
                  PlaceHumanInUnit(i, emptyVeh[1]);
                  continue;
                  end;
               end;

            SetDir(i, 0);

            repeat
             wait(0$0.3);
            until PlaceUnitArea(i, omicronWest2RefSpawnArea, false);

            ComMoveXY(i, 63, 120);
            SetTag(i, 1);
            end;
        end;
     end;

repeat
 wait(0$1);

 for i in tmp do
     begin
     tag := GetTag(i);

     if IsInArea(i, omicronBaseArea) then
        begin
        americanReinforcementsTroops := americanReinforcementsTroops diff i;
        tmp := tmp diff i;         
        SetSide(i, 1);

        if GetType(i) = unit_human then
           begin
           SetLives(i, 1000);

           if GetClass(i) = class_engineer then
              if UnitFilter(omicronTroops, [f_class, class_engineer]) > 4 then
                 SetClass(i, class_soldier);

           if GetClass(i) = class_scientistic then
              if UnitFilter(omicronTroops, [f_class, class_scientistic]) > 3 then
                 SetClass(i, class_soldier);

           if GetClass(i) = class_mechanic then
              begin
              if IsInUnit(i) then
                 SetTag(i, tMech)
              else
                 SetTag(i, 0)
              end
           else
              SetTag(i, 0);

           omicronTroops := Join(omicronTroops, i);
           end
        else if omicronVehicles < 3 then
           begin
           omicronVehicles := Join(omicronVehicles, i);

           if GetLives(i) < 1000 then
              SetTag(i, tVehRepair)
           else
              SetTag(i, 0);
           end
        else
           begin
           omicronAttackVehicles := Join(omicronAttackVehicles, i);
           SetTag(i, 0);
           end;

        joinToOmicronCounter := Join(joinToOmicronCounter, i);

        continue;
        end;

     if IsDead(i) then
        begin
        tmp := tmp diff i;
        continue;
        end;

     if GetDistUnitXY(i, coords[tag][1], coords[tag][2]) < 6 then
        SetTag(i, tag + 1);

     if GetClass(i) = class_soldier then
        begin
        if GetLives(i) < 500 then
           begin
           ComMoveXY(i, coords[tag][1], coords[tag][2]);
           continue;
           end;

        ComAgressiveMove(i, coords[tag][1], coords[tag][2]);
        continue;
        end;

     if GetClass(i) = class_scientistic then
        begin
        if GetLives(i) < 500 then
           begin
           ComMoveXY(i, coords[tag][1], coords[tag][2]);
           continue;
           end;

        hurt := UnitFilter(tmp, [[f_type, unit_human], [f_not, [f_lives, 1000]], [f_dist, i, 8], [f_not, [f_driving]]]);

        if hurt then
           begin
           ComHeal(i, hurt[1]);
           continue;
           end;

        ComMoveXY(i, coords[tag][1], coords[tag][2]);
        end;

     if GetClass(i) = class_engineer then
        begin
        ComMoveXY(i, coords[tag][1], coords[tag][2]);
        continue;
        end;

     if GetClass(i) = class_mechanic then
        begin
        if IsInUnit(i) then
           continue;

        ComMoveXY(i, 30, 38);
        continue;
        end;

     if GetType(i) = unit_vehicle then
        begin
        if GetLives(i) < 500 then
           begin
           ComMoveXY(i, coords[tag][1], coords[tag][2]);
           continue;
           end;

        cr := GetCratesNearbyXY(GetX(i), GetY(i), 9);

        if cr then
           for j := cr downto 1 do
               if InArea(cr[j][1], cr[j][2], ignoreCratesArea) then
                  cr := Delete(cr, j);

        nearbyUnits := FilterAllUnits([[f_side, 3], [f_dist, i, 9], [f_or, [f_type, unit_vehicle], [f_type, unit_building]]]);

        if cr then
           ComAttackPlace(i, cr[1][1], cr[1][2])
        else if nearbyUnits then
           ComAttackUnit(i, NearestUnitToUnit(nearbyUnits, i))
        else
           ComAgressiveMove(i, coords[tag][1], coords[tag][2]);
        end;
     end;

until not tmp;
End;

Every 0$10 trigger not americanRetreat and IsOk(usFac) and not omicronConstructList and UnitsInside(usFac) and BuildingStatus(usFac) = bs_idle and GetSide(usFac) = 1 do
var chassis, weapon;
begin
chassis := [us_medium_tracked, us_medium_wheeled][rand(1,2)];

if Difficulty > 2 then
   weapon := [us_light_gun, us_gatling_gun, us_machine_gun, us_double_gun][rand(1,4)]
else
   weapon := [us_light_gun, us_gatling_gun, us_machine_gun][rand(1,3)];

omicronConstructList := [
   [chassis, engine_combustion, control_manual, weapon]
];

enable;
End;

Every 0$2 trigger americanRetreat do
var i, tmp;
begin
tmp := FilterAllUnits([[f_or, [f_side, 1], [f_side, 4]], [f_type, unit_human], [f_ok]]);

if not tmp then
   exit;  

repeat
 for i in tmp do
     begin
     if IsInUnit(i) then
        ComExit(i)
     else if not IsInArea(i, americanRetreatArea) then
        ComMoveToArea(i, americanRetreatArea)
     else
        RemoveUnit(i);
     end;

 tmp := FilterAllUnits([[f_or, [f_side, 1], [f_side, 4]], [f_type, unit_human], [f_ok]]);

 wait(0$1);
until not tmp;
End;

Every 0$1 trigger omicronAttackVehicles do
var i, mech, enemy;
begin
enable;

if not omicronAttackVehicles then
   exit;

// tags:
// 100 - idle,
// 101 - go to parking, repair if needed
// 102 - attack

for i in omicronAttackVehicles do
    begin
    if not IsOk(i) or GetSide(i) <> 1 then
       begin
       omicronAttackVehicles := omicronAttackVehicles diff i;
       continue;
       end;

    if GetTag(i) = 300 then
       begin
       if GetFuel(i) < 50 then
          begin
          ComMoveXY(i, 24, 36);

          repeat
           wait(0$1);
          until GetDistUnitXY(i, 24, 36) < 4;

          SetFuel(i, 100);
          end
       else if not IsInArea(i, omicronParkingArea) then
          ComMoveToArea(i, omicronParkingArea)
       else
          SetTag(i, 301);
       end;

    if GetTag(i) = 301 then
       begin
       if GetLives(i) < 1000 then
          begin
          if not IsDrivenBy(i) then
             continue;

          mech := IsDrivenBy(i);

          ComExitVehicle(mech);
          AddComRepairVehicle(mech, i);

          repeat
           wait(0$1);
          until GetLives(i) = 1000;

          SetLives(mech, 1000);
          ComEnterUnit(mech, i);
          end
       else if IsDrivenBy(i) then
          SetTag(i, 0);
       end;

    if GetTag(i) < 300 then
       begin
       enemy := FilterUnitsInArea(omicronBaseArea, [f_enemy, 1]);

       if GetLives(i) < 650 then
          begin
          ComStop(i);
          SetTag(i, 300);
          continue;
          end;

       if enemy then
          begin
          if not HasTask(i) then
             ComAttackUnit(i, NearestUnitToUnit(enemy, i));
          end
       else if omicronAttackVehicles then
          begin
          enemy := FilterAllUnits([f_enemy, 1]);

          if enemy then
             AgressiveMove(i, [ [49,43], [63,56], [72,67] ]);
          end;
       end;
    end;
End;

Every 0$3 trigger FilterAllUnits([[f_side, 1], [f_engine, engine_combustion]]) do
var i;
begin
enable;

for i in FilterAllUnits([[f_side, 1], [f_engine, engine_combustion]]) do
    if GetFuel(i) < 3 then
       SetFuel(i, 3);
End;

Every 0$2 trigger joinToOmicronCounter > 2 do
omicronBuildingsToBuild := omicronBuildingsToBuild ^ [[b_breastwork, 23, 5, 4]];

Every 0$2 trigger joinToOmicronCounter > 6 and FilterAllUnits([[f_side, 1], [f_class, class_soldier]]) > 12 do
omicronBuildingsToBuild := omicronBuildingsToBuild ^ [[b_armoury, 22, 14, 3]];