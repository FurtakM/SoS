// Prepare Hero for use
// ident - ident from start.txt - 'JMM' for example
// exist_mode
//   - false if unit not exist in save
//   - true if unit already exist in save
// example: JMM := PrepareUnitExt('JMM', false);
Export Function PrepareUnitExt(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(previousMissionPrefix&ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID, radio, canTalkHero);
var i, speaker, units;
begin
   units = characters;

   units := units diff [Burlak, Gnyevko, Kirilenkova, Kovalyuk, Belkov, Belkov2, Scholtze];

   if NOT units AND NOT canTalkHero then
      exit;

   if NOT units then
      units = characters diff [Burlak];

   if NOT units AND canTalkHero then
      exit;

   speaker := units[rand(1, units)];

   if radio then
   begin
      if GetSex(speaker) = sex_male then
         SayRadio(speaker, dialogMID)
      else
         SayRadio(speaker, dialogFID);
   end
   else
   begin
      if GetSex(speaker) = sex_male then
         Say(speaker, dialogMID)
      else
         Say(speaker, dialogFID);
   end;

   result := speaker;
end;


// Summary: Before calling the SaveCharacters function, checks if the character given in the argument is OK and if it is on the side 
// Input: Character, characterStringID
// Example: ExtSaveCharacter(Burlak, 'MyBurlak');
Export Function ExtSaveCharacter(character, characterStringID, side);
begin
   if GetSide(character) = side AND IsOK(character) then
      SaveCharacters(character, missionPrefix&characterStringID);
end;

// Summary: Before calling the SaveCharacters function, checks if the characters list given in the argument is OK and if it is on the side 
// Input: Characters, characterStringID
// Example: ExtSaveCharacter([FilterAllUnits...], 'MySavedTeam');
Export Function ExtSaveCharacters(characters, charactersStringID, side);
var unit, resultCharactersToSave;
begin
   resultCharactersToSave = [];

   for unit in characters do
      if GetSide(unit) = side AND IsOK(unit) then
         resultCharactersToSave = resultCharactersToSave ^ unit;

   SaveCharacters(resultCharactersToSave, missionPrefix&charactersStringID);
end;

Export function SelectCharacters(maxUnitToChoose);
var i, charsToChoose, selectedPeople;
begin
   charsToChoose = otherKirovUnits;
   charsToChoose = charsToChoose ^ otherBeriaUnits;
   charsToChoose = charsToChoose ^ other_survivors;
   charsToChoose = charsToChoose ^ Belkov;
   charsToChoose = charsToChoose ^ Belkov2;

   selectedPeople = CharacterSelection('text', maxUnitToChoose, maxUnitToChoose,
                                [sel_change_class, Burlak, Gnyevko, Kovalyuk, Kirilenkova,
                                 sel_dont_change_class,
                                 sel_not_hired,sel_changeable, sel_change_class]^charsToChoose^
                                [sel_dont_change_class, sel_not_changeable, Kurin],
                                [class_soldier, class_mechanic, [class_engineer, 1], [class_scientistic, 1]]);

   SetSide(charsToChoose, 6);
   SetSide(selectedPeople, 3);

   SetSurvivorsArabianAttack;
   MoveKurinUnitsToBuildings;
end;

// Summary: Looks for a building that has free slots.
// Input: area, side, buildingType
// Output: buildingID if found or 0 if no
// Example: FindNotFullBuildingInArea(OmicronBaseArea, 1, b_armoury)
Export Function FindNotFullBuildingInArea(area, side, buildingType);
var building;
begin
   for building in FilterUnitsInArea(area, [[f_side, side], [f_type, unit_building], [f_btype, buildingType]]) do
   begin
      if UnitsInside(building) < 6 then
      begin
         result = building;
         exit;
      end;
   end;

   result = 0;
end;

// Summary: Get available weapons to construct vehicles or place weapon on turret, return only researched weapons.
// Input: (int)side, (int)nation
// Output: (int[]) availableWeaponsForCurrentNation
// Example: GetAvailableWeapons(3, 2);
Export Function GetAvailableWeapons(side, nation);
var i, resultWeapons, weaponTechs;
begin
    weaponTechs = [tech_AdvMet, tech_AdvRocket, tech_Flame, tech_Gatling, tech_Gun, tech_Lapser, tech_LasDouble, tech_Laser, tech_Rocket];
    resultWeapons = [];

    for i := 1 to weaponTechs do
    begin
        if TechNationAvailable(weaponTechs[i], nation) AND GetTech(weaponTechs[i], side) = state_researched then
            case nation of
                nation_american:
                    resultWeapons = resultWeapons ^ GetNationWeaponByTech(weaponTechs[i], nation);

                nation_arabian:
                    resultWeapons = resultWeapons ^ GetNationWeaponByTech(weaponTechs[i], nation);

                nation_russian:
                    resultWeapons = resultWeapons ^ GetNationWeaponByTech(weaponTechs[i], nation);
            end;
            
    end;

    result = resultWeapons;
end;

// Summary: Get weapon name for current nation using tech name.
// Input: (int)tech, (int)nation
// Output: (int)weapon
// Example: GetNationWeaponByTech(tech_gun, 3);
Export Function GetNationWeaponByTech(tech, nation);
begin
    case tech of
        tech_AdvMet: result = [us_heavy_gun, '', ru_heavy_gun][nation];
        tech_AdvRocket: result = ['', '', ru_rocket][nation];
        tech_Flame: result = ['', ar_flame_thrower, ''][nation];
        tech_Gatling: result = [us_gatling_gun, ar_gatling_gun, ru_gatling_gun][nation];
        tech_Gun: result = [us_double_gun, ar_gun, ru_gun][nation];
        tech_Lapser: result = ['', '', ru_time_lapser][nation];
        tech_LasDouble: result = [us_double_laser, '', ''][nation];
        tech_Laser: result = [us_laser, '', ''][nation];
        tech_Rocket: result = [us_rocket_launcher, ar_rocket_launcher, ru_rocket_launcher][nation];
    end;
end;

Export Function PlaceHumanInBunker(un, bunker);
var dir;
begin
     dir := GetDir(bunker)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, bunker);

     result = un;
End;

Export Function PrepareSolBun(skill, b);
var un, dir;
begin
     uc_side := GetSide(b);
     uc_nation := GetNation(b);

     PrepareHuman(false, 1, skill);
     un = CreateHuman;

     dir := GetDir(b)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, b);

     result = un;
End;

// Summary: Engineers from the units list will approach the buildings which is a breastwork and start to dismantle it, and after then start to build a bunker or an automated turret in its place from upgradeBType
// Input: units, buildings, upgradeBType
// Example: AddComUpgradeBreastwork([FilterAllUnits.... f_class, class_engineer], [b1, b2, b3], b_bunker)
Export Function AddComUpgradeBreastwork(units, buildings, upgradeBType);
var building, x, y, dir;
begin
   for building in buildings do
   begin
      x = GetX(building);
      y = GetY(building);
      dir = GetDir(building);

      AddComDismantle(units, building);
      AddComBuild(units, upgradeBType, x, y, dir);
   end;
end;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout, ru_tech_list, am_tech_list;
begin

   ru_tech_list := [48, 49, 50, 20, 1, 51, 52, 69, 39, 34, 40, 53, 71, 57, 58, 44, 32, 27, 23, 33, 59, 54, 55, 56, 63, 64, 65, 30, 31, 21, 22, 25];
   am_tech_list = GetTechNation(1, 1, state_enabled);

  For i = 1 to ru_tech_list do
    If GetTech(ru_tech_list[i], side) = state_enabled and TechNationAvailable(ru_tech_list[i], nation) = true then AddComResearch(lab, ru_tech_list[i]);

  For i = 1 to am_tech_list do
    If GetTech(am_tech_list[i], side) = state_enabled and TechNationAvailable(am_tech_list[i], nation) = true then AddComResearch(lab, am_tech_list[i]);

end;

Export Function MoveKurinUnitsToBuildings;
var i, lab, fac, bunker, tmp, pom, canTakeUnits, diffUnits;
begin

    lab = FilterAllUnits([[f_side, 6], [f_type, unit_building], [f_btype, b_lab]])[1];
    fac = FilterAllUnits([[f_side, 6], [f_type, unit_building], [f_btype, b_factory]])[1];

   diffUnits = diffUnits ^  Kurin;
   diffUnits = diffUnits ^ survivorsArabianAttack;
   diffUnits = diffUnits ^ kirovEng;

    // Sci

    canTakeUnits = FilterUnitsInArea(KirovBaseArea, [[f_side, 6], [f_type, unit_human], [f_not, [f_hastask]]]) diff diffUnits;


    if NOT canTakeUnits then
        neededUnitsSpawn = Replace(neededUnitsSpawn, 4, neededUnitsSpawn[3] + 2);

    if canTakeUnits > 2 then 
    begin
        for i := 1 to rand(1, 2) do
        begin
            ComEnterUnit(canTakeUnits[i], lab);
            AddComChangeProfession(canTakeUnits[i], class_scientistic);
        end;
    end
    else
    begin
        for i := 1 to rand(1, canTakeUnits) do
        begin
            ComEnterUnit(canTakeUnits[i], lab);
            AddComChangeProfession(canTakeUnits[i], class_scientistic);
        end;
    end; 

    wait(0$01);
    // Mech

   canTakeUnits = FilterUnitsInArea(KirovBaseArea, [[f_side, 6],  [f_type, unit_human], [f_not, [f_hastask]]]) diff diffUnits;

   pom = 6;
 
   if canTakeUnits then
     for i = 1 to canTakeUnits do
     begin
       if GetClass(canTakeUnits[i]) <> 3 then
       begin
            ComEnterUnit(canTakeUnits[i], fac);
            AddComChangeProfession(canTakeUnits[i], class_mechanic);
       end;

       ComEnterUnit(canTakeUnits[i], fac);

       pom = pom - 1;
     end;

    if pom > 0 then
        neededUnitsSpawn = Replace(neededUnitsSpawn, 3, pom);


    wait(0$01);
    // Solds

    for bunker in FilterAllUnits([[f_side, 6], [f_type, unit_building], [f_btype, b_bunker], [f_not, [f_occupied]]]) do
    begin

        canTakeUnits = FilterUnitsInArea(KirovBaseArea, [[f_side, 6],  [f_type, unit_human], [f_not, [f_hastask]]]) diff diffUnits;

        if canTakeUnits then
        begin
            if GetClass(canTakeUnits[1]) <> 1 then
            begin
                ComEnterUnit(canTakeUnits[1], FilterAllUnits([[f_side, 6], [f_type, unit_building], [f_btype, b_barracks]])[1]);
                AddComChangeProfession(canTakeUnits[1], 1);
                AddComExitBuilding(canTakeUnits[1]);
                wait(0$1);
            end;
            ComEnterUnit(canTakeUnits[1], bunker);
        end
        else
        begin
            kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker;
            neededUnitsSpawn = Replace(neededUnitsSpawn, 1, neededUnitsSpawn[1] + 1);
        end;
    end;

end;


//Summary: Function which makes "unit1" (only 1 unit - not list of units) move "dist" distance away from hex [x,y] (the fastest way)
//"add" is boolean - if "true" then its an AddComMoveXY, else ComMoveXY
Export Function GetAwayFromXY(unit1, x, y, dist, add);
var list_nearest, list_coords, temp_dir, dir_list, b, min_dist, temp_dist, c, rand_num, rand_near_hex, attempts;
begin
      if not IsOk(unit1) or dist = 1 or not ValidHex(x,y) or GetDistUnitXY(unit1,x,y) >= dist or not add in [true,false] then Exit;

      attempts = 0;

      repeat
      list_nearest = [];
      list_coords = [];

      temp_dir = GetTurnDirection(x,y,GetX(unit1),GetY(unit1));

      if attempts = 0 then
         begin
               //find those coordinates that have distance "dist" to "[x,y]" and are in direction unit on [x,y] would turn if asked to face [GetX(unit1),GetY(unti1)]
               //this is optimized version but causes 'apathy' (no movement) if "unit1" is cornered
               dir_list = [temp_dir,temp_dir+1,temp_dir-1];
               if dir_list[2] = 6 then
                     dir_list = Replace(dir_list,2,0);
               if dir_list[3] = -1 then
                     dir_list = Replace(dir_list,3,5);
         end
      else  //if attempts = 1
         //find all other coordinates that have distance "dist" to "[x,y]" and put them in "list_coords"
         dir_list = [0,1,2,3,4,5] diff temp_dir;

      //this is the 'corner hexes'
      for c = 1 to (dir_list+0) do
         case dir_list[c] of
               0: list_coords = Insert(list_coords,1,[x,y-dist]);
               1: list_coords = Insert(list_coords,1,[x+dist,y]);
               2: list_coords = Insert(list_coords,1,[x+dist,y+dist]);
               3: list_coords = Insert(list_coords,1,[x,y+dist]);
               4: list_coords = Insert(list_coords,1,[x-dist,y]);
               5: list_coords = Insert(list_coords,1,[x-dist,y-dist]);
         end;

      //this is all the hexes in between the 'corner hexes'
      //if distance "dist" is >= 30 then we take only every 2. hexes in between (to consume less cpu power)
      if dist < 30 then
         c = 1
      else c = 2;

      b = 1;
      while b <= (dist - 1) do
         begin
               if 0 in dir_list and 1 in dir_list then
                     list_coords = Insert(list_coords, 1, [x+b, y-dist+b]);
               if 1 in dir_list and 2 in dir_list then
                     list_coords = Insert(list_coords, 1, [x+dist, y+b]);
               if 2 in dir_list and 3 in dir_list then
                     list_coords = Insert(list_coords, 1, [x+dist-b, y+dist]);
               if 3 in dir_list and 4 in dir_list then
                     list_coords = Insert(list_coords, 1, [x-b, y+dist-b]);
               if 4 in dir_list and 5 in dir_list then
                     list_coords = Insert(list_coords, 1, [x-dist, y-b]);
               if 5 in dir_list and 0 in dir_list then
                     list_coords = Insert(list_coords, 1, [x-dist+b, y-dist]);

               b = b + c
         end;

      if list_coords = 0 then exit;

      repeat
      min_dist = 5000;
      for b in list_coords do
         begin
               temp_dist = GetDistUnitXY(unit1,b[1],b[2]);
               if temp_dist < min_dist then min_dist = temp_dist;
         end;

      c = 0;
      repeat
      c = c + 1;

      //make a new list ("list_nearest") containing those coordiates which have the least distance to "unit1", and remove these coordinates from "list_coords"
      if GetDistUnitXY(unit1, list_coords[c][1], list_coords[c][2]) = min_dist then
         begin
               list_nearest = Insert(list_nearest, 1, list_coords[c]);
               list_coords = Delete(list_coords, c);
               c = c - 1;
         end;
      until c = list_coords;

      c = 0;

      if list_nearest > 0 then
         begin
               repeat
               rand_num = Rand(1,list_nearest);
               rand_near_hex = list_nearest[rand_num];

               if ValidHex(rand_near_hex[1], rand_near_hex[2]) > 0 and HexInfo(rand_near_hex[1], rand_near_hex[2]) = 0 then
                     c = 1
               else
                     list_nearest = Delete(list_nearest, rand_num);
               until c = 1 or list_nearest = 0;
         end;

      until c = 1 or list_coords = 0;

      attempts = attempts + 1;
      until c = 1 or attempts > 1;

      //if attempts <= 2 then  //because we don't use "break" "attempts = attempts + 1" will still be executed even if the function actually has found a good hex
      if c = 1 then
         if add then
               AddComMoveXY(unit1,rand_near_hex[1],rand_near_hex[2])
         else ComMoveXY(unit1, rand_near_hex[1], rand_near_hex[2]);
end;

//Function which returns the direction in which the unit one the specified hex ([x1,y1]) would turn if it was asked to face
//the other specified hex ([x,y]) (ComTurnXY)
Export Function GetTurnDirection(x1,y1,x,y);
     var dist_1, dist_2, b, temp_dist, dir;
     begin
          if not ValidHex(x1,y1) or not ValidHex(x,y) then
               begin
                    result = -1;
                    exit;
               end;

          dist_1 = GetDistXY(x1,y1,x,y);
          dist_2 = 99999;

          //this is the algorithm
          for b = 0 to 5 do
               begin
                    temp_dist = GetDistXY(ShiftX(x1,b,dist_1),ShiftY(y1,b,dist_1),x,y);
                    if temp_dist < dist_2 then
                         begin
                              dist_2 = temp_dist;
                              dir = b;
                         end;
               end;

          result = dir;
end;
