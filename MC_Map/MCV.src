// MCV_Cost(factory, [components_list])
Export Function MCV_Cost(fac, list);
var cost, pom;
begin
pom := GetBase(fac);
cost := CostOfVehicle(list[1], list[2], list[3], list[4]);
 
if GetResourceType(pom, mat_cans) >= cost[1] and
   GetResourceType(pom, mat_oil) >= cost[2] and
   GetResourceType(pom, mat_siberit) >= cost[3] then
   result := true
    else
     result := false;
End;


// MCV_Produce(side, factory, [components_list]);
Export Function MCV_Produce(side, fac, list);
var i;
begin
if fac then
   begin
   if MCV_Cost(fac, list) and BuildingStatus(fac) = bs_idle and CanBeConstructed(fac, list[1], list[2], list[3], list[4]) then
      begin
      ComConstruct(fac, list[1], list[2], list[3], list[4]);

      for i = 1 to 4 do
          MREG_ToConstruct := Remove(MREG_ToConstruct, list[i], true);

      result := true;
      end
       else
        result := false;
   end
    else
     result := false;
End;

// MCV_Parking
Export Function MCV_Parking(side, veh);
var i;
begin
if MREG_Parking[side] then
   if not IsInArea(veh, MREG_Parking[side]) then
      begin       
      ComMoveToArea(veh, MREG_Parking[side]);
      
      if GetControl(veh) = control_manual then
         begin
         i := GetDriver(veh);

         Repeat
          Wait(0$01);
         Until IsInArea(veh, MREG_Parking[side]);

         ComExitVehicle(i);
         Wait(1);
         ComEnterUnit(i, MCF_Get(side, [f_btype, b_factory])[1]);
         end;    
      end;
End;

Export Function MCV_Turret(side);
var i, turret, weapon, x, y;
begin    
if MCF_Get(side, [f_btype, b_factory]) then
   if BuildingStatus(MCF_Get(side, [f_btype, b_factory])[1]) = bs_idle then
      begin
      if MREG_ForSide(side, MREG_TurretWeapon) then
         for i = 1 to MREG_TurretWeapon do
             if MREG_TurretWeapon[i][1] = side then
                begin
                weapon := MREG_TurretWeapon[i][2];
                x := MREG_TurretWeapon[i][3][1];
                y := MREG_TurretWeapon[i][3][2];
                turret := HexInfo(x, y);

                AddComPlaceWeapon(turret, weapon);
                MREG_TurretWeapon := MC_RegistryDelete(MREG_TurretWeapon, side, weapon, [x, y]);
                break;
                end;
      end;
End;

Export Function MCV_CheckFuel(side);
var i, tmp, t;
begin
tmp := MCF_Get(side, [f_engine, engine_combustion]);

if not tmp then
   exit
    else
     begin
     for i = 1 to tmp do
         if GetFuel(tmp[i]) < 20 and GetTag(tmp[i]) = 0 then
            begin
            SetTag(tmp[i], 21);
            end;
     end;
End;

Export Function MCV_Refuel(unit);
var side, i, b, c;
begin
if not unit then
   exit;

side := GetSide(unit);
b := MCF_Get(side, [f_or, [f_btype, b_warehouse], [f_btype, b_factory], [f_btype, b_oil_mine]]);

if not b then
   exit
    else
     if GetTag(unit) = 21 then
        begin
        c := NearestUnitToUnit(b, unit);

        if GetDistUnitXY(unit, GetX(c), GetY(c)) > 6 then
           ComMoveXY(unit, GetX(c), GetY(c))
            else
             begin
             SetFuel(unit, 100);
             SetTag(unit, 0);
             end;
        end;
End;

Export Function MCV_RemoteControl(side, nation);
var i, ct, oper, vehs, tmp;
begin
vehs := MCF_Get(side, [[f_control, control_remote], [f_not, [f_linked]]]);

if not vehs then
   exit;

if nation = 1 {US} then
   begin
    if not MCF_Get(side, [f_btype, b_control_tower]) then
       exit
        else
         begin
         ct := MCF_Get(side, [f_btype, b_control_tower]);
         oper := UnitsInside(ct[1]);

         for i = vehs downto 1 do
             begin
             if not IsControledBy(vehs[i]) then
                begin
                tmp := MCV_RemoteDriver(oper);
                MC_Show(tmp);

                if not tmp then
                   exit
                    else
                     ComLinkTo(vehs[i], tmp[1][1]);
                end;
             end;
         end;
   end
    else // AR
     begin
      if not MCF_Get(side, [f_weapon, ar_control_tower]) then
         exit
          else
           begin
           ct := MCF_Get(side, [f_weapon, ar_control_tower]);
           oper := [];

           for i = 1 to ct do
               oper := oper ^ GetDriver(ct[i]);
           end;
     end;
End;
                        
Export Function MCV_RemoteDriver(drivers);
var i, j, linked, m, l;
begin
if not drivers then
   exit
    else
     begin
     linked := [];

     for i = 1 to drivers do
         begin
         if CanControl(drivers[i]) then
            if i > 1 then
               begin
               m := false;
               l := UnitsLinked(drivers[i]);

               for j = 1 to linked do
                   begin 
                   if l < linked[j][2] then
                      begin
                      linked := Insert(linked, 1, [drivers[i], l]);
                      m := true;
                      break;
                      end;
                   end;

                   if not m then
                      linked := linked ^ [[drivers[i], UnitsLinked(drivers[i])]];
               end
                else
                 linked := [[drivers[i], UnitsLinked(drivers[i])]];
         end;

     result := linked;
     end;
End;



