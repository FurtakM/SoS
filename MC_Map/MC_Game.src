// Main Game Module
Export mc_game_live;
Starting
begin
ResetFog();
RandomizeAll;

FakePep(); // for test only

mc_game_live := 1; // true - on, false off

MC_Registry();
MC_RegistryInit();

MCT_MarkPlace(10, 7, 'aqua');

MCN_AddApes(Area43, 5, 10);

MCS_SetResourcesBonus(20, 16000, 30);
MCL_SetTechList(1, [tech_tech1, tech_tech2, 20, tech_oilpow, tech_oileng, tech_solpow, tech_soleng, tech_apelang, tech_tech3, tech_apepsych, tech_weap1, tech_weap2, tech_gatling, tech_gun, tech_weap3, tech_comp1, tech_ai, tech_advai, tech_opto1, tech_opto2, tech_radar, tech_remcont, tech_rocket]);

MCS_ApeLimit(1, 3);
MCS_ApeOptions(1, [0,1,0,0]);

MCS_CreateDeposits(1, [9, 13, 2, 29, 10, 3]);
MCS_Collector(1, 1, [Area44]);

MCS_SetParking(1, area42);
MCS_Depot(1, [33, 27, 1]);
MCS_Mine(1);
MCS_Lab(1, [20,20,3], [b_lab_weapon, b_lab_opto]);
MCS_Lab(1, [40,17,1], [b_lab_computer, b_lab_siberium]);
MCS_AddFortification(1, b_bunker, [10, 7, 2, 37, 41, 3], [us_machine_gun, us_machine_gun]);
MCS_ChangeFortification(1, [10, 7], [us_gatling_gun]);
MCS_PowerPlants(1, [29, 13, 0, 17, 10, 2], [b_solar_power, b_oil_power]);
MCS_Barracks(1, [46, 27, 5]);
MCS_Factory(1, [48, 40, 0], [b_ext_gun, b_ext_noncombat, b_ext_computer, b_ext_radar, b_ext_track, b_ext_gun]);
MCS_ControlTower(1, 1, [33, 49, 2]);

MCS_AddVehicle(1, [us_medium_wheeled, engine_combustion, control_computer, us_cargo_bay]);
MCS_AddVehicle(1, [us_medium_wheeled, engine_combustion, control_remote, us_gatling_gun]);
MC_Game(0$01);
End;

Function MC_Game(int);
var i, side, un;
begin

     While(mc_game_live) do
     begin
     // counter
        Wait(int);

     // monitor
        if isEditor then
           MC_Show(MCF_ScanTeren(1, 40));

       // global instructions
          // crates spawn
          MCT_Crates(area44, 4, 66, 0$20, 20);

          //

       // instructions for every side
          for side = 1 to 8 do
              begin
              // check_side
                 if MREG_SidesList[side] = 0 then
                    continue;


              // research
                 if MCL_GetTechList(side) then
                    MCL_Start(side);

              // healing
                 MREG_Heal := Replace(MREG_Heal, side, MCP_Filter(side));

              // check buildings
                 MREG_ToRepair = Replace(MREG_ToRepair, side, MCB_FilterHLevel(side));

              // check vehicles
                 if MCF_Get(side, [f_type, unit_vehicle]) then
                    MCV_CheckStatus(side);

              // change_class
                 if MREG_ForSide(side, MREG_ToChangeClass) then
                    begin
                    for i = MREG_ToChangeClass downto 1 do
                        begin
                        if MREG_ToChangeClass[i][1] = side then
                           begin
                           MCH_ChangeClass(side, MREG_ToChangeClass[i][2], MREG_ToChangeClass[i][3]);
                           end;
                        end;
                    end;

              // change ape class
                 if 1 in MREG_ApeOptions[side] then
                    begin
                    MCN_TrainApe(side);
                    end;

              // construct_vehicle
                 if MREG_ToConstruct[side] then
                    begin
                    if MCF_Get(side, [f_btype, b_factory]) then
                       MCV_Produce(side, MCF_Get(side, [f_btype, b_factory])[1], [MREG_ToConstruct[side][1], MREG_ToConstruct[side][2], MREG_ToConstruct[side][3], MREG_ToConstruct[side][4]]);
                    end;

                 if MCF_Get(side, [f_btype, b_factory]) and MREG_ForSide(side, MREG_TurretWeapon) then
                    MCV_Turret(side);

              // veh refuel
                 if MCF_Get(side, [f_engine, engine_combustion]) then
                    begin
                    MCV_CheckFuel(side);

                    if MCF_Tag(side, 21, []) then
                       MCV_Refuel(MCF_Tag(side, 21, [])[1]);
                    end;

              // remote control
                 if MCF_Get(side, [f_control, control_remote]) then
                    MCV_RemoteControl(side, GetNation(MCF_Get(side, [f_control, control_remote])[1]));


              // repair building
                 if MREG_ToRepair[side] then
                    begin
                    MCB_Repair(side);
                    end
              else
              // lab_upgrade
                 if MREG_ForSide(side, MREG_ToUpLab) and MREG_ForSide(side, MREG_LabList) then
                    begin
                    for i = 1 to MREG_ToUpLab do
                        if MREG_ToUpLab[i][1] = side then
                           begin
                           if MREG_ToUpLab[i][2] and MREG_ToUpLab[i][3] then
                              if (MCB_UpgradeLab(side, MREG_ToUpLab[i][2], MREG_ToUpLab[i][3])) then
                                 begin
                                 MREG_ToUpLab := MC_RegistryDelete(MREG_ToUpLab, side, MREG_ToUpLab[i][2], MREG_ToUpLab[i][3]);
                                 MREG_LabList := MC_RegistryDelete(MREG_LabList, side, MREG_LabList[1][2], []);
                                 end;
                           break;
                           end;
                    end
              else
              // upgrade others
                 if MREG_ForSide(side, MREG_ToUpdate) then
                    begin
                    for i = 1 to MREG_ToUpdate do
                        if MREG_ToUpdate[i][1] = side then
                           begin
                           MCB_Upgrade(side, MREG_ToUpdate[i][2]);                            
                           break;
                           end;
                    end
              else
              // unfinished buildings  
                 if MCF_Get(side, [f_constructed]) then
                    MCB_Complete(side, MCF_Get(side, [f_constructed])[1])
              else
              // to build
                 if MREG_ForSide(side, MREG_ToBuild) and not BuildingsInProgress(side) then
                    begin
                    for i = 1 to MREG_ToBuild do
                        if MREG_ToBuild[i][1] = side then
                           begin
                           // remove building marker
                           if isEditor and IsEnvironment(MREG_ToBuild[i][3][1], MREG_ToBuild[i][3][2]) then
                              MCT_RemovePlace(MREG_ToBuild[i][3][1], MREG_ToBuild[i][3][2]);

                           if MREG_ToBuild[i][2] = b_depot then
                              MCB_Depot(side, MREG_ToBuild[i][3][1], MREG_ToBuild[i][3][2], MREG_ToBuild[i][3][3])
                               else
                           if MREG_ToBuild[i][2] = b_lab then
                              MCB_Lab(side, MREG_ToBuild[i][3][1], MREG_ToBuild[i][3][2], MREG_ToBuild[i][3][3])
                               else
                                MCB_Build(side, MREG_ToBuild[i][2], MREG_ToBuild[i][3][1], MREG_ToBuild[i][3][2], MREG_ToBuild[i][3][3]);
                           break;
                           end;
                    end
              else
              // to dismantle
                 if MREG_ForSide(side, MREG_ToDismantle) then
                    begin
                    for i = 1 to MREG_ToDismantle do
                        if MREG_ToDismantle[i][1] = side then
                           begin
                           MCB_Dismantle(side, MREG_ToDismantle[i][2]);
                           end;
                    end;
              // else
              // collect crates
                 if MCF_Get(side, [f_btype, b_warehouse]) then
                    MCT_CollectCrates(side);

              end;
     End;

End;


// Direct Commands MC
Every 0$03 trigger mc_game_live do  // todo
var i, j, un, side, b, v, c, e, f, k, x, y, all, eng, mech, sci, ct, tmp, at_war{pom};
begin
enable;


       for i = 1 to 8 do
           begin
           if MREG_SidesList[i] = 0 then
              continue;

           at_war := false; // test

           // global
           // heal
           if MREG_Heal[i] then
              begin
              if MCF_Class(i, 4, []) then
              for j in MCF_Class(i, 4, []) do
                  if not GetTag(j) = 4 then
                     begin
                     SetTag(j, 4);

                     if IsInUnit(j) then
                        ComExitBuilding(j);
                     end
                      else
                        if not WantHeal(j, MREG_Heal[i][1]) then
                           MCP_Heal(j, MREG_Heal[i][1]);
              end
               else
                if MCF_Class(i, 4, []) and MCF_Tag(i, 4, []) then
                   for j in MCF_Class(i, 4, []) do
                       begin
                       if GetTag(j) = 4 then
                          begin
                          SetTag(j, 0);

                          if MCF_Lab(i) and not MCL_GetTechList(i) then
                             ComEnterUnit(j, MCF_Lab(i)[1]);
                          if not MCF_Lab(i) and MCF_Get(i, [f_btype, b_warehouse]) then
                             ComMoveXY(j, GetX(MCF_Get(i, [f_btype, b_warehouse])[1]), GetY(MCF_Get(i, [f_btype, b_warehouse])[1]));
                          end;
              end;

           // tame
              if GetTech(tech_apelang, GetSide(j)) = state_researched and not at_war and not MREG_Heal[i] and not MCL_GetTechList(i) and MCF_Class(i, 4, []) then
                 for j in MCF_Class(i, 4, []) do
                     MCN_Tame(GetSide(j), j);

           // base under attack
           if at_war then
              begin
              end
               else
                begin
                all := MCF_All(i, []);
                eng := MREG_ToDep[i];
                mech := MREG_ToFac[i];
                sci := MREG_ToLab[i];


                if not at_war and MREG_ToArm[i] then
                   MCF_RemoveClass(i, 'ToArm', 1);


                // lab
                if MCL_GetTechList(i) and MCF_Lab(i) and not MREG_Heal[i] then
                   begin
                   for j = 1 to MCF_Lab(i) do
                       if BuildingStatus(MCF_Lab(i)[j]) in [bs_working, bs_need_people] then
                          begin
                          b := MCF_Lab(i)[j];
                          break;
                          end;

                   // idlers sci
                   if MCF_Class(i, 4, []) then
                      for j in MCF_Class(i, 4, []) do
                          begin
                          if GetTag(j) = 0 then
                             begin
                             // research
                             if IsInUnit(j) and b then
                                if BuildingStatus(IsInUnit(j)) = bs_idle and
                                   IsInUnit(j) <> b then
                                   ComExitBuilding(j);

                             if not IsInUnit(j) then
                                ComEnterUnit(j, b);
                             end;
                             //
                             // tame
                             if GetTech(tech_apelang, GetSide(j)) = state_researched then
                                MCN_Tame(GetSide(j), j);
                          end;

                   if all > 6 then
                      begin
                      if sci < 6 then
                         begin
                         if MCF_Get(i, [f_btype, b_warehouse]) then
                            MCF_RemoveClass(i, 'ToDep', 1);
                         if MCF_Get(i, [f_btype, b_factory]) = 0 then
                            MCF_RemoveClass(i, 'ToFac', 1);

                         MCH_TrainScientist(i, 6-sci);
                         end;
                      end
                       else
                         if sci < all-1 then
                            MCH_TrainScientist(i, (all-1)-sci);
                   end
                    else
                      if MCL_GetTechList(i) = 0 then
                         begin
                         if all <= 6 then
                            MCF_RemoveClass(i, 'ToLab', 1)
                             else
                              if all > 6 and all < 12 then
                                 MCF_RemoveClass(i, 'ToLab', 2)
                                  else
                                   MCF_RemoveClass(i, 'ToLab', 3);
                         end;

                // fac
                if MCF_Get(i, [f_btype, b_factory]) then
                   begin
                   b := MCF_Get(i, [f_btype, b_factory])[1];

                   // idlers mech
                   if MCF_Class(i, 3, [f_not, [f_inside]]) then
                      for j in MCF_Class(i, 3, [f_not, [f_inside]]) do
                          if GetTag(j) = 0 then
                             ComEnterUnit(j, b);

                   if all-sci > 1 and BuildingStatus(b) = bs_need_people then
                      begin
                      if mech < 6 then
                         begin
                         if MCF_Get(i, [f_btype, b_warehouse]) then
                            MCF_RemoveClass(i, 'ToDep', 2);

                         if all-(sci+1) > 6 then
                            v := 6
                             else
                              v := all-(sci+1);

                         MCH_TrainMechanic(i, v);
                         end;
                      end;

                   // ct
                   ct := MCF_Get(i, [f_btype, b_control_tower]);

                   if ct and mech and MCF_Class(i, 3, []) then
                      if MCF_Tag(i, 9, []) < 3 then
                         begin
                         if mech < 3 then
                            f := mech
                             else
                              f := 3;

                         for c = 1 to f do
                             if GetClass(mech[c]) = 3 then
                                begin
                                SetTag(mech[c], 9);
                                ComExitBuilding(mech[c]);
                                end;

                         MCH_TrainMechanic(i, f);
                         end;

                   if MCF_Tag(i, 9, []) then
                      for c in MCF_Tag(i, 9, []) do
                          if not IsInUnit(c) then
                             if ct then
                                ComEnterUnit(c, ct[1])
                                 else
                                  SetTag(c, 0);
                   end;

                // repair veh                              
                if MCF_Class(i, 3, []) and MREG_Parking[i] and MCF_Tag(i, 6, []) then
                   begin
                   x := AreaToList(MREG_Parking[i], 0)[1][1];
                   y := AreaToList(MREG_Parking[i], 0)[2][1];

                   if MCF_Tag(i, 6, []) then
                      begin

                      for k in MCF_Tag(i, 6, []) do
                          if GetLives(k) = 1000 then
                             SetTag(k, 0);

                      if MCF_Tag(i, 0, [f_class, 3]) then
                         begin
                         for k in MCF_Tag(i, 0, [f_class, 3]) do
                             if GetTag(k) = 0 then
                                begin
                                SetTag(k, 8); 
                                end;
                         end;

                      if MCF_Tag(i, 6, [f_distxy, x, y, 10]) and MCF_Tag(i, 8, []) then
                         for j in MCF_Tag(i, 8, []) do
                             begin
                             if IsInUnit(j) then
                                ComExitBuilding(j)
                                 else
                                  ComRepairVehicle(j, MCF_Tag(i, 6, [f_distxy, x, y, 10])[1]);
                             end;
                      end;
                   end
                    else
                        if MCF_Tag(i, 8, []) then
                           for k in MCF_Tag(i, 8, []) do
                               SetTag(k, 0);
                 
                // dep
                if MCF_Get(i, [f_btype, b_warehouse]) then
                   begin
                   b := MCF_Get(i, [f_btype, b_warehouse]);

                   if BuildingStatus(b) <> bs_build then
                      begin
                      if eng < all-sci-mech then
                         MCH_TrainEngineer(i, all-sci-mech);


                      if UnitsInside(b) and MCF_UnfinishedBuilding(i) then
                         for e in UnitsInside(b) do
                             ComExitBuilding(e);
                      end;

                   end;

               end;

           end;
End;
