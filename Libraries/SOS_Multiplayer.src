// SoS Multiplayer module by Serpent
// 2024

Export
  mpGameType,  // gameTypeNormal(1), gameTypeSurvival(2), gameTypeKing(3)
  mpGameSettingsKeys, // [1, 0, 0, 1 ...]  -- settings keys available for current map
  mpGameSettingsValues, // [ [0, 1, 2], [] ...] -- settings values available for current map
  mpGameSettings, // [ [1], [] ...]  -- final selected settings values by host
  mpSidePositions,
  mpSideTeams,
  mpSideNations,
  mpTeams,
  mpTeamGame,
  mpOilDeposits,
  mpSibDeposits,
  mpDepots,
  mpStartingResources,
  mpSharedVision,
  mpBuildings,
  mpMarkedAreas,
  mpBuildUpAreas,
  mpBuildUpTime,
  mpStartPos,
  mpBattleFlag,
  mpBattleFlags,
  mpPeopleAmount,
  mpPeopleSkill,
  mpSibDetection,
  mpShipments,
  mpSibBomb,
  mpMapSize,
  mpApemans,
  mpApemansArea,
  mpApePosIndex,
  mpRespawn,
  mpKingArea,
  mpPoints,
  mpVehicles,
  mpEmissions,
  mpDisplayStrings,
  mpGameActive,
  mpRespawnPull,
  mpGlobalOilDeposits,
  mpGlobalSibDeposits,
  mpTeleports,
  mpArtifacts,
  mpBlockRespThread;

{
  mpBaseLevel,            // (0)  No Base, Depot Only, Fortified, Extra Fortified
  mpAmountOfPeople,       // (1)  9, 12, 15, 24
  mpSkillLevel,           // (2)  Unexperienced, Little Experienced, Experienced, More Experienced
  mpStartingResources,    // (3)  None, Few, Medium, Lots
  mpShipments,            // (4)  Low, Medium, High, Very High
  mpOilSources,           // (5)  Normal, Extra / *Bool
  mpSibSources,           // (6)  None, Normal, Extra / *-
  mpPoints                // (7)
  mpVehicles              // (8)
  mpEmissions             // (9)
  mpSharedVision,         // (10) True, False
  mpFlags,                // (11) None, Fast Decreasing, Decreasing, Slowly Decreasing, Not Decreasing
  mpSibDetection,         // (12) True, False
  mpPeopleRespawn,        // (13) None, Rare, Common
  mpApemans,              // (14) None, Few, Medium, Lots
  mpSibBomb,              // (17) Off, On
  mpBuildUpTime,          // (20) BT
}

Export function InitMultiplayer;
var i;
begin
disable(mpActive);
disable(mpWin);
disable(mpLose);

// init arrays
mpGameType := 0;
mpGameSettings := [];
mpGameSettingsKeys := [];
mpGameSettingsValues := [];
mpMapSize := [2, 2];

mpOilDeposits := [];
mpSibDeposits := [];

mpGlobalOilDeposits := [];
mpGlobalSibDeposits := [];

mpDepots := [];
mpBuildings := [];
mpMarkedAreas := [];
mpBuildUpAreas := [];
mpBuildUpTime := [];
mpStartingResources := [];
mpStartPos := [];
mpBattleFlag := -1;
mpBattleFlags := [];
mpApemans := [];
mpApemansArea := [];
mpRespawn := [];
mpKingArea := 0;
mpPoints := [];
mpVehicles := 0;
mpShipments := 0;
mpRespawnPull := [ [], [], [], [], [], [], [], [] ];
mpApePosIndex := [ [], [], [], [], [], [], [], [] ];
mpEmissions := 0;
mpTeleports := 0;
mpArtifacts := 0;

mpPeopleSkill := 3;
mpPeopleAmount := 15;

mpDisplayStrings := 0;
mpGameActive := false;
mpBlockRespThread := false;

for i := 1 to 32 do
    mpGameSettings := Replace(mpGameSettings, i, 0);

// load arrays from the map code
End;

Export function StartMultiplayer;
var i, j, b, x, y, side, pos, nation, ape, team, setting, resources, gameTypes;
begin
gameTypes := [
    GameTypeNormal,
    GameTypeSurvival,
    GameTypeKing,
    GameTypeFamine
];

for i in gameTypes do
    disable(i);

if Multiplayer then
   begin
   mpGameType := mp_game_type;
   your_side  := mp_player_side;

   mpSidePositions := mp_sides_positions;
   mpSideTeams     := mp_sides_teams;
   mpSideNations   := mp_sides_nations;
   mpTeams         := mp_teams;

   for i := 1 to Count(mpGameSettingsKeys) do
       begin
       setting := mpGameSettingsKeys[i];

       if setting then
          mpGameSettings := Replace(mpGameSettings, i, mpGameSettingsValues[i][GetMultiplayerSetting(i - 1) + 1]);
       end;

   mpTeamGame := (mpSideTeams diff [0]) > 1;
   end
else // default
   begin
   
   end;

GetMultiplayerMapData(mpGameType); // custom function

// unmark areas
if Count(mpMarkedAreas) then
   begin
   for i in mpMarkedAreas do
       SetAreaMapShow(i, 0);
   end;

// place everything on map..
for i := 1 to 8 {max amount} do
    begin
    if not mpSidePositions[i] then
       continue;

    side := i;
    nation := mpSideNations[i];
    pos := mpSidePositions[i];

    // oil
    if Count(mpOilDeposits) then
       begin
       for j in mpOilDeposits[pos] do
           begin
           CreateDepositXY(j[1], j[2], mat_oil);
           SetResourceVisibility(j[1], j[2], side);
           end;
       end;

    // sib
    if Count(mpSibDeposits) then
       begin
       for j in mpSibDeposits[pos] do
           begin
           CreateDepositXY(j[1], j[2], mat_siberit);
           SetResourceVisibility(j[1], j[2], side);
           end;
       end;

    InitBc;
    InitUc;

    uc_side := side;
    uc_nation := nation;

    // battle flag
    if mpBattleFlag > -1 then
       begin
       x := mpStartPos[pos][1];
       y := mpStartPos[pos][2];

       PlaceEnvironment(x, y, 12, 2);

       mpBattleFlags := Replace(mpBattleFlags, side, SetBattleFlag(side, x, y, [
                                                                        [bfo_defend_bonus_human, 100],
                                                                        [bfo_defend_bonus_vehicle, 70],
                                                                        [bfo_defend_bonus_building, 40],
                                                                        [bfo_range, 25],
                                                                        [bfo_height, 100]
                                                                   ]));
       end;

    // depots
    if Count(mpDepots) then
       begin
       if mpGameType = GameTypeSurvival then
          begin
          bc_level := 10;
          bc_type := b_warehouse;
          end
       else
          begin
          bc_level := 0;
          bc_type := b_depot;
          end;

       b := CreateAndPlaceBuildingXYD(mpDepots[pos][1], mpDepots[pos][2], mpDepots[pos][3]);

       SetBName(b, '@' & side);
       // SetTag(b, side);

       if Count(mpStartingResources) then
          begin
          for j := 1 to mpStartingResources do
              SetResourceType(GetBase(b), j, mpStartingResources[j]);
          end;
       end
    else
       if Count(mpStartingResources) then
          begin
          x := mpStartPos[pos][1];
          y := mpStartPos[pos][2];

          for j := 1 to mpStartingResources do
              begin
              resources := mpStartingResources[j];

              if resources = 0 then
                 continue;

              repeat
               if resources >= 50 then
                  begin
                  CreateResourcesXYR(j, 5, x, y, 6, false);
                  resources := resources - 50;
                  end
               else
                  begin
                  CreateResourcesXYR(j, resources div 10, x, y, 6, false);
                  resources := 0;
                  end;
              until resources <= 0;
              end; 
          end;

    // buildings
    if Count(mpBuildings) then
       begin
       for j in mpBuildings[pos] do
           begin
           bc_level := 0;
           bc_type := j[1];
           CreateAndPlaceBuildingXYD(j[2], j[3], j[4]);
           end;
       end;

    // tech
    if mpSibDetection and GetTech(tech_sibdet, side) = state_enabled then
       SetTech(tech_SibDet, side, state_researched);

    if not mpArtifacts then
       SetTech(tech_artifact, side, state_disabled);

    // sib bomb
    if mpSibBomb = 1 then
       begin
       SetTech(tech_SibFiss, side, state_enabled);
       end
    else
       begin
       SetTech(tech_SibFiss, side, state_disabled);
       end;

    // units
    if mpVehicles then
       begin
       for j in mpPrepareVehicles(side, nation, mpVehicles) do
           begin
           SetDir(j, rand(0,5));
           PlaceUnitXYR(j, mpStartPos[pos][1], mpStartPos[pos][2], 12, false);
           end;
       end;

    uc_nation := nation;

    team := mpPrepareTeam(side, nation, mpPeopleAmount, mpPeopleSkill);

    for j in team do
        PlaceUnitXYR(j, mpStartPos[pos][1], mpStartPos[pos][2], 12, false);

    // apemans
    if mpApemans then
       begin
       for j := 1 to mpApemans do
           begin
           PrepareApeman(-5);
           ape := CreateHuman;
           mpApePosIndex := Replace(mpApePosIndex, pos, Join(mpApePosIndex[pos], ape));
           PlaceUnitArea(ape, mpApemansArea[pos], false);
           end;
       end;
    end;  

// diplomacy
if not mpTeamGame then
   begin
   for i := 1 to 8 do
       for j := 1 to 8 do
           if i <> j then
              SetAttitude(i, j, att_neutral, true)
           else
              SetAttitude(i, j, att_friend, true);
   end
else
   begin
   if mpSharedVision then
      begin
      for i in mpTeams do
          for j := 2 to i do
              ChangeSideFog(i[j], i[1]);
      end;

   for i := 1 to 8 do
       for j := 1 to 8 do
           if mpSideTeams[i] = mpSideTeams[j] then
              SetAttitude(i, j, att_friend, true)
           else
              SetAttitude(i, j, att_enemy, true);
   end;

// start game
music_nat := mpSideNations[your_side];

if IAmSpec then
   begin
   FogOff(true);
   CenterNowOnXY(mpMapSize[1] div 2, mpMapSize[2] div 2);
   end
else
   begin
   CenterNowOnXY(mpStartPos[mpSidePositions[your_side]][1], mpStartPos[mpSidePositions[your_side]][2]);
   end;

BeginBuildUp;

enable(mpActive);
enable(mpGameType);

mpGameActive := true;
End;

// Prepare Team
var mpTeamPreset;

Function mpPrepareTeam(side, nation, amount, skill);
var i, un, class;
begin
result := [];

class := class_soldier;

uc_side := side;
uc_nation := nation;

hc_name := mp_sides_players_names[side];
PrepareHuman(rand(1, 2), class, skill + 2);
hc_importance := 105;

if Multiplayer then
   begin
   hc_gallery := 'MULTIAVATARS';
   hc_face_number := Multiplayer_GetPlayerSideNum(side);
   hc_sex := Multiplayer_GetPlayerSex(side);
   end;

result := Join(result, CreateHuman);

if mpTeamPreset then
   begin
   CopySkills(mpTeamPreset[1], result[result]);
   SetAttr(result[result], attr_stamina, GetAttr(mpTeamPreset[1], attr_stamina));
   SetAttr(result[result], attr_speed, GetAttr(mpTeamPreset[1], attr_speed));
   end;

InitHc_All();

// 9, 12, 15, 24
// 2  3   4   6
class := 2;

for i := 1 to (amount - 1) do
    begin
    PrepareHuman(false, class, skill);
    un := CreateHuman;

    result := Join(result, un);

    if mpTeamPreset then
       begin
       CopySkills(mpTeamPreset[i+1], un);
       SetAttr(un, attr_stamina, GetAttr(mpTeamPreset[i+1], attr_stamina));
       SetAttr(un, attr_speed, GetAttr(mpTeamPreset[i+1], attr_speed));
       end;

    class := Inc(class);

    if class = 5 then
       class := 1;
    end;

if not mpTeamPreset then
   mpTeamPreset := result;
End;

Function mpPrepareVehicles(side, nation, vehicles);
var i;
begin
result := [];

if not vehicles then
   exit;

for i := 1 to vehicles[nation] do
    begin
    uc_side := side;

    if Count(vehicles[nation][i]) > 4 then
       uc_nation := vehicles[nation][i][5]
    else
       uc_nation := nation;

    PrepareVehicle(
       vehicles[nation][i][1],
       vehicles[nation][i][2],
       vehicles[nation][i][3],
       vehicles[nation][i][4],
       80
    );

    result := Join(result, CreateVehicle);
    end;
End;

// In-game logic

// Battle Flags logic
Function mpUpdateFlags(strength);
var i;
begin
for i in mpBattleFlags do
    ChangeBattleFlagOptions(i, [ [bfo_defend_bonus_human, strength],
                                 [bfo_defend_bonus_vehicle, strength * 0.7],
                                 [bfo_defend_bonus_building, strength * 0.4],
                                 [bfo_height, strength] ]);
End;

Every 0$1 trigger mpActive do
var i, strength;
begin
if mpBattleFlag <= 0 then
   exit;

strength := 100;

repeat
  wait(mpBattleFlag);
  strength := Dec(strength); 
  mpUpdateFlags(strength);
until not strength;

for i in mpBattleFlags do
    KillBattleFlag(i);
End;


// sib bomb
Every 0$1 marked mpActive do
var side, tmp;
begin
if mpSibBomb <= 1 then
   exit;

tmp := mpSibBomb;

repeat
 wait(0$1);
 tmp := tmp - 0$1;
until not tmp;

for side := 1 to 8 do
    SetTech(tech_SibFiss, side, state_enabled);
End;

// bt
Export mpBuildUpTimeDelay, mpBuildUpTimeActive;
Function BeginBuildUp;
var i, j;
begin
mpBuildUpTimeDelay := 0;

if not mpBuildUpTime then
   exit;

mpBuildUpTimeDelay := 4$00 + 1$00 * mpBuildUpTime;
mpBuildUpTimeActive := true;

for i := 1 to 8 do
    if mpSidePositions[i] then
       begin
       SetAreaMapShow(mpBuildUpAreas[mpSidePositions[i]], 5);

       for j := 1 to 8 do
           if mpSidePositions[j] and ((mpSideTeams[i] <> mpSideTeams[j]) or (not mpTeamGame) and (i <> j)) then
              HideArea(j, mpBuildUpAreas[mpSidePositions[i]]);
       end;
End;

Function EndBuildUp;
var i, j;
begin
mpBuildUpTimeActive := false;

for i := 1 to 8 do
    if mpSidePositions[i] then
       begin
       SetAreaMapShow(mpBuildUpAreas[mpSidePositions[i]], 0);

       for j := 1 to 8 do
           if mpSidePositions[j] and ((mpSideTeams[i] <> mpSideTeams[j]) or (not mpTeamGame) and (i <> j)) then
              ShowArea(j, mpBuildUpAreas[mpSidePositions[i]]);
       end;
End;

every 5 trigger mpBuildUpTimeActive marked mpActive do
var i, un;
begin
for i := 1 to 8 do
    if mpSidePositions[i] then
      for un in FilterUnitsInArea(mpBuildUpAreas[mpSidePositions[i]], [[f_or, [f_type, unit_human], [f_type, unit_vehicle]], [f_side, your_side]]) do
          if ((mpSideTeams[i] <> mpSideTeams[your_side]) or (not mpTeamGame) and (i <> your_side)) then
             ComMoveToArea(un, BuildUpEscape);

enable;
End;

Every 0$1 trigger mpBuildUpTime marked mpActive do
var tmp;
begin
tmp := mpBuildUpTime;

repeat
 wait(0$1);
 tmp := tmp - 0$1;
until not tmp;

EndBuildUp;
End;

// win & lose
Every 0$1 trigger mpActive marked mpWin do
begin
if IAmServer then
   wait(0$3);

if Multiplayer then
   YouWinInMultiplayer
else
   YouWin;
End;

Export function HasPowerByGameType(gameType, side);
begin
result := false;

case gameType of
     GameTypeNormal, GameTypeFamine:
                   begin
                   result := Count(FilterAllUnits([[f_side, side], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman]]]));
                   end;

     GameTypeSurvival:
                   begin
                   result := Count(FilterAllUnits([[f_side, side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]])) and Count(FilterAllUnits([[f_side, side], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman]]]));
                   end;

     GameTypeKing:
                   begin
                   result := Count(FilterAllUnits([[f_side, side], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman]]])) and
                             HowMuchPointsKing(side) < mpPoints;
                   end;
     end;
End;

Every 0$1 trigger mpActive marked mpLose do
var gameIsOn, i;
begin
if Multiplayer then
   SetPlayerSpectator()
else
   FogOff(your_side);

repeat
 gameIsOn := false;

 for i := 1 to 8 do
     if mpSidePositions[i] and MultiplayerSideAlive(i) and (i <> your_side) then
        if not mpSideTeams[i] or ((mpSideTeams[i] <> mpSideTeams[your_side]) and GetAttitude(your_side, i) <> att_friend) then
           if HasPowerByGameType(mpGameType, i) then
              begin
              gameIsOn := true;
              break;
              end;

 wait(100);
until not gameIsOn;

if IAmServer then
   wait(0$3);

if Multiplayer then
   YouLostInMultiplayer
else
   YouLost('');
End;

// respawn
Every 0$10 trigger mpRespawn marked mpActive do
var i, j, tmp, spawn, sides;
begin
sides := [1, 2, 3, 4, 5, 6, 7, 8];

repeat
 wait(0$10);

 for i := 1 to 8 do
     begin
     j := sides[i];

     if Count(mpRespawnPull[j]) and MultiplayerSideAlive(j) and HasPowerByGameType(mpGameType, j) then
        begin
        wait(mpRespawn div 3);

        tmp := FilterAllUnits([[f_side, j], [f_ok], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

        if not tmp or not MultiplayerSideAlive(j) or not HasPowerByGameType(mpGameType, j) then
           continue;

        spawn := tmp[1];
    
        PlaceUnitXYR(mpRespawnPull[j][1], GetX(spawn), GetY(spawn), 32, true);
        mpRespawnPull := Replace(mpRespawnPull, j, Delete(mpRespawnPull[j], 1));
        end;
     end;

  sides := Reindex(sides, 1, 8, true);

until false;
End;

// display string
Every 0$1 marked mpActive do
begin
enable;

if not mpDisplayStrings then
   begin
   display_strings := [];
   exit;
   end;

display_strings := mpDisplayStrings;
End; 

