// MacroEvents module
Export Function MCE_ApemanTamed(ape, sci);
var i, tmp;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    begin
    if sci in mc_bases[i] then
       begin
       mc_ape := Add(mc_ape, [i, mc_ape[i]+1], ape);

       tmp := NearestUnitToUnit(UnitFilter(mc_bases[i], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]), ape);

       if tmp then
          ComStandNearbyBuilding(ape, tmp);

       break;
       end;
    end;
End;

Export Function MCE_EnterBuilding(building, unit);
var i, tmp;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    begin
    if building in mc_busy_turret_list[i] then
       begin
       tmp := mc_busy_turret_list[i] diff building;
       mc_busy_turret_list := Replace(mc_busy_turret_list, i, tmp);
       break;
       end;
    end;
End;

Export Function MCE_BuildingCaptured(building, side, capturning_unit);
var i, tmp;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    if building in mc_bases[i] then
       begin
       tmp := mc_bases[i] diff building;
       mc_bases := Replace(mc_bases, i, tmp);

       if building in mc_turret_list[i] then
          mc_turret_list := Replace(mc_turret_list, i, mc_turret_list[i] diff building);

       if building in mc_empty_turret_list[i] then
          mc_empty_turret_list := Replace(mc_empty_turret_list, i, mc_empty_turret_list[i] diff building);

       break;
       end;
End;

Export Function MCE_VehicleCaptured(new, old, side, capturing_unit);
var i, tmp;
begin

if not mc_bases or not side in mc_sides then
   exit;

for i = 1 to mc_vehicles do
    if old in mc_vehicles[i] or new in mc_vehicles[i] then
       begin
       tmp := mc_vehicles[i] diff old;
       tmp := tmp diff new;
       mc_vehicles := Replace(mc_vehicles, i, tmp);
       break;
       end;
End;

Export Function MCE_VehicleConstructed(vehicle, factory);
var i, side, tmp;
begin
if not mc_bases then
   exit;

side := GetSide(vehicle);

for i = 1 to mc_bases do
    begin
    if factory in mc_bases[i] then
       begin
       if mc_defender[i] < mc_defender_limit[i] then
          begin
          mc_defender := Replace(mc_defender, i, mc_defender[i]^vehicle);

          if not mc_scan[i] then
             begin
             if GetControl(vehicle) = control_remote then
                repeat
                 wait(0$1);
                until IsControledBy(vehicle);

             ComMoveToArea(vehicle, mc_parking[i]);

             if GetControl(vehicle) <> control_manual then
                break;

             repeat
              wait(0$1);
             until IsInArea(vehicle, mc_parking[i]);

             ComExitVehicle(IsDrivenBy(vehicle));
             exit;
             end;
          end
         else
          mc_vehicles := Add(mc_vehicles, [i, mc_vehicles[i]+1], vehicle);
       end;
    end;
End;

Export Function MCE_CrateSpawn(id, x, y, amount, mode);
var i, j, depot;
begin
if not mc_bases then
   exit;

repeat
 wait(0$1);
until GetResourceAmountXY(x, y);

if GetResourceTypeXY(x, y) = mat_artefact then
   exit;

for i = 1 to mc_bases do
    begin
    if mc_crates_area[i] then
       for j in mc_crates_area[i] do
           if InArea(x, y, j) then
              begin
              mc_crates := Add(mc_crates, [i, mc_crates[i]+1], [amount, x, y]);
              exit;
              end;

    depot := UnitFilter(mc_bases[i], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]);

    if not depot then
       continue;

    for j in depot do
        if GetDistUnitXY(j, x, y) < 30 then
           begin
           mc_crates := Add(mc_crates, [i, mc_crates[i]+1], [amount, x, y]);
           exit;
           end;
    end;
End;

Export Function MCE_ResearchComplete(tech, lab);
var side, i, tmp;
begin
side := GetSide(lab);

if not side in mc_sides or not mc_tech or not mc_bases then
   exit;

mc_tech := Replace(mc_tech, side, mc_tech[side] diff tech);

for i = 1 to mc_bases do
    begin

    if lab in mc_bases[i] then
       begin

       if tech in [tech_apeagres, tech_apebrain, tech_apeneural, tech_apepsych] and mc_ape_in_lab[i] then
          begin
          tmp := mc_ape_in_lab[i][1];
          mc_ape_in_lab := Replace(mc_ape_in_lab, i, []);

          SetTag(tmp, 0);
          ComExitBuilding(tmp);

          mc_ape := Replace(mc_ape, i, Insert(mc_ape[i], 1, tmp));
          MC_Reset(i, 112);
          end;

       end;

    end;
End;

Export Function MCE_UnitDestroyed(un);
var i, j, btype, pos, tmp, fac, components;
begin

if not mc_bases then
   exit;

for i = 1 to mc_bases do
    if un in mc_bases[i] or un in mc_construct_list[i] or un in mc_vehicles[i] or un in mc_ape[i] or un in mc_ape_in_lab[i] then
       begin

       if un in mc_ape[i] then
          begin
          mc_ape := Replace(mc_ape, i, mc_ape[i] diff un);
          end;

       if un in mc_ape_in_lab[i] then
          begin
          mc_ape_in_lab := Replace(mc_ape_in_lab, i, []);
          end;

       if GetType(un) = unit_vehicle and GetTag(un) = 20 then
          begin
          fac := MC_GetBuilding(i, b_factory);

          if fac then
             begin
             components := Produce(fac, GetChassis(un), GetEngine(un), GetControl(un), GetWeapon(un));

             if components then
                MC_InsertProduceList(i, components);

             break;
             end;
          end;

       if GetType(un) = unit_building then
          begin
          btype := GetBType(un);

          if btype = b_warehouse then
             begin
             btype := b_depot;
             pos := 1;
             end;

          if btype = b_factory then
             begin
             btype := b_workshop;
             pos := 1;
             end;

          if btype in [b_lab_half, b_lab_full] then
             btype := b_lab;

          mc_build_list := Add(mc_build_list, [i, mc_build_list[i]+1], [btype, GetX(un), GetY(un), GetDir(un)]);

          if pos = 1 then
             begin
             tmp := mc_build_list[i];

             if UnitFilter(tmp, [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]) then
                pos := 2;

             tmp := ReplaceWith(tmp, pos, tmp);
             mc_build_list := Replace(mc_build_list, i, tmp);
             end;
          end;

       if un in mc_bases[i] then
          begin
          mc_bases := Replace(mc_bases, i, mc_bases[i] diff un);
          end;

       if un in mc_construct_list[i] then
          begin
          mc_construct_list := Replace(mc_construct_list, i, mc_construct_list[i] diff un);
          end;

       if un in mc_vehicles[i] then
          begin
          mc_vehicles := Replace(mc_vehicles, i, mc_vehicles[i] diff un);
          end;

       if un in mc_empty_turret_list[i] then
          begin
          mc_empty_turret_list := Replace(mc_empty_turret_list, i, mc_empty_turret_list[i] diff un);
          end;

       if un in mc_turret_list[i] then
          begin
          mc_turret_list := Replace(mc_turret_list, i, mc_turret_list[i] diff un);
          end;

       break;
       end;
End;

Export Function MCE_UpgradeComplete(building);
var i, j;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    begin

    if building in mc_construct_list[i] then
       begin
       mc_construct_list := Replace(mc_construct_list, i, mc_construct_list[i] diff building);

       if building in mc_lab[i] then
          mc_lab_upgrade := Replace(mc_lab_upgrade, i, Reindex(mc_lab_upgrade[i], 1, mc_lab_upgrade[i], false));

       if not building in mc_bases[i] then
          mc_bases := Add(mc_bases, [i, mc_bases[i]+1], building);
       exit;
       end;

    end;
End;

Export Function MCE_BuildingComplete(building);
var i, j, btype, tmp, units, side;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    begin

    if building in mc_construct_list[i] then
       begin
       mc_construct_list := Replace(mc_construct_list, i, mc_construct_list[i] diff building);
       mc_bases := Add(mc_bases, [i, mc_bases[i]+1], building);
       btype := GetBType(building);
       side := GetSide(building);

       if btype = b_lab then
          begin
          mc_lab := Add(mc_lab, [i, mc_lab[i]+1], building);
          exit;
          end;

       if btype in [b_depot, b_workshop, b_armoury] then
          begin
          if btype = b_armoury then
             btype := b_barracks;

          if btype = b_depot then
             btype := b_warehouse;

          if btype = b_workshop then
             btype := b_factory;

          if GetRestrict(btype, side) = state_enabled then
             mc_build_upgrade := Add(mc_build_upgrade, [i, mc_build_upgrade[i]+1], building);
          exit;
          end;

       if btype in [b_bunker, b_turret] then
          begin
          mc_turret_list := Add(mc_turret_list, [i, mc_turret_list[i]+1], building);

          if btype = b_bunker then
             begin
             mc_empty_turret_list := Add(mc_empty_turret_list, [i, mc_empty_turret_list[i]+1], building);

             // get soldier for tower
             tmp := UnitFilter(mc_bases[i], [[f_class, 1], [f_not, [f_inside]]]);

             if tmp then
                exit;

             tmp := UnitFilter(mc_bases[i], [f_or, [f_btype, b_armoury], [f_btype, b_barracks]]);

             if not tmp then
                exit;

             for j in tmp do
                 begin
                 units := UnitFilter(UnitsInside(j), [f_class, 1]);

                 if units then
                    begin
                    ComExitBuilding(units[1]);
                    exit;
                    end;
                 end;
             end;
          end;

       exit;
       end;

    end;
End;

Export Function MCE_BuildingStarted(building, builder);
var i, j, btype, x, y, d;
begin
if not mc_bases then
   exit;

btype := GetBType(building);
    x := GetX(building);
    y := GetY(building);
    d := GetDir(building);

for i = 1 to mc_bases do
    begin

    if not mc_build_list[i] then
       continue;

    if CompareArray([btype, x, y, d], mc_build_list[i][1]) then
       begin
       mc_build_list := Replace(mc_build_list, i, Delete(mc_build_list[i], 1));
       mc_construct_list := Add(mc_construct_list, [i, mc_construct_list[i]+1], building);
       exit;
       end;

    end;
End;

Export Function MCE_LeaveBuilding(building, unit);
var i, tmp;
begin
if not mc_bases then
   exit;

for i = 1 to mc_bases do
    begin
    if building in mc_turret_list[i] and not building in mc_empty_turret_list[i] then
       begin
       mc_empty_turret_list := Add(mc_empty_turret_list, [i, mc_empty_turret_list[i]+1], building);
       break;
       end;
    end;

if GetClass(building) in mc_sides and GetBType(building) = b_barracks and GetTag(unit) <> 18 then
   if GetClass(unit) in [5, 8, 9] then
      SetClass(unit, 1);
End;

Export Function MCE_EvacuateVehicle(driver, abandoned_vehicle, unknown1, unknown2);
var i;
begin
if not mc_bases then
   exit;

if GetLives(abandoned_vehicle) > 250 then
   exit;

for i = 1 to mc_bases do
    begin
    if driver in mc_bases[i] then
       begin
       ComMoveUnit(driver, UnitFilter(mc_bases[i], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]])[1]);
       break;
       end;
    end;
End;