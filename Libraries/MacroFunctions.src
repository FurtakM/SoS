// ATTACK
{
   * Wywo³anie odbywa siê w oddzielnej instacji RaiseSailEvent gdzie skrypt wykonywany jest w pêtli
     do czasu a¿ zostanie wykonane zadanie lub wszystkie jednostki atakuj¹ce zgin¹
   * Przy odpaleniu przekazujemy argumenty z mc_attack do lokalnego tmp i czyœcimy mc_attack
   * Po odpaleniu funkcji zbierane s¹ wszystkie dostêpne jednostki z group
   * Po zebraniu wymaganych jednostek nastêpuje pod¹¿anie po wyznaczonej trasie:
     * Przejazd polega na pod¹zaniu z punktu A do punktu B
     * Po dotarciu do punktu B nastêpuje skasowanie punktu A
     * Nastêpuje przejazd z punktu B do C
     * Ca³a operacja wykonywana jest oddzielnie dla ka¿dej z jednostek z group
     * Po wykryciu wroga (SEE lub DIST < 10) przejazd jest anulowany, a jednostka atakuje
       napotkanego wroga
     * Atak nastêpuje po wykryciu wroga
     * Podczas ataku uzglêdniane s¹ flagi ustawieñ:
       * mc_ignore_area - stara siê unikaæ wjazdu na dany obszar => [x, y, range]
       * mc_capture - okreœla czy jednostki atakuj¹ce mog¹ przejmowaæ wrogie pojazdy => [bool]
       * mc_ignore_civ - stara siê unikaæ jednostki cywilne wroga (mechanicy, naukowcy, komory trans.) => [bool]
       * mc_murder - okreœla czy jednostki wroga maj¹ byæ dobijane => [bool]
       * mc_mines - okreœla czy jednostki mog¹ podk³adaæ ³adunki czasowe => [bool]
       * mc_repair - okreœla czy jednostki mog¹ wycofywaæ siê i naprawiaæ (wymaga mechanikow w group) => [bool]
       * mc_heal - okreœla czy jednostki mog¹ wycofywaæ siê i leczyæ (wymaga naukowców w group) => [bool]
       * mc_spacetime - okreœla czy jednostki mog¹ korzystaæ z amunicji czasoprzestrznnej (wymaga bazookerow) => [bool]
       * mc_attack_depot - okreœla czy celem priorytetowym ma byæ magazyn w bazie wroga => [bool]
       * mc_crawl - okreœla czy ¿o³nierze mog¹ siê czo³gaæ => [bool]

     ** Stara siê ignorowaæ -> Cel nie jest priorytetowy ale mo¿e staæ siê celem ataku!

   Attack
    list => [ [ [base (optional), group, path, flags] ] ]
}
Export Function Attack(list);
var base, group, path, flags, i, j, k, x, y, d, z, tmp, tmp2, units_path,
    f_ignore_area, f_capture, f_ignore_civ,
    f_murder, f_mines, f_repair, f_heal, f_spacetime, f_attack_depot, f_crawl,
    mined, bombed, attacking, to_heal, healers, to_repair, repairs, empty_vehs, side;
begin
if not list then
   exit;

base := list[1];
group := list[2];
path := list[3];
flags := list[4];

mined := [];
bombed := [];

healers := [];
to_heal := [];

repairs := [];
to_repair := [];

if not group or not path then
   exit;

side := GetSide(group[1]);

// prepare flags
if flags then
   begin
   f_ignore_area := flags[1];
   f_capture := flags[2];
   f_ignore_civ := flags[3];  // not implement!
   f_murder := flags[4];
   f_mines := flags[5];
   f_repair := flags[6];
   f_heal := flags[7];
   f_spacetime := flags[8]; // not implement!
   f_attack_depot := flags[9];
   f_crawl := flags[10];
   end
else
   begin
   f_ignore_area := false;
   f_capture := false;
   f_ignore_civ := false;
   f_murder := false;
   f_mines := false;
   f_repair := false;
   f_heal := false;
   f_spacetime := false;
   f_attack_depot := false;
   f_crawl := false;
   end;

if f_heal then
   healers := UnitFilter(group, [f_class, 4]);

if f_repair then
   repairs := UnitFilter(group, [f_class, 3]);

// prepare path for every unit from group
units_path := [];

for i = 1 to group do
    units_path := Replace(units_path, i, path);


// main block
repeat
 for i = group downto 1 do
    begin
    wait(5);

    tmp := [];
    attacking := false;

    // remove dead unit from list
    if IsDead(group[i]) or not group[i] then
       begin
       if GetType(group[i]) = unit_human then
          begin
          to_heal := to_heal diff group[i];
          healers := healers diff group[i];
          end;

       group := Delete(group, i);
       units_path := Delete(units_path, i);
       continue;
       end;

    // filter vehicles by health
    if f_repair then
       begin
       if GetType(group[i]) = unit_vehicle then
          begin
          if GetLives(group[i]) < 700 and not group[i] in to_repair then
             to_repair := to_repair union group[i];

          if GetLives(group[i]) = 1000 and group[i] in to_repair then
             to_repair := to_repair diff group[i];

          if group[i] in to_repair then
             begin
             if not IsInArea(group[i], f_repair) then
                ComMoveToArea(group[i], f_repair);

             continue;
             end;
          end
       else
        if group[i] in repairs then
           begin
           if IsInUnit(group[i]) then
              begin
              z := IsInUnit(group[i]);

              if z in to_repair and IsInArea(z, f_repair) then
                 ComExitVehicle(group[i]);
              end
           else
              begin
              z := UnitFilter(group, [[f_inarea, f_repair], [f_empty]]);

              if not HasTask(group[i]) then
                 begin
                 x := NearestUnitToUnit(z, group[i]);

                 if not x then
                    continue;

                 if GetLives(x) < 1000 then
                    ComRepairVehicle(group[i], x)
                 else
                    if not (f_heal and GetLives(group[i]) < 1000) then
                       ComEnterUnit(group[i], x);
                 end;

              continue;
              end;
           end;
       end;

    // filter units by health
    if f_heal and GetType(group[i]) = unit_human then
       begin
       if group[i] in healers then
          begin
          if not IsInArea(group[i], f_heal) and not HasTask(group[i]) then
             ComMoveToArea(group[i], f_heal)
          else if GetLives(HealTarget(group[i])) = 1000 then
               ComStop(group[i])
          else if not HasTask(group[i]) and to_heal then
               begin
               z := NearestUnitToUnit(UnitFilter(to_heal, [f_not, [f_inside]]), group[i]);

               if z then
                  if FilterAllUnits([[f_dist, z, 10], [f_enemy, GetSide(z)]]) = 0 then
                     ComHeal(group[i], z)
               else
                  ComMoveToArea(group[i], f_heal);
               end;

          continue;
          end;

       if GetLives(group[i]) < 700 and not group[i] in to_heal then
          to_heal := to_heal union group[i];

       if group[i] in to_heal then
          begin
          if GetLives(group[i]) = 1000 then
             to_heal := to_heal diff group[i]
          else
             begin
             if not IsInArea(group[i], to_heal) then
                ComMoveToArea(group[i], f_heal)
             else
                ComHold(group[i]);

             continue;
             end;
          end;

       end;

    // scan terrain
    if not EnemyInRange(group[i], 10) and not units_path[i] = [] then
       begin

       // little cheat ;) Refuel if player dont see me
       if GetEngine(group[i]) in [engine_combustion, engine_solar] then
          if GetFuel(group[i]) < 10 then
             SetFuel(group[i], 12);

       if units_path[i] then
          begin
          if GetDistUnitXY(group[i], units_path[i][1][1], units_path[i][1][2]) > 6 then
             begin
             if not HasTask(group[i]) then
                ComAgressiveMove(group[i], units_path[i][1][1], units_path[i][1][2]);
             end
          else
             begin
             tmp2 := Delete(units_path[i], 1);
             units_path := Replace(units_path, i, tmp2);
             continue;
             end;
          end;
       end
      else // find some enemy
       begin
       tmp := FilterAllUnits([f_enemy, GetSide(group[i])]);

       if not tmp then
          continue; // end here!

       // f_ignore_area
       // ignore units from flag area
       if f_ignore_area then
          begin
          tmp2 := UnitFilter(tmp, [f_not, [f_distxy, f_ignore_area[1], f_ignore_area[2], f_ignore_area[3]]]);

          if (tmp diff tmp2) then
             tmp := tmp diff tmp2;
          end;

       // f_murder
       // attack units on red hp
       if not f_murder then
          begin
          tmp2 := UnitFilter(tmp, [f_not, [f_ok]]);

          if (tmp diff tmp2) then
             tmp := tmp diff tmp2;
          end;

       tmp := SortByDistanceUnit(group[i], tmp, true, true);

       // check unit type
       // soldier
       if GetClass(group[i]) = 1 then
          begin

          if WantPlant(group[i]) then
             continue;

          if f_capture and not IsInUnit(group[i]) and tmp[1] in UnitFilter(tmp, [[f_type, unit_vehicle], [f_empty]]) then
             begin
             ComEnterUnit(group[i], tmp[1]);
             attacking := true;
             continue;
             end;

          if f_crawl and GetClass(group[i]) = 1 and GetLives(group[i]) < 800 and not Crawls(group[i]) then
             ComCrawl(group[i]);

          if f_mines then
             begin
             if GetType(tmp[1]) = unit_building and not tmp[1] in mined then
                begin
                x := GetX(tmp[1]);
                y := GetY(tmp[1]);
                d := ReverseDir(group[i]);

                ComPlaceDelayedCharge(group[i], x, y, tmp[1]);
                AddComMoveXY(group[i], ShiftX(x, d, 7), ShiftY(y, d, 7));
                SetTag(group[i], 71);
                mined := Replace(mined, mined+1, tmp[1]);
                attacking := true;
                continue;
                end;
             end;

          end;

       // kamikaze
       if GetClass(group[i]) = 17 and not GetTag(group[i]) = 71 then
          begin
          attacking := false;
          k := 5;

          if tmp < k then
             k := tmp;

          for j = 1 to k do
              begin
              if not tmp[j] in UnitFilter(tmp, [f_empty]) then
                 begin
                 ComAttackUnit(group[i], tmp[j]);
                 attacking := true;
                 SetTag(group[i], 71);
                 continue;
                 end;
              end;
          end;

       // mortar or rockets
       if GetClass(group[i]) = 8 or GetWeapon(group[i]) in [ar_rocket_launcher, ru_rocket_launcher, us_rocket_launcher, ru_rocket] then
          begin
          attacking := false;

          if GetBType(tmp[1]) in [b_bunker, b_breastwork, b_turret, b_armoury, b_barracks] then
             begin
             k := GetBuildingHexes(GetBType(tmp[1]), GetX(tmp[1]), GetY(tmp[1]), GetDir(tmp[1]), GetNation(tmp[1]), 0);
             j := GetClosestHex(group[i], k);

             if j then
                if ValidHex(j[1], j[2]) then
                   begin
                   ComAttackPlace(group[i], j[1], j[2]);
                   attacking := true;
                   continue;
                   end;
             end
          else
             ComAttackUnit(group[i], tmp[1]);
          end;

       // hovercraft
       if GetChassis(group[i]) = ar_hovercraft then
          begin
          k := 10;
          x := 0;

          if tmp < k then
             k := tmp;

          for j = k downto 1 do
              begin
              if GetType(tmp[j]) = unit_human then
                 begin
                 AttackHovercraft(group[i], tmp[j]);
                 x := tmp[j];
                 attacking := true;
                 end;
              end;

          if not x then
             begin
             attacking := true;

             if GetHexInfo(GetX(group[i]), GetY(group[i]))[2] = GetHexInfo(GetX(tmp[1]), GetY(tmp[1]))[2] then
                AttackHovercraft(group[i], tmp[1])
               else
                ComAttackUnit(group[i], tmp[1]);
             end;
          end;

       // self propelled bomb
       if GetWeapon(group[i]) = ar_selfpropelled_bomb then
          begin

          if WantsToAttack(group[i]) in bombed then
             continue;

          k := 8;
          x := 0;

          if tmp < k then
             k := tmp;

          for j = 1 to k do
              begin
              if GetType(tmp[j]) = unit_building then
                 if not tmp[j] in bombed and UnitsInside(tmp[j]) then
                    begin
                    ComAttackUnit(group[i], tmp[j]);
                    bombed := Replace(bombed, bombed+1, tmp[j]);
                    attacking := true;
                    break;
                    end;
              end;

          if not attacking and f_attack_depot then
             begin
             z := UnitFilter(tmp, [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]);

             if z then
                begin
                ComAttackUnit(group[i], NearestUnitToUnit(z, group[i]));
                attacking := true;
                end;
             end;


          if GetLives(group[i]) < 500 then
             ComAttackUnit(group[i], tmp[1]);
          end;

       // time lapsers
       if GetWeapon(group[i]) = ru_time_lapser then
          begin
          if not HasTask(group[i]) then
             begin
             k := NearestUnitToUnit(FilterAllUnits([f_enemy, GetSide(group[i])]), group[i]);

             if k then
                if GetDistUnits(group[i], k) > 10 then
                   ComMoveUnit(group[i], k);
             end;
          end;


       // autodestruction
       if GetLives(group[i]) < 250 and group[i] in FilterAllUnits([[f_type, unit_vehicle], [f_nation, 2]]) then
          begin
          k := NearestUnitToUnit(all_units diff group[i], group[i]);

          if not k then
             continue;

          if k in FilterAllUnits([f_enemy, GetSide(group[i])]) and GetDistUnits(k, group[i]) < 5 then
             ComAutodestruct(group[i]);
          end;

       if f_attack_depot then
          begin
          k := 6;

          if tmp < k then
             k := tmp;

          for j = 1 to k do
              if GetBType(j) in [b_depot, b_warehouse] then
                 begin
                 ComAttackUnit(group[i], tmp[j]);
                 attacking := true;
                 break;
                 end;
          end;

       // others..
       if IsOk(group[i]) and not attacking then
          begin

          if GetTag(group[i]) = 71 then
             begin
             if HasTask(group[i]) then
                continue
               else
                SetTag(group[i], 0);
             end;

          k := 8;
          x := 0;

          if tmp < k then
             k := tmp;

          for j = 1 to k do
              if GetType(tmp[j]) = unit_human and ((GetLives(tmp[j]) < 250 and f_murder) or (not f_murder and GetLives(tmp[j]) >= 250)) then
                 begin
                 x := tmp[j];
                 break;
                 end;

          if x then
             ComAttackUnit(group[i], x)
            else
             ComAttackUnit(group[i], tmp[1]);

          // if target is unreachable
          if not HasTask(group[i]) then
             ComAttackUnit(group[i], NearestUnitToUnit(tmp, group[i]));
          end;
    end;

 end;

 wait(0$2);
until not group or group = [] or not FilterAllUnits([f_enemy, side]);
End;

Export Function BasicDefend(base, solds);
var enemy, e, side, i, hex;
begin
if not base or not mc_bases[base] or not solds then
   exit;

side := mc_sides[base];

if not side then
   exit;

for i in solds do
    if GetBType(IsInUnit(i)) in [b_bunker, b_breastwork] then
       solds := solds diff i
    else
       SetTag(i, 18);

if not solds then
   exit;

repeat
 wait(0$2);
 enemy := mc_scan[base];

 if not mc_bases[base] or mc_bases[base] = [] then
    begin
    for i in solds do
        ComStop(i);

    solds := [];
    exit;
    end;

 for i in solds do
     begin
     if IsInUnit(i) then
        ComExitBuilding(i);

     if GetLives(i) > 500 then
        begin
        e := NearestUnitToUnit(enemy, i);
        ComAgressiveMove(i, GetX(e), GetY(e));
        end
     else if GetDistUnits(i, NearestUnitToUnit(UnitFilter(mc_bases[base], [f_or, [f_btype, b_depot], [f_btype, b_warehouse], [f_btype, b_lab]]), i)) > 10 then
        begin
        hex := NearestUnitToUnit(UnitFilter(mc_bases[base], [f_or, [f_btype, b_depot], [f_btype, b_warehouse], [f_btype, b_lab]]), i);
        ComMoveXY(i, ShiftX(GetX(hex), 3, 5), ShiftY(GetY(hex), 3, 5));
        SetTag(i, 0);
        solds := solds diff i;
        continue;
        end;
     end;

until not solds or not enemy;

MC_Reset(base, 18);
End;

// base, defenders, enemy
Export Function Defend(base, defenders);
var i, j, x, depot, solds, mech, un, tmp, mechs, e, fac, components, depot_under_attack, sold_defenders, b, can_defend, class, enemy;
begin
mechs := UnitFilter(mc_bases[base], [f_class, 3]);

if mc_remote_driver[base] then
   mechs := mechs diff mc_remote_driver[base];

for i in mechs do
    if GetTag(i) > 0 then
       mechs := mechs diff i;

solds := UnitFilter(mc_bases[base], [f_or, [f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]);

if not defenders and not solds then
   exit;

depot_under_attack := false;
sold_defenders := [];

if mechs then
   for i in UnitFilter(defenders, [f_type, unit_vehicle]) do
       begin
       if GetTag(i) <> 20 then
          SetTag(i, 20);

       if GetControl(i) = control_manual and not IsDrivenBy(i) then
          begin
          un := mechs[1];
          ComExit(un);
          AddComEnterUnit(un, i);
          SetTag(un, 19);
          mechs := mechs diff un;
          end;
       end;

if solds then
   for i in solds do
       if not GetTag(i) then
          begin
          defenders := defenders union i;
          SetTag(i, 18);
          end;

repeat
 wait(0$2);
 enemy := mc_scan[base];

 if not mc_bases[base] or mc_bases[base] = [] then
    begin
    for i in defenders do
        ComStop(i);

    defenders := [];
    exit;
    end;

 for i in defenders do
     begin
     e := NearestUnitToUnit(enemy, i);

     depot := UnitFilter(mc_bases[base], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]);
     depot_under_attack := (not depot or UnitFilter(depot, [f_not, [f_lives, 600]]));

     case GetType(i) of
          unit_vehicle:
          begin

          if GetLives(i) = 1000 and (GetDistUnits(i, e) < 40 or IsInArea(e, mc_scan_area[base])) then
             begin
             if GetEngine(i) = engine_combustion and GetFuel(i) < 30 and depot then
                begin
                ComMoveUnit(i, NearestUnitToUnit(depot, i));

                if GetDistUnits(i, NearestUnitToUnit(depot, i)) < 6 then
                   SetFuel(i, 100);
                end
             else
                ComAttackUnit(i, e);
             end
          else if ((not IsInArea(e, mc_scan_area[base]) and GetDistUnits(i, e) >= 40) or GetLives(i) <= 650) and not IsInArea(i, mc_parking[base]) then
             ComMoveToArea(i, mc_parking[base]);

          if GetLives(i) < 1000 and GetControl(i) = control_manual and IsDrivenBy(i) and IsInArea(i, mc_parking[base]) then
             begin
             mech := IsDrivenBy(i);

             ComExitVehicle(mech);
             AddComRepairVehicle(mech, i);
             AddComEnterUnit(mech, i);
             end;

          end;

          unit_human:
          begin
          b := IsInUnit(i);
          can_defend := (not b or GetBType(b) in [b_bunker, b_breastwork]);

          if GetBType(b) = b_barracks and GetClass(i) in [1, 2, 3, 4] then
             begin
             class := AllowSpecClass(i);

             if class then
                ComChangeProfession(i, class);
             end;

          if (depot_under_attack or UnitFilter(defenders, [f_type, unit_vehicle]) <= 1) and can_defend and not i in sold_defenders then
             begin

             if b then
                if GetDistUnits(b, NearestUnitToUnit(enemy, b)) < 10 and BuildingStatus(b) <> bs_need_power then
                   continue;

             sold_defenders := Replace(sold_defenders, sold_defenders + 1, i);
             ComExitBuilding(i);
             end;

          if sold_defenders then
             if i in sold_defenders then
                begin
                if not HasTask(i) and GetDistUnits(i, e) < 30 then
                   ComAttackUnit(i, e);
                end;

          end;

     end;

     if IsDead(i) then
        defenders := defenders diff i;
     end;
until not enemy or not defenders or not mc_bases[base];

MC_Reset(base, 18);
defenders := defenders diff UnitFilter(defenders, [f_or, [f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]);

if not enemy and UnitFilter(defenders, [f_type, unit_vehicle]) then
   begin
   tmp := FilterByTag(defenders, 19);

   if tmp then
      begin
      tmp := UnitFilter(tmp, [f_class, 3]);

      if tmp then
         mc_repair_vehicle := Replace(mc_repair_vehicle, base, mc_repair_vehicle[base] union tmp);
      end;

   MC_Reset(base, 19);

   repeat
    wait(0$1);

    if not mc_bases[base] or mc_bases[base] = [] then
       begin
       for i in defenders do
           ComStop(i);

       defenders := [];
       exit;
       end;

    for i in defenders do
        begin
        if not IsInArea(i, mc_parking[base]) then
           ComMoveToArea(i, mc_parking[base])
        else
         if GetControl(i) = control_manual then
            if IsDrivenBy(i) then
               ComExitVehicle(IsDrivenBy(i));
        end;
   until UnitFilter(defenders, [f_inarea, mc_parking[base]]) = defenders or mc_scan[base] or not mc_bases[base];

   end;

mc_defender := Replace(mc_defender, base, UnitFilter(defenders, [f_type, unit_vehicle]));

MC_Reset(base, 19);
MC_Reset(base, 20);
End;