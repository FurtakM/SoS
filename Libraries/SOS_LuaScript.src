// SoS Lua Script module
// SoS Timer
Every 0$1 do
begin
enable;   
ToLua('updateTimer(' & tick & ');');
End;

// On map start/load
Export Function SOS_MapStart();
begin
if streamModeActive then
   DefineStreamItems(true);

UpdateFactoryWaypoints();
UpdateWarhouseGatheringPoints();
End;                   

// SoS Stream Mode by Serpent
// SoS Hack Mode by Serpent
// 01.04.2021
Export Function SOS_CustomCommand(p1, p2, p3, p4, p5, p6);
begin

if p2 = 100 then // stream mode
   begin
   if not StreamModeActive then
      StreamModeActive := true;

   if p3 = 0 then
      InitStreamMode;

   if p3 = 1 then
      sRocket := true;

   if p3 = 2 then
      sSpeed := true;

   if p3 = 3 then
      sEngine := true;

   if p3 = 4 then
      sSpec := true;

   if p3 = 5 then
      sLevel := true;

   if p3 = 6 then
      sArmoury := true;

   if p3 = 7 then
      sRadar := true;

   if p3 = 8 then
      sBunker := true;

   if p3 = 9 then
      sHack := true;

   if p3 = 10 then
      sFire := true;

   if p3 = 11 then
      sRefresh := true;

   if p3 = 12 then
      sExp := true;

   if p3 = 13 then
      sDepot := true;

   if p3 = 14 then
      sFlag := true;

   if p3 = 15 then
      sKamikadze := true;

   if p3 = 16 then
      sTroll := true;

   if p3 = 17 then
      sSlow := true;

   if p3 = 18 then
      sLack := true;

   if p3 = 19 then
      sTank := true;

   if p3 = 20 then
      sRemote := true;

   if p3 = 21 then
      sPowell := true;

   if p3 = 22 then
      sTeleport := true;

   if p3 = 23 then
      sOilTower := true;

   if p3 = 24 then
      sShovel := true;

   if p3 = 25 then
      sSheik := true;

   if p3 = 26 then
      sEarthquake := true;

   if p3 = 27 then
      sAI := true;

   if p3 = 28 then
      sCargo := true;

   if p3 = 29 then
      sDLaser := true;

   if p3 = 30 then
      sExchange := true;

   if p3 = 31 then
      sFac := true;

   if p3 = 32 then
      sPower := true;

   if p3 = 33 then
      sRandom := true;

   if p3 = 34 then
      sShield := true;

   if p3 = 35 then
      sTime := true;

   if p3 = 36 then
      sTools := true;

   if p3 = 101 then
      sSold := true;

   if p3 = 102 then
      sDiff := true;

   if p3 = 103 then
      sFog := true;

   if p3 = 104 then
      sReset := true;

   if p3 = 105 then
      sSun := true;

   if p3 = 106 then
      sTiger := true;

   if p3 = 107 then
      sBomb := true;

   if p3 = 108 then
      sWound := true;

   if p3 = 109 then
      sBetray := true;

   if p3 = 110 then
      sContamin := true;

   if p3 = 111 then
      sOil := true;

   if p3 = 112 then
      sStu := true;

   if p3 = 113 then
      sBazooka := true;

   if p3 = 114 then
      sMortar := true;

   if p3 = 115 then
      sRanger := true;

   if p3 = 116 then
      sComputer := true;

   if p3 = 117 then
      s30 := true;

   if p3 = 118 then
      s60 := true;
   end;

if p2 = 101 then // hack mod
   begin
   case p3 of
        1: hHackUnlimitedResources;
        2: hHackSetLevel10;
        3: hHackSetLevel10YourUnits;
        4: hHackInvincible;
        5: hHackInvisible;
        6: hHackChangeYourSide;
        7: hHackChangeUnitSide;
        8: hHackFog;
        end;
   end;
End;

Export StreamModeActive, normalCounter, hardcoreCounter,
       sSpec, sSpeed, sRocket, sEngine,
       sLevel, sArmoury, sRadar, sBunker,
       sHack, sFire, sRefresh, sExp, sDepot,
       sFlag, sSold, sDiff, sTiger, sBomb, sFog,
       sReset, sSun, sKamikadze, sTroll, sSlow, sLack,
       sWound, sTank, sRemote, sPowell, sBetray, sContamin,
       sTeleport, sOil, sOilTower, sShovel, sSheik, sStu, sEarthquake,
       sAI, sBazooka, sMortar, sCargo, sDLaser, sExchange, sFac, sPower, sRandom,
       sShield, sTime, sTools, sRanger, sComputer, s30, s60;

Every 0$1 do
begin
ToLua('initStreamRollete();');
InitStreamMode;
DefineStreamItems(false);
End;

Function InitStreamMode;
begin
streamModeActive := false;
normalCounter := 36;
hardcoreCounter := 18;

sRocket := false; // 1
sSpeed := false; // 2
sEngine := false; // 3
sSpec := false; // 4
sLevel := false; // 5
sArmoury := false; // 6
sRadar := false; // 7
sBunker := false; // 8
sHack := false; // 9
sFire := false; // 10
sRefresh := false; // 11
sExp := false; // 12
sDepot := false; // 13
sFlag := false; // 14
sKamikadze := false; // 15
sTroll := false; // 16
sSlow := false;  // 17
sLack := false; // 18
sTank := false; // 19
sRemote := false; // 20
sPowell := false; // 21
sTeleport := false; // 22
sOilTower := false; // 23
sShovel := false; // 24
sSheik := false; // 25
sEarthquake := false; // 26
sAI := false; // 27
sCargo := false; // 28
sDLaser := false; // 29
sExchange := false; // 30
sFac := false; // 31
sPower := false; // 32
sRandom := false; // 33
sShield := false; // 34
sTime := false; // 35
sTools := false; // 36

sSold := false; // 101
sDiff := false; // 102
sFog := false; // 103
sReset := false; // 104
sSun := false; // 105
sTiger := false; // 106
sBomb := false; // 107
sWound := false; // 108
sBetray := false; // 109
sContamin := false; // 110
sOil := false; // 111
sStu := false; // 112
sBazooka := false; // 113
sMortar := false; // 114
sRanger := false; // 115
sComputer := false; // 116
s30 := false; // 117
s60 := false; // 118
End;

Function DefineStreamItems(isGameLoad);
var tmp, flags, normal, hardcore, active, i;
begin
result := [];

if campaign_id = 1 then // us_camp
   begin
        case mission_number of
             1: result := [ [2, 4, 11, 12, 15, 16, 22, 23, 26], [101, 102, 106, 116, 117, 118] ];
             2: result := [ [2, 4, 11, 12, 15, 16, 22, 23, 26], [101, 102, 105, 106, 108, 116, 117, 118] ];
             3: result := [ [2, 4, 5, 11, 12, 15, 16, 22, 26, 36], [101, 102, 105, 106, 108, 116, 117, 118] ];
             4: result := [ [2, 4, 5, 8, 11, 12, 15, 16, 22, 23, 26, 36], [101, 102, 105, 106, 108, 116, 117, 118] ];
             5: result := [ [2, 4, 5, 6, 8, 11, 12, 15, 16, 22, 23, 25, 26, 36], [101, 102, 105, 106, 108, 109, 112, 116, 117, 118] ];
             6: result := [ [2, 4, 5, 6, 8, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26, 30, 31, 32, 36], [101, 102, 105, 106, 108, 109, 112, 116, 117, 118] ];
             7: result := [ [2, 4, 5, 7, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26], [101, 102, 103, 105, 106, 108, 112, 116, 117, 118] ];
             8: result := [ [2, 4, 5, 6, 7, 8, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26, 30, 31, 32, 36], [101, 102, 103, 105, 106, 108, 109, 112, 116, 117, 118] ];
             9: result := [ [2, 4, 5, 6, 7, 8, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 36], [101, 102, 103, 105, 106, 108, 109, 112, 114, 116, 117, 118] ];
             10: result := [ [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118] ];
             11: result := [ [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 32, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 118] ];
             12: result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118] ];
             13: result := [ [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118] ];
             14: result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118] ];
             15: result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118] ];
             16: result := [ [2, 4, 5, 7, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26, 30, 31, 32, 33, 34], [101, 102, 103, 106, 108, 112, 113, 114, 116, 117, 118] ];
             17: result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118] ];
             18: result := [ [2, 4, 5, 7, 11, 12, 15, 16, 20, 21, 22, 23, 25, 26, 30, 31, 32, 33, 34, 35, 36], [101, 102, 103, 106, 108, 112, 113, 114, 115, 116, 117, 118] ];
             19: result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118] ];
        end;
   end
else
   result := [ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118] ];

if result then
   begin
   normal := '';
   hardcore := '';
   active := '';

   for i = 1 to normalCounter do
       begin
       tmp := '0';

       if result[1] then
          if result[1][1] = i then
             begin
             result := Replace(result, 1, Delete(result[1], 1));
             tmp := '1';
             end;

       normal := normal & tmp;
       end;

   for i = 1 to hardcoreCounter do
       begin
       tmp := '0';

       if result[2] then
          if result[2][1] = 100 + i then
             begin
             result := Replace(result, 2, Delete(result[2], 1));
             tmp := '1';
             end;

       hardcore := hardcore & tmp;
       end;

   if isGameLoad then
      begin
      flags := [
        sRocket,
        sSpeed,
        sEngine,
        sSpec,
        sLevel,
        sArmoury,
        sRadar,
        sBunker,
        sHack,
        sFire,
        sRefresh,
        sExp,
        sDepot,
        sFlag,
        sKamikadze,
        sTroll,
        sSlow,
        sLack,
        sTank,
        sRemote,
        sPowell,
        sTeleport,
        sOilTower,
        sShovel,
        sSheik,
        sEarthquake,
        sAI,
        sCargo,
        sDLaser,
        sExchange,
        sFac,
        sPower,
        sRandom,
        sShield,
        sTime,
        sTools,
        sSold, // hardcore
        sDiff,
        sFog,
        sReset,
        sSun,
        sTiger,
        sBomb,
        sWound,
        sBetray,
        sContamin,
        sOil,
        sStu,
        sBazooka,
        sMortar,
        sRanger,
        sComputer,
        s30,
        s60
      ];

      tmp := '';

      for i = 1 to normalCounter do
          begin
          if flags[i] then
             tmp := tmp & i & ';';
          end;

      for i = 1 to hardcoreCounter do
          begin
          if flags[normalCounter + i] then
             tmp := tmp & (100 + i) & ';';
          end;

      if tmp then
         active := tmp;
      end;

   ToLua('getStreamItemsFromMission("' & normal & '","' & hardcore & '","' & active & '")');
   end
else
   ToLua('getStreamItemsFromMission("","","")');
End;

Every 0$2 trigger StreamModeActive and sRocket do
var i, tmp;
begin
enable;

tmp := FilterAllUnits([[f_side, your_side], [f_or,
    [f_weapon, us_rocket_launcher],
    [f_weapon, ru_rocket_launcher],
    [f_weapon, ar_rocket_launcher],
    [f_weapon, ru_rocket]]]);

if not tmp then
   exit;

for i in tmp do
    begin
    SetLives(i, 0);
    end;
End;

Every 0$2 trigger StreamModeActive and sEngine do
var i, tmp;
begin
enable;

tmp := FilterAllUnits([[f_side, your_side], [f_engine, engine_siberite]]);

if not tmp then
   exit;

for i in tmp do
    begin
    SetLives(i, 0);
    end;
End;

Every 0$1 trigger StreamModeActive and sSpec do
var i;
begin
enable;

for i in FilterAllUnits([[f_side, your_side], [f_or,
    [f_class, class_sniper],
    [f_class, class_bazooker],
    [f_class, class_mortar]]]) do
    begin
    SetClass(i, 1);
    end;
End;

Every 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
begin
enable;  
game_speed := 7;
End;

Every 0$1 trigger StreamModeActive and sLevel do
var i, k, tmp;
begin
tmp := FilterAllUnits([[f_enemy, your_side], [f_type, unit_human]]);

if not tmp then
   exit;

if tmp > 5 then
   k := 5
else
   k := tmp;

for i := 1 to k do
    if GetSkill(tmp[i], i mod 4 + 1) < 10 then
       SetSkill(tmp[i], i mod 4 + 1, GetSkill(tmp[i], i mod 4 + 1) + 1);
End;

Every 0$1 trigger StreamModeActive and sArmoury do
SetRestrict(b_armoury, your_side, false);

Every 0$1 trigger StreamModeActive and sShovel do
SetRestrict(b_ext_noncombat, your_side, false);

Every 0$1 trigger StreamModeActive and sRadar do
var i, tmp;
begin
enable;

tmp := FilterAllUnits([[f_side, your_side], [f_or, [f_weapon, us_radar], [f_weapon, ar_radar]]]);

if not tmp then
   exit;

for i in tmp do
    begin
    SetLives(i, 0);
    end;
End;

Every 0$1 trigger StreamModeActive and sBunker do
SetRestrict(b_bunker, your_side, false);

Every 0$1 trigger StreamModeActive and sHack do
var i, tmp, side;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_control, control_computer]]);

if not tmp then
   exit;

side := 0;

for i := 1 to 8 do
    if your_side <> i and GetAttitude(your_side, i) = att_enemy then
       begin
       side := i;
       break;
       end;

if not side then
   exit;

for i := 1 to tmp do
    if Prob(60) then
       SetSide(i, side);
End;

Every 0$1 trigger StreamModeActive and sRefresh do
var un;
begin
for un in FilterAllUnits([[f_side, your_side], [f_type, unit_human], [f_not, [f_nation, 0]]]) do
    if GetClass(un) in [1, 2, 3, 4] then
       SetClass(un, rand(1, 4));
End;

Every 0$1 trigger StreamModeActive and sFire do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_building]]);

if not tmp then
   exit;

SetLives(tmp[rand(1, tmp)], 100);
End;

Every 0$1 trigger StreamModeActive and sExp do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human]]);

if not tmp then
   exit;

AddExperience(tmp[rand(1, tmp)], rand(1, 4), rand(3000, 9000));
End;

Every 0$1 trigger StreamModeActive and sDepot do
SetRestrict(b_warehouse, your_side, false);

Every 0$1 trigger StreamModeActive and sFlag do
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_building]]);

if not tmp then
   exit;

for i in tmp do
    SetBLevel(i, 10);
End;

Every 0$1 trigger StreamModeActive and sSold do
var i, un, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_class, 1]]);

if not tmp then
   exit;

un := tmp[rand(1, tmp)];

if Crawls(un) then
   ComWalk(un);

SetClass(un, class_sniper);
End;

Every 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
begin
Difficulty := Difficulty + 1;
End;

Every 0$1 trigger StreamModeActive and sTiger do
var i;
begin
for i := 1 to 5 do
    begin
    uc_nation := nation_nature;
    uc_side := 0;

    hc_attr := [12, 12];
    hc_agressivity := 20;
    hc_class := class_tiger;
    hc_gallery := '';
    hc_name := '';

    PlaceUnitAnyWhere(CreateHuman, false);
    end;
End;
          
Every 0$1 trigger StreamModeActive and sBomb do
StreamSibBomb;

Export Function StreamSibBomb;
var i, x, y;
begin
result := false;

for i := 1 to 16 do
    begin
    x := [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150][rand(1,15)];
    y := [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150][rand(1,15)];

    if ValidHex(x, y) then
       begin
       result := [x, y];
       break;
       end;
    end;

if result then
   begin
   ToLua('playSibBomb()');
   wait(0$14);
   CenterNowOnXY(result[1], result[2]);
   SendSiberiteRocket(result[1], result[2]);
   end;
End;

Every 0$1 trigger StreamModeActive and sReset do
YouLost('');

Every 0$1 trigger StreamModeActive and sFog do
FogOff(your_side);

Every 0$1 trigger StreamModeActive and sSun do
begin
solar_recharge_percent := 0;
wait(5$00);
solar_recharge_percent := 100;
End;

Every 0$1 trigger StreamModeActive and sKamikadze do
var i, un, tmp;
begin
tmp := [];

for i := 1 to 6 do
    begin
    uc_nation := nation_nature;
    uc_side := 0;

    hc_attr := [12, 12];
    hc_agressivity := 20;
    hc_class := class_apeman_kamikaze;
    hc_gallery := '';
    hc_name := '';

    un := CreateHuman;
    PlaceUnitAnyWhere(un, true);

    tmp := tmp ^ un;
    end;

repeat
 wait(0$1);

 for un in tmp do
     begin
     if IsDead(un) then
        begin
        tmp := tmp diff un;
        continue;
        end;

     ComAttackUnit(un, NearestUnitToUnit(FilterAllUnits([f_not, [f_side, 0]]), un));
     end;

until not tmp;
End;

Every 0$1 trigger StreamModeActive and sTroll do
begin
ToLua('displayTroll();');
wait(3$00);
ToLua('hideTroll();');
wait(1$00);
ToLua('displayTroll();');
wait(1$00);
ToLua('hideTroll();');
End;

Every 0$1 trigger StreamModeActive and sSlow do
var p;
begin
p := 0;

repeat
 game_speed := 1;
 wait(0$1);
 p := p + 1;
until p >= 60;

game_speed := 4;
End;

Every 0$1 trigger StreamModeActive and sLack do
var depot, base;
begin
depot := FilterAllUnits([[f_side, your_side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

if not depot then
   exit;

base := GetBase(depot[rand(1, depot)]);

SetResourceType(base, mat_cans, 0);
SetResourceType(base, mat_oil, 0);
SetResourceType(base, mat_siberit, 0);
End;

Every 0$1 trigger StreamModeActive and sWound do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human], [f_not, [f_nation, 0]]]);

if not tmp then
   exit;

SetLives(tmp[rand(1, tmp)], 200);
End;

Every 0$1 trigger StreamModeActive and sTank do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_vehicle]]);

if not tmp then
   exit;

SetLives(tmp[rand(1, tmp)], 60);
End;

Every 0$1 trigger StreamModeActive and sRemote do
var tmp, i;
begin
enable;

tmp := FilterAllUnits([[f_side, your_side], [f_linked], [f_control, control_remote]]);

if not tmp then
   exit;

for i in tmp do
    if IsControledBy(i) then
       ComUnlink(i);
End;

Every 0$1 trigger StreamModeActive and sPowell do
var i, un;
begin
ToLua('displayPowell();');

uc_side := 0;
uc_nation := 2;

vc_chassis := ar_half_tracked;
vc_engine := engine_siberite;
vc_control := control_apeman;
vc_weapon := ar_selfpropelled_bomb;

un := CreateVehicle;
PlaceUnitAnywhere(un, true);

repeat
 wait(0$1); 
 ComAttackUnit(un, NearestUnitToUnit(FilterAllUnits([f_side, your_side]), un));
until IsDead(un);
End;

Every 0$1 trigger StreamModeActive and sStu do
begin
ToLua('displayStucuk();');
ResetFog;
End;

Every 0$1 trigger StreamModeActive and sBetray do
var un, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human]]);

if not tmp then
   exit;

un := tmp[rand(1, tmp)];

SetSide(un, 0);

ComAttackUnit(un, NearestUnitToUnit(all_units diff un, un));

wait(0$20);

SetSide(un, your_side);
End;

Every 0$1 trigger StreamModeActive and sContamin do
var depot;
begin
depot := FilterAllUnits([[f_side, your_side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

if not depot then
   exit;

ArtContamination(GetX(depot[1]), GetY(depot[1]), 70);
End;

Every 0$1 trigger StreamModeActive and sTeleport do
var i, x, y, d, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human]]);

if not tmp then
   exit;

for i in tmp do
    begin
    d := rand(0, 5);
    x := ShiftX(GetX(i), d, rand(3, 12));
    y := ShiftY(GetY(i), d, rand(3, 12));

    if ValidHex(x, y) then
       TeleportUnit(i, x, y, rand(3, 6), true);
    end;
End;

Every 0$1 trigger StreamModeActive and sOil do
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_engine, engine_combustion], [f_type, unit_vehicle]]);

if not tmp then
   exit;

for i in tmp do
    SetFuel(i, 0);
End;

Every 0$1 trigger StreamModeActive and sOilTower do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_btype, b_oil_mine]]);

if not tmp then
   exit;

DestroyUnit(tmp[1]);
End;

Every 0$1 trigger StreamModeActive and sSheik do
var un;
begin
uc_side := 0;
uc_nation := nation_arabian;

hc_gallery := '';
hc_name := '';

PrepareHuman(sex_male, class_desert_warior, 10);
un := CreateHuman;
PlaceUnitAnywhere(un, true);

repeat
 wait(0$1);
 ComAttackUnit(un, NearestUnitToUnit(FilterAllUnits([f_side, your_side]), un));
until IsDead(un);
End;

Every 0$1 trigger StreamModeActive and sEarthquake do
ToLua('earthquake(getX(game), 0, 32)');

Every 0$1 trigger StreamModeActive and sAI do
var tmp;
begin
enable;

tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_vehicle], [f_control, control_computer]]);

if not tmp then
   exit;

SetLives(tmp[rand(1, tmp)], 1);
End;

Every 0$1 trigger StreamModeActive and sBazooka do
var i, un, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_class, 1]]);

if not tmp then
   exit;

un := tmp[rand(1, tmp)];

if Crawls(un) then
   ComWalk(un);

SetClass(un, class_bazooker);
SetTech(tech_tauRad, your_side, state_researched);
SetTech(tech_spacAnom, your_side, state_researched);
End;

Every 0$1 trigger StreamModeActive and sMortar do
var i, un, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_class, 1]]);

if not tmp then
   exit;

un := tmp[rand(1, tmp)];

if Crawls(un) then
   ComWalk(un);

SetClass(un, class_mortar);
End;

Every 0$1 trigger StreamModeActive and sCargo do
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_vehicle], [f_or, [f_weapon, us_cargo_bay], [f_weapon, ru_cargo_bay], [f_weapon, ar_cargo_bay]]]);

if not tmp then
   exit;

for i in tmp do
    if GetCargo(i, mat_artifact) = 0 then
       SetCargo(i, mat_siberit, 100);
End;

Every 0$1 trigger StreamModeActive and sDLaser do
var i, tmp;
begin
tmp := FilterAllUnits([f_side, your_side]);

if not tmp then
   exit;

for i := 1 to 2 do
    begin
    uc_side := your_side;
    uc_nation := nation_american;

    vc_chassis := us_morphling;
    vc_engine := engine_siberite;
    vc_control := control_computer;
    vc_weapon := us_double_laser;

    if not IsInUnit(tmp[1]) then
       PlaceUnitXYR(CreateVehicle, GetX(tmp[1]), GetY(tmp[1]), 12, true)
    else
       PlaceUnitAnywhere(CreateVehicle, true);
    end;
End;

Every 0$1 trigger StreamModeActive and sExchange do
var i, s1, s2, sk1, sk2, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human], [f_not, [f_nation, 0]]]);

if not tmp then
   exit;

s1 := rand(1, 4);
sk1 := GetSkill(tmp[1], s1);

if s1 = 1 then
   s2 := rand(2, 4)
else
   s2 := 1;

sk2 := GetSkill(tmp[1], s2);

SetSkill(tmp[1], s1, sk2);
SetSkill(tmp[1], s2, sk1);
End;

Every 0$1 trigger StreamModeActive and sFac do
var tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_btype, b_factory]]);

if not tmp then
   exit;

SetLives(tmp[rand(1, tmp)], 1);
End;

Every 0$1 trigger StreamModeActive and sPower do
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_or, [f_btype, b_solar_power], [f_btype, b_oil_power], [f_btype, b_siberite_power]]]);

if not tmp then
   exit;

for i in tmp do
    SetLives(i, 1);
End;

Every 0$1 trigger StreamModeActive and sRandom do
var i, tmp, un;
begin
i := rand(1, 7);

case i of
     1: ToLua('earthquake(getX(game), 0, 32)');
     2: begin
        ToLua('displayStucuk();');
        ResetFog;
        end;
     3: begin
        tmp := FilterAllUnits([[f_side, your_side], [f_class, 1]]);

        if not tmp then
           exit;

        un := tmp[rand(1, tmp)];

        if Crawls(un) then
           ComWalk(un);

        SetClass(un, class_mortar);
        end;
     4: begin
        tmp := FilterAllUnits([[f_side, your_side], [f_btype, b_oil_mine]]);

        if not tmp then
           exit;

        CenterNowOnUnits(tmp[1]);
        DestroyUnit(tmp[1]);
        end;
     5..7: StreamSibBomb;
end;

End;

Every 0$1 trigger StreamModeActive and sShield do
var i, tmp, p;
begin
tmp := FilterAllUnits([[f_enemy, your_side], [f_or, [f_type, unit_human], [f_type, unit_vehicle]]]);

if not tmp then
   exit;

p := 0;

repeat
 wait(0$1);
 p := p + 1;

 for i in tmp do
     if GetLives(i) < 1000 then
        SetLives(i, 1000);
until p > 20;
End;

Every 0$1 trigger StreamModeActive and sTime do
begin
SetTech(tech_tauRad, your_side, state_researched);
SetTech(tech_tauField, your_side, state_researched);
End;

Every 0$1 trigger StreamModeActive and sTools do
var i, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_type, unit_human], [f_not, [f_nation, 0]]]);

if not tmp then
   exit;

for i in tmp do
    begin
    if Crawls(i) then
       ComWalk(i);

    SetClass(i, 2);
    end;
End;

Every 0$1 trigger StreamModeActive and sRanger do
var i, p, un;
begin
SetAttitude(your_side, 9, att_friend, true);
ChangeSideFog(9, your_side);

uc_side := 9;
uc_nation := 2;

hc_name := 'Dark Warrior';
hc_gallery := '';

hc_noskilllimit := true;
hc_skills := [30, 30, 30, 30];

un := CreateHuman;

hc_noskilllimit := false;

PlaceUnitAnywhere(un, true);

ToLua('playRanger()');

p := 0;

repeat
 wait(0$1);
 p := p + 1;

 if GetLives(un) < 1000 then
    SetLives(un, 1000);

 ComAttackUnit(un, NearestUnitToUnit(FilterAllUnits([[f_enemy, your_side], [f_dist, un, 30]]), un));
until p > 80 or IsDead(un);

if un then
   RemoveUnit(un);
End;

Every 0$1 trigger sComputer do
var i, tmp, j;
begin
tmp := FilterAllUnits([[f_enemy, your_side], [f_type, unit_human]]);

ToLua('playComputer()');

if not tmp then
   exit;

for i in tmp do
    for j := 1 to 4 do
        SetSkill(i, j, 10);  
End;

Every 0$1 trigger s30 do
var i, tmp;
begin
tmp := FilterAllUnits([f_side, your_side]);

if not tmp then
   exit;

for i in tmp do
    SetLives(i, 300);
End;

Every 0$1 trigger s60 do
var i, tmp;
begin
tmp := FilterAllUnits([f_side, your_side]);

if not tmp then
   exit;

for i in tmp do
    SetLives(i, 600);
End;

//
//
// HACK MOD
// 8.02.22
//
//
Export Function SOS_TargetableHack(cmd, unit, selectedUnit, x, y, p1, p2, p3, p4, p5, p6);
begin
case cmd of
     301: hHackSpawnHuman(p1, p2, p3, x, y);
     302: hHackSpawnVehicle(p1, p2, p3, p4, x, y);
     303: hHackSpawnBuilding(p1, p2, p3, p4, x, y);
     304: hHackTeleport(unit, x, y);
     end;
End;

Export Function hHackSpawnBuilding(nation, btype, dir, weapon, x, y);
var b;
begin
if nation < 1 or nation > 3 or HexInfo(x, y) then
   exit;

uc_side := your_side;
uc_nation := nation;

bc_level = 1;

case btype of
1: bc_type := b_depot;
2: bc_type := b_warehouse;
3: bc_type := b_lab;
4..9:
   begin
   bc_type := b_lab_half;
   bc_kind1 := [b_lab_weapon, b_lab_siberium, b_lab_computer, b_lab_opto,
                b_lab_spacetime, b_lab_biological][btype - 3];
   end;
10..13:
   begin
   bc_type := b_lab_full;
   bc_kind1 := [b_lab_weapon, b_lab_computer,
                b_lab_spacetime, b_lab_biological][btype - 9];
   bc_kind2 := [b_lab_siberium, b_lab_opto,
                 b_lab_computer, b_lab_opto][btype - 9];
   end;
14: bc_type := b_workshop;
15: bc_type := b_factory;
16: bc_type := b_ext_gun;
17: bc_type := [b_ext_noncombat, b_ext_stitch, b_ext_noncombat][nation];
18: bc_type := b_ext_radar;
19: bc_type := b_ext_radio;
20: bc_type := b_ext_siberium;
21: bc_type := b_ext_computer;
22: bc_type := b_ext_track;
23: bc_type := b_ext_laser;
24: bc_type := b_control_tower;
25: bc_type := b_breastwork;
26: bc_type := b_bunker;
27: bc_type := b_turret;
28: bc_type := b_armoury;
29: bc_type := b_barracks;
30: bc_type := b_solar_power;
31: bc_type := b_oil_power;
32: bc_type := b_siberite_power;
33: bc_type := b_oil_mine;
34: bc_type := b_siberite_mine;
end;

b := CreateAndPlaceBuildingXYD(x, y, dir);

if bc_type in [b_bunker, b_turret] then
   PlaceWeaponTurret(b, weapon);
End;

Export Function hHackUnlimitedResources;
var i, j, tmp;
begin
tmp := FilterAllUnits([[f_side, your_side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

if not tmp then
   exit;

for i in tmp do
    for j = 1 to 3 do
        SetResourceType(GetBase(i), j, 99999);
End;

Export Function hHackSetLevel10;
var i, j;
begin
for i in FilterAllUnits([f_type, unit_human]) do
    if IsSelected(i) then
       begin
       for j := 1 to 4 do
           SetSkill(i, j, 10);
       end;
End;

Export Function hHackSetLevel10YourUnits;
var i, j;
begin
for i in FilterAllUnits([[f_side, your_side], [f_type, unit_human]]) do
    begin
    for j := 1 to 4 do
        SetSkill(i, j, 10);
    end;
End;

Export Function hHackSpawnHuman(nation, class, skill, x, y);
begin
uc_side := your_side;
uc_nation := nation;

InitHc;

PrepareHuman(false, class, skill);

if HexInfo(x, y) = 0 then
   PlaceUnitXY(CreateHuman, x, y, true);
End;

Export Function hHackSpawnVehicle(chassis, engine, control, weapon, x, y);
var un;
begin
uc_side := your_side;

if chassis in [1, 2, 3, 4, 5] then
   uc_nation := nation_american
else if chassis in [11, 12, 13, 14] then
   uc_nation := nation_arabian
else
   uc_nation := nation_russian;

vc_chassis := chassis;
vc_engine := engine;
vc_control := control;
vc_weapon := weapon;

un := CreateVehicle;
SetDir(un, rand(0, 5));
PlaceUnitXY(un, x, y, true);
End;

Export hInvincible;
Every 1 do
hInvincible := [];

Every 10 do
var i;
begin
enable;

if not hInvincible then
   exit;

for i in hInvincible do
    if GetLives(i) < 1000 then
       SetLives(i, 1000);
End;

Export Function hHackInvincible;
var i;
begin
for i in FilterAllUnits([f_or, [f_type, unit_human], [f_type, unit_vehicle]]) do
    if IsSelected(i) then
       begin
       if i in hInvincible then
          hInvincible := hInvincible diff i
       else
          hInvincible := hInvincible union i;
       end;
End;

Export Function hHackInvisible;
var i, j;
begin
for i in FilterAllUnits([f_type, unit_human]) do
    if IsSelected(i) then
       ComForceInvisible(i);
End;

Export Function hHackChangeYourSide;
begin
if your_side = 8 then
   your_side := 0
else
   your_side := your_side + 1;
End;

Export Function hHackChangeUnitSide;
var i, j;
begin
for i in all_units do
    if IsSelected(i) then
       begin
       j := GetSide(i);

       if j = 8 then
          j := 0
       else
          j := j + 1;

       SetSide(i, j);
       end;
End;

Export Function hHackFog;
begin
FogOff(true);
End;

Export Function hHackTeleport(unit, x, y);
begin
TeleportUnit(unit, x, y, 1, true);
CenterOnXY(x, y);
End;

// WAYPOINTS
Export factoryWaypoints;
Export Function SetFactoryWaypoint(factory, x, y);
var i;
begin
if not factory or not ValidHex(x, y) or (GetBType(factory) <> b_factory and not GetType(factory) = unit_human) then
   exit;

if GetType(factory) = unit_human then
   factory := IsInUnit(factory);

if GetBType(factory) <> b_factory then
   exit;

if HexInfo(x, y) = factory then
   factoryWaypoints := Replace(factoryWaypoints, factory, 0)
else
   factoryWaypoints := Replace(factoryWaypoints, factory, [GetSide(factory), factory, x, y]);

UpdateFactoryWaypoints;
End;

Export Function UpdateFactoryWaypoints();
var i;
begin
ToLua('resetFactoryWaypoint();');

if factoryWaypoints then
   begin
   for i := 1 to factoryWaypoints do
       if factoryWaypoints[i] then
          ToLua('setFactoryWaypointXY(' & factoryWaypoints[i][1] & ',' & factoryWaypoints[i][2] & ',' & factoryWaypoints[i][3] & ',' & factoryWaypoints[i][4] & ')');
   end;
End;

Export warehouseGatheringPoints, warehouseCratesCollectors;
Export Function SetWarhouseGatheringPoint(warehouse, x, y);
begin
if HexInfo(x, y) = warehouse then
   warehouseGatheringPoints := Replace(warehouseGatheringPoints, warehouse, 0)
else
   warehouseGatheringPoints := Replace(warehouseGatheringPoints, warehouse, [GetSide(warehouse), warehouse, x, y]);

UpdateWarhouseGatheringPoints;
End;

Export Function UpdateWarhouseGatheringPoints();
var i;
begin
ToLua('resetWarehouseGatheringPoints();');

if warehouseGatheringPoints then
   begin
   for i := 1 to warehouseGatheringPoints do
       if warehouseGatheringPoints[i] then
          ToLua('setWarhouseGatheringPointXY(' & warehouseGatheringPoints[i][1] & ',' & warehouseGatheringPoints[i][2] & ',' & warehouseGatheringPoints[i][3] & ',' & warehouseGatheringPoints[i][4] & ')');
   end;
End;

Every 0$20 trigger warehouseGatheringPoints do
var i, j, list, tmp, side, x, y, depot, cratesNearbyPoint;
begin
enable;

list := warehouseGatheringPoints diff 0;

for i := 1 to list do
    begin
    if not list[i] then
       continue;

    depot := list[i][2];
    side := list[i][1];

    if IsDead(depot) or side <> GetSide(depot) then
       begin
       warehouseGatheringPoints := Replace(warehouseGatheringPoints, depot, 0);
       exit;
       end;

    x := list[i][3];
    y := list[i][4];

    cratesNearbyPoint := GetCratesNearbyXY(x, y, 12);

    if not cratesNearbyPoint then
       exit;

    tmp := FilterAllUnits([[f_side, side], [f_not, [f_hastask]], [f_or, [f_class, class_engineer], [f_class, class_apeman_engineer]]])
        union UnitFilter(UnitsInside(depot), [[f_not, [f_hastask]], [f_or, [f_class, class_engineer], [f_class, class_apeman_engineer]]]);

    if tmp then
       begin
       tmp := ShrinkArray(tmp, 3);

       for j in tmp do
           begin
           if IsInUnit(j) then
              ComExit(j);

           AddComCollect(j, x, y);
           end;

       exit;
       end;

    tmp := FilterAllUnits([[f_side, side], [f_or, [f_weapon, us_cargo_bay], [f_weapon, ru_cargo_bay],
                                                  [f_weapon, ar_cargo_bay], [f_weapon, ru_big_cargo_bay]]]);

    if tmp then
       begin
       for j in tmp do
           if GetFuel(i) > 20 and not HasTask(i) and (GetControl(i) <> control_manual or IsDrivenBy(i)) then
              begin
              ComCollect(j, x, y);
              exit;
              end;
       end;
    end;
End;